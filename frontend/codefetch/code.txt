eslint.config.mjs
```
1 | import { dirname } from "path";
2 | import { fileURLToPath } from "url";
3 | import { FlatCompat } from "@eslint/eslintrc";
4 | 
5 | const __filename = fileURLToPath(import.meta.url);
6 | const __dirname = dirname(__filename);
7 | 
8 | const compat = new FlatCompat({
9 |   baseDirectory: __dirname,
10 | });
11 | 
12 | const eslintConfig = [
13 |   ...compat.extends("next/core-web-vitals", "next/typescript"),
14 | ];
15 | 
16 | export default eslintConfig;
```

next.config.ts
```
1 | // next.config.ts
2 | import type { NextConfig } from "next";
3 | 
4 | const nextConfig: NextConfig = {
5 |   // We need to use static export because Azure Static Web Apps is a static hosting service.
6 |   // This will generate all the necessary HTML, CSS, and JS at build time.
7 |   output: 'export',
8 | 
9 |   // The 'rewrites' feature is a server-side concept that does not work with 'output: "export"'.
10 |   // It should be removed to prevent conflicts and ensure a clean build.
11 |   async rewrites() {
12 |     return [];
13 |   }
14 | };
15 | 
16 | export default nextConfig;
17 | 
18 | /*
19 |  *
20 |  * --- Frontend Code Example (e.g., in a React component or utility file) ---
21 |  *
22 |  * This section shows how to update your frontend code to use the live backend API URL.
23 |  * You must replace all your hardcoded 'localhost' calls with this pattern.
24 |  *
25 |  * 1. Create a .env.local file in the root of your project:
26 |  * NEXT_PUBLIC_API_BASE=https://<your-app-service-name>.azurewebsites.net
27 |  *
28 |  * 2. Update your API calls to use this environment variable.
29 |  * For example, if you have a function to fetch threads:
30 |  */
31 | //
32 | // const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE;
33 | //
34 | // const getThreads = async () => {
35 | //   try {
36 | //     // Use the environment variable to get the base URL
37 | //     const response = await fetch(`${API_BASE_URL}/threads`);
38 | //     if (!response.ok) {
39 | //       throw new Error('Network response was not ok');
40 | //     }
41 | //     const data = await response.json();
42 | //     return data;
43 | //   } catch (error) {
44 | //     console.error('There was a problem with the fetch operation:', error);
45 | //   }
46 | // };
47 | //
48 | // // Example of calling the function:
49 | // // getThreads().then(data => console.log(data));
50 | //
```

package.json
```
1 | {
2 |   "name": "frontend",
3 |   "version": "0.1.0",
4 |   "private": true,
5 |   "scripts": {
6 |     "dev": "next dev --turbopack",
7 |     "build": "next build",
8 |     "start": "next start",
9 |     "lint": "next lint"
10 |   },
11 |   "dependencies": {
12 |     "bootstrap-icons": "^1.13.1",
13 |     "dayjs": "^1.11.13",
14 |     "framer-motion": "^12.23.12",
15 |     "lucide-react": "^0.536.0",
16 |     "next": "15.4.4",
17 |     "react": "19.1.0",
18 |     "react-dom": "19.1.0"
19 |   },
20 |   "devDependencies": {
21 |     "@eslint/eslintrc": "^3",
22 |     "@tailwindcss/postcss": "^4.1.11",
23 |     "@types/node": "^20",
24 |     "@types/react": "^19",
25 |     "@types/react-dom": "^19",
26 |     "autoprefixer": "^10.4.21",
27 |     "eslint": "^9",
28 |     "eslint-config-next": "15.4.4",
29 |     "postcss": "^8.5.6",
30 |     "tailwindcss": "^4.1.11",
31 |     "typescript": "^5"
32 |   }
33 | }
```

postcss.config.js
```
1 | // frontend/postcss.config.js
2 | module.exports = {
3 |   plugins: {
4 |     // Use the new Tailwind CSS PostCSS plugin package
5 |     '@tailwindcss/postcss': {},
6 |     autoprefixer: {},
7 |   },
8 | }
```

staticwebapp.config.json
```
1 | {
2 |   "navigationFallback": {
3 |     "rewrite": "/index.html"
4 |   },
5 |   "routes": [
6 |     {
7 |       "route": "/api/*",
8 |       "rewrite": "https://itcaredev-hkeyh9cheucmbfbf.australiaeast-01.azurewebsites.net"
9 |     }
10 |   ]
11 | }
```

tailwind.config.js
```
1 | /** @type {import('tailwindcss').Config} */
2 | module.exports = {
3 |   content: [
4 |     "./pages/**/*.{js,jsx,ts,tsx}",
5 |     "./components/**/*.{js,jsx,ts,tsx}"
6 |   ],
7 |   safelist: [
8 |     'truncate-2'   // ensures your custom clamp class is included
9 |   ],
10 |   theme: {
11 |     extend: {},
12 |   },
13 |   plugins: [],
14 | 
15 |   darkMode: 'class', // enable dark mode support
16 |   
17 | }
```

tsconfig.json
```
1 | {
2 |   "compilerOptions": {
3 |     "target": "ES2017",
4 |     "lib": ["dom", "dom.iterable", "esnext"],
5 |     "allowJs": true,
6 |     "skipLibCheck": true,
7 |     "strict": true,
8 |     "noEmit": true,
9 |     "esModuleInterop": true,
10 |     "module": "esnext",
11 |     "moduleResolution": "bundler",
12 |     "resolveJsonModule": true,
13 |     "isolatedModules": true,
14 |     "jsx": "preserve",
15 |     "incremental": true,
16 |     "plugins": [
17 |       {
18 |         "name": "next"
19 |       }
20 |     ],
21 |     "paths": {
22 |       "@/*": ["./src/*"]
23 |     }
24 |   },
25 |   "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "pages/confirm.jsx", "lib/KbFeedback.jsx"],
26 |   "exclude": ["node_modules"]
27 | }
```

components/AuthContext.jsx
```
1 | 'use client';
2 | 
3 | import React, { createContext, useContext, useState, useEffect } from 'react';
4 | 
5 | const TOKEN_KEY = 'authToken';
6 | const AGENT_KEY = 'authAgent';
7 | 
8 | // Use ONE env var, make sure you set NEXT_PUBLIC_API_BASE in your SWA/Next.js env
9 | const API_BASE =
10 |   (process.env.NEXT_PUBLIC_API_BASE || 'http://localhost:5000')
11 |     .replace(/\/+$/, '');
12 | 
13 | const AuthContext = createContext({
14 |   token: null,
15 |   agent: null,
16 |   isAuthenticated: false,
17 |   login: async () => {},
18 |   logout: () => {},
19 | });
20 | 
21 | export function AuthProvider({ children }) {
22 |   const [mounted, setMounted] = useState(false);
23 |   const [token, setToken] = useState(null);
24 |   const [agent, setAgent] = useState(null);
25 | 
26 |   const isAuthenticated = Boolean(token && agent);
27 | 
28 |   useEffect(() => {
29 |     setMounted(true);
30 |     try {
31 |       const t = localStorage.getItem(TOKEN_KEY);
32 |       const a = localStorage.getItem(AGENT_KEY);
33 |       if (t) setToken(t);
34 |       if (a) setAgent(JSON.parse(a));
35 |     } catch {}
36 |   }, []);
37 | 
38 |   useEffect(() => {
39 |     if (!mounted) return;
40 |     if (token) localStorage.setItem(TOKEN_KEY, token);
41 |     else localStorage.removeItem(TOKEN_KEY);
42 |   }, [token, mounted]);
43 | 
44 |   useEffect(() => {
45 |     if (!mounted) return;
46 |     if (agent) localStorage.setItem(AGENT_KEY, JSON.stringify(agent));
47 |     else localStorage.removeItem(AGENT_KEY);
48 |   }, [agent, mounted]);
49 | 
50 |   async function login(email, password) {
51 |     const resp = await fetch(`${API_BASE}/login`, {
52 |       method: 'POST',
53 |       headers: { 'Content-Type': 'application/json' },
54 |       body: JSON.stringify({ email, password }),
55 |       // credentials: 'include', // only if using cookies
56 |     });
57 | 
58 |     let data = {};
59 |     try {
60 |       data = await resp.json();
61 |     } catch {}
62 | 
63 |     if (!resp.ok) {
64 |       throw new Error(data.error || data.message || `Login failed (HTTP ${resp.status})`);
65 |     }
66 | 
67 |     const { token: newToken, agent: agentData } = data;
68 |     if (!newToken || !agentData) throw new Error('Malformed response from server');
69 | 
70 |     setToken(newToken);
71 |     setAgent(agentData);
72 |     return { token: newToken, agent: agentData };
73 |   }
74 | 
75 |   function logout() {
76 |     setToken(null);
77 |     setAgent(null);
78 |   }
79 | 
80 |   if (!mounted) return null;
81 | 
82 |   return (
83 |     <AuthContext.Provider value={{ token, agent, isAuthenticated, login, logout }}>
84 |       {children}
85 |     </AuthContext.Provider>
86 |   );
87 | }
88 | 
89 | export function useAuth() {
90 |   return useContext(AuthContext);
91 | }
```

components/Avatar.jsx
```
1 | // Minimal avatar component for user/bot
2 | export default function Avatar({ type }) {
3 |   return (
4 |     <span className={`inline-flex items-center justify-center w-8 h-8 rounded-full shadow ${type === 'bot' ? 'bg-blue-100 dark:bg-blue-900' : 'bg-purple-100 dark:bg-purple-900'}`}>
5 |       {type === 'bot' ? '🤖' : '🧑'}
6 |     </span>
7 |   );
8 | }
```

components/ChatHistory.jsx
```
1 | 'use client';
2 | import KBDashboard from './KBDashboard';
3 | import Gate from './Gate';
4 | import React, { useEffect, useState, useRef, useMemo } from 'react';
5 | import dayjs from 'dayjs';
6 | import relativeTime from 'dayjs/plugin/relativeTime';
7 | // import { apiFetch } from '/apiFetch';
8 | dayjs.extend(relativeTime);
9 | 
10 | // =========================
11 | // Config & helpers
12 | // =========================
13 | const API_BASE = (process.env.NEXT_PUBLIC_API_BASE || 'http://localhost:5000').replace(/\/+$/, '');
14 | 
15 | 
16 | const authHeaders = () => {
17 |   try {
18 |     const authToken = localStorage.getItem('authToken');
19 |     return authToken ? { Authorization: `Bearer ${authToken}` } : {};
20 |   } catch {
21 |     return {};
22 |   }
23 | };
24 | 
25 | // Markdown-lite + lists + mentions
26 | function renderListOrText(text, mentionRenderer) {
27 |   if (typeof text !== 'string') return text;
28 |   const renderMentions =
29 |     typeof mentionRenderer === 'function' ? mentionRenderer : (s) => s;
30 | 
31 |   const applyMarkdown = (str) => {
32 |     if (typeof str !== 'string') return str;
33 |     const BOLD_RE = /\*\*([^*]+)\*\*|\*([^*]+)\*/g;
34 |     let lastIndex = 0;
35 |     let out = [];
36 |     let match;
37 |     let key = 0;
38 |     while ((match = BOLD_RE.exec(str)) !== null) {
39 |       if (match.index > lastIndex) out.push(str.slice(lastIndex, match.index));
40 |       const boldText = match[1] || match[2];
41 |       out.push(<strong key={key++}>{boldText}</strong>);
42 |       lastIndex = match.index + match[0].length;
43 |     }
44 |     if (lastIndex < str.length) out.push(str.slice(lastIndex));
45 |     return out;
46 |   };
47 | 
48 |   // Ordered list
49 |   const ordered = [...text.matchAll(
50 |     /(?:^|\s)(\d+[\.)])\s+([\s\S]*?)(?=(?:\s+\d+[\.)]\s)|$)/g
51 |   )];
52 |   if (ordered.length > 1) {
53 |     const firstIdx = text.search(/\d+[\.)]\s+/);
54 |     const intro = firstIdx > 0 ? text.slice(0, firstIdx).trim() : '';
55 |     return (
56 |       <>
57 |         {intro && (
58 |           <div className="mb-2 whitespace-pre-line">
59 |             {applyMarkdown(renderMentions(intro))}
60 |           </div>
61 |         )}
62 |         <ol className="list-decimal ml-5 space-y-1">
63 |           {ordered.map((m, i) => (
64 |             <li key={i} className="whitespace-pre-line">
65 |               {applyMarkdown(renderMentions(m[2].trim()))}
66 |             </li>
67 |           ))}
68 |         </ol>
69 |       </>
70 |     );
71 |   }
72 | 
73 |   // Bulleted list
74 |   const bullets = [...text.matchAll(
75 |     /(?:^|\n)\s*[-*•]\s+([^\n]+?)(?=(?:\n\s*[-*•]\s+)|$)/g
76 |   )];
77 |   if (bullets.length > 1) {
78 |     return (
79 |       <ul className="list-disc ml-5 space-y-1">
80 |         {bullets.map((m, i) => (
81 |           <li key={i} className="whitespace-pre-line">
82 |             {applyMarkdown(renderMentions(m[1].trim()))}
83 |           </li>
84 |         ))}
85 |       </ul>
86 |     );
87 |   }
88 | 
89 |   const fixed = text.replace(/(?!^)(\s*)(\d+[\.)]|[-*•])\s+/g, '\n$2 ');
90 |   return (
91 |     <span className="whitespace-pre-line">
92 |       {applyMarkdown(renderMentions(fixed))}
93 |     </span>
94 |   );
95 | }
96 | 
97 | function toDisplayString(content) {
98 |   if (content == null) return '';
99 |   if (typeof content === 'string') {
100 |     if (/^\s*[{[]/.test(content)) {
101 |       try {
102 |         const obj = JSON.parse(content);
103 |         if (obj && typeof obj.text === 'string')  return obj.text;
104 |         if (obj && typeof obj.reply === 'string') return obj.reply;
105 |       } catch {}
106 |     }
107 |     return content;
108 |   }
109 |   if (typeof content === 'object') {
110 |     if (typeof content.text === 'string')    return content.text;
111 |     if (typeof content.reply === 'string')   return content.reply;
112 |     if (typeof content.message === 'string') return content.message;
113 |     if (Array.isArray(content))              return content.join('\n');
114 |   }
115 |   return String(content ?? '');
116 | }
117 | 
118 | // =========================
119 | // Small UI pieces
120 | // =========================
121 | function CollapsibleSection({ title, children, isOpen, onToggle }) {
122 |   return (
123 |     <div className="rounded-xl bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-800 shadow mb-2">
124 |       <button
125 |         className="w-full flex items-center justify-between px-4 py-2 font-semibold text-gray-800 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-indigo-400 rounded-t-xl bg-gray-50 dark:bg-gray-800"
126 |         onClick={onToggle}
127 |         aria-expanded={isOpen}
128 |       >
129 |         <span>{title}</span>
130 |         <span className="ml-2">{isOpen ? '▲' : '▼'}</span>
131 |       </button>
132 |       {isOpen && (
133 |         <div className="px-4 py-2 max-h-60 overflow-y-auto">{children}</div>
134 |       )}
135 |     </div>
136 |   );
137 | }
138 | 
139 | function TicketInfoCard({ ticket }) {
140 |   if (!ticket) return null;
141 |   // Download summary handler
142 |   const handleDownloadSummary = () => {
143 |     if (!ticket.id) return;
144 |     const url = `${API_BASE}/threads/${ticket.id}/download-summary`;
145 |     // Use browser fetch to get the file and trigger download
146 |     fetch(url, {
147 |       method: 'GET',
148 |       headers: authHeaders(),
149 |     })
150 |       .then(response => response.blob())
151 |       .then(blob => {
152 |         const link = document.createElement('a');
153 |         link.href = window.URL.createObjectURL(blob);
154 |         link.download = `ticket_${ticket.id}_summary.txt`;
155 |         document.body.appendChild(link);
156 |         link.click();
157 |         document.body.removeChild(link);
158 |       });
159 |   };
160 |   return (
161 |     <div className="rounded-xl bg-gradient-to-r from-yellow-50 to-white dark:from-yellow-900 dark:to-black p-4 border-l-4 border-yellow-500 shadow-md mb-4 mx-4 flex items-start gap-4">
162 |       <span className="text-yellow-500 dark:text-yellow-300 text-3xl mt-1">📄</span>
163 |       <div>
164 |         <div className="font-semibold text-yellow-800 dark:text-yellow-200 text-base mb-1">Ticket Summary</div>
165 |         <div className="text-gray-800 dark:text-gray-100 whitespace-pre-line">
166 |           {(ticket.created || ticket.created_at) && <div>🕐 <b>Created:</b> {dayjs(ticket.created || ticket.created_at).format('MMM D, h:mm A')}</div>}
167 |           {ticket.text && <div className="mt-2 text-sm text-gray-600 dark:text-gray-300">{ticket.text}</div>}
168 |         </div>
169 |         {ticket.escalated && (
170 |           <button
171 |             onClick={handleDownloadSummary}
172 |             className="mt-3 px-3 py-1 rounded-full bg-indigo-500 text-white text-sm shadow hover:bg-indigo-600"
173 |           >
174 |             ⬇️ Download Summary
175 |           </button>
176 |         )}
177 |       </div>
178 |     </div>
179 |   );
180 | }
181 | 
182 | function StepProgressBar({ stepInfo }) {
183 |   if (!stepInfo || !stepInfo.step || !stepInfo.total) return null;
184 |   return (
185 |     <div className="flex items-center gap-2 px-4 py-2">
186 |       <div className="w-32 h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
187 |         <div className="h-2 bg-indigo-500" style={{ width: `${(stepInfo.step / stepInfo.total) * 100}%` }} />
188 |       </div>
189 |       <span className="text-xs text-indigo-700 dark:text-indigo-300 font-semibold">Step {stepInfo.step} of {stepInfo.total} ✔️</span>
190 |     </div>
191 |   );
192 | }
193 | 
194 | function ProposedSolutionBox({ text, onDraft, onDismiss }) {
195 |   if (!text) return null;
196 |   return (
197 |     <div className="mx-4 mb-3 rounded-xl border border-emerald-300 dark:border-emerald-700 bg-emerald-50 dark:bg-emerald-900/30 p-4 shadow-sm">
198 |       <div className="text-emerald-800 dark:text-emerald-100 font-semibold mb-2">Proposed solution</div>
199 |       <pre className="whitespace-pre-wrap text-sm text-gray-800 dark:text-gray-100">{text}</pre>
200 |       <div className="mt-3 flex gap-2">
201 |         <button onClick={onDraft} className="px-3 py-1 rounded-full bg-indigo-600 text-white text-sm">
202 |           ✉️ Draft email
203 |         </button>
204 |         <button
205 |           onClick={() => onDismiss?.(String(text || '').trim())}
206 |          
207 |           className="mt-3 px-3 py-1 rounded-full bg-gray-200 dark:bg-gray-700 text-sm"
208 |         >
209 |           Dismiss
210 |         </button>
211 |       </div>
212 |     </div>
213 |   );
214 | }
215 | 
216 | // Modern, sticky email editor
217 | function DraftEmailEditor({
218 |   open,
219 |   body,
220 |   setBody,
221 |   cc,
222 |   setCc,
223 |   loading,
224 |   error,
225 |   onSend,
226 |   onCancel,
227 |   aiDraft,
228 |   showAIDisclaimer,
229 |   setShowAIDisclaimer,
230 | }) {
231 |   if (!open) return null;
232 | 
233 |   return (
234 |     <div className="w-full border-t border-gray-200 dark:border-gray-800 bg-white/95 dark:bg-black/95 backdrop-blur sticky bottom-0 z-[60] pointer-events-auto">
235 |       <div className="max-w-4xl mx-auto px-4 py-3">
236 |         <div className="font-semibold mb-2 text-gray-900 dark:text-gray-100">Draft email</div>
237 | 
238 |         <textarea
239 |           className="w-full min-h-[140px] rounded-lg ring-1 ring-gray-300 dark:ring-gray-700 bg-white dark:bg-gray-900 p-3 text-sm"
240 |           value={body}
241 |           onChange={(e) => setBody(e.target.value)}
242 |         />
243 | 
244 |         <div className="mt-2 flex items-center gap-2">
245 |           <input
246 |             className="flex-grow rounded-lg ring-1 ring-gray-300 dark:ring-gray-700 bg-white dark:bg-gray-900 p-2 text-sm"
247 |             placeholder="CC (comma or space separated)"
248 |             value={cc}
249 |             onChange={(e) => setCc(e.target.value)}
250 |           />
251 |           <button
252 |             onClick={onSend}
253 |             disabled={loading}
254 |             className="px-4 py-2 rounded-full bg-indigo-600 text-white text-sm disabled:opacity-50"
255 |           >
256 |             {loading ? 'Sending…' : 'Send'}
257 |           </button>
258 |           <button
259 |             onClick={onCancel}
260 |             disabled={loading}
261 |             className="px-4 py-2 rounded-full bg-gray-200 dark:bg-gray-700 text-sm"
262 |           >
263 |             Cancel
264 |           </button>
265 |         </div>
266 | 
267 |         {/* AI disclaimer toggle (only if the body came from AI) */}
268 |         {aiDraft && (
269 |           <div className="mt-2 flex items-center gap-2">
270 |             <input
271 |               type="checkbox"
272 |               id="ai-disclaimer-toggle"
273 |               checked={showAIDisclaimer}
274 |               onChange={(e) => setShowAIDisclaimer(e.target.checked)}
275 |               className="accent-indigo-600"
276 |             />
277 |             <label
278 |               htmlFor="ai-disclaimer-toggle"
279 |               className="text-xs text-gray-600 dark:text-gray-300 select-none"
280 |             >
281 |               Include AI-generated draft disclaimer
282 |             </label>
283 |           </div>
284 |         )}
285 | 
286 |         {error && <div className="mt-2 text-sm text-red-600">{error}</div>}
287 |       </div>
288 |     </div>
289 |   );
290 | }
291 | 
292 | 
293 | 
294 | // Types for prompts
295 | // type Prompt = string | { kind: 'ask_user'; text: string } | { kind: 'automate'; intent: string; label?: string };
296 | function SuggestedPrompts({
297 |   threadId,
298 |   prompts = [],
299 |   open,
300 |   onToggle,
301 |   onPromptSelect,
302 |   apiBase = API_BASE,
303 | }) {
304 |   // const postChat = (body) =>
305 |   //   fetch(`${apiBase}/threads/${threadId}/chat`, {
306 |   //     method: "POST",
307 |   //     credentials: "include",
308 |   //     headers: { "Content-Type": "application/json", ...authHeaders() },
309 |   //     body: JSON.stringify(body),
310 |   //   });
311 | 
312 |   const toText = (p) => {
313 |     if (typeof p === "string") return p;
314 |     if (p && typeof p === 'object') {
315 |     if (p.kind === 'ask_user') return String(p.text || '');
316 |     if (p.kind === 'automate') return String(p.label || p.intent || '');
317 |     if (typeof p.text === 'string') return p.text; // generic fallback
318 |   }
319 |   return '';
320 | };
321 | 
322 |   // Instead of sending immediately, call onPromptSelect to set the send box
323 |   // const handleClick = (p) => {
324 |   //   // window.alert('[DEBUG] SuggestedPrompts button clicked: ' + (typeof p === 'string' ? p : JSON.stringify(p)));
325 |   //   // console.debug('[DEBUG] SuggestedPrompts button clicked:', p);
326 |   //   if (typeof p === "string") {
327 |   //     if (typeof onPromptSelect === "function") onPromptSelect(p);
328 |   //     return;
329 |   //   }
330 |   //   if (p.kind === "ask_user") {
331 |   //     if (typeof onPromptSelect === "function") onPromptSelect(p.text);
332 |   //     return;
333 |   //   }
334 |   //   if (p.kind === "automate") {
335 |   //     if (typeof onPromptSelect === "function") onPromptSelect(p.intent);
336 |   //     return;
337 |   //   }
338 |   // };
339 | 
340 |   const handleClick = (p) => { const text = toText(p).trim(); if (!text) return; onPromptSelect?.(text); };
341 | 
342 |   const labelFor = (p) =>
343 |     typeof p === "string" ? p : p.kind === "ask_user" ? p.text : p.label || p.intent;
344 | 
345 |   // Filter out 'Should I escalate this?' from prompts
346 |   const filteredPrompts = Array.isArray(prompts)
347 |     ? prompts.filter(p => {
348 |         const label = labelFor(p).trim().toLowerCase();
349 |         return label !== 'should i escalate this?';
350 |       })
351 |     : prompts;
352 | 
353 |   return (
354 |     <CollapsibleSection title={<span>💡 Suggested Prompts</span>} isOpen={open} onToggle={onToggle}>
355 |       <div className="max-h-48 overflow-y-auto space-y-2">
356 |         {filteredPrompts.length === 0 ? (
357 |           <div className="text-sm text-gray-400">No suggestions available.</div>
358 |         ) : (
359 |           filteredPrompts.map((p, i) => (
360 |             <button
361 |               key={i}
362 |               type="button"
363 |               className="w-full rounded-lg px-3 py-1.5 text-sm shadow"
364 |               onClick={() => handleClick(p)}
365 |               title={labelFor(p)}
366 |             >
367 |               {labelFor(p)}
368 |             </button>
369 |           ))
370 |         )}
371 |       </div>
372 |     </CollapsibleSection>
373 |   );
374 | }
375 | function RelatedTicketList({ tickets, loading, error, onClick, openSections, toggleSection }) {
376 |   const firstThreeWords = (str) => {
377 |     if (!str) return '';
378 |     const words = str.trim().split(/\s+/);
379 |     return words.slice(0, 3).join(' ') + (words.length > 3 ? '…' : '');
380 |   };
381 |   return (
382 |     <CollapsibleSection
383 |       title={<span>📚 Related Tickets</span>}
384 |       isOpen={openSections.related}
385 |       onToggle={() => toggleSection('related')}
386 |     >
387 |       <div className="max-h-48 overflow-y-auto">
388 |         {loading ? (
389 |           <div className="text-sm text-gray-500">Loading related tickets…</div>
390 |         ) : error ? (
391 |           <div className="text-sm text-red-600">{error}</div>
392 |         ) : tickets.length === 0 ? (
393 |           <div className="text-sm text-gray-400">No similar tickets found.</div>
394 |         ) : (
395 |           <div className="flex flex-col gap-2">
396 |             {tickets.map((t, idx) => {
397 |               const summarySource = t.title || t.subject || t.summary || t.text || 'Related ticket';
398 |               return (
399 |                 <div
400 |                   key={t.id || idx}
401 |                   className="mb-2 p-2 bg-purple-100 dark:bg-purple-900 rounded-xl text-purple-800 dark:text-purple-100 text-sm shadow-sm cursor-pointer border border-purple-200 dark:border-purple-700 hover:bg-purple-200 dark:hover:bg-purple-800 transition flex flex-col"
402 |                   onClick={() => onClick(t)}
403 |                 >
404 |                   <div className="font-medium">
405 |                     {firstThreeWords(summarySource)}
406 |                   </div>
407 |                   {typeof t.similarity === 'number' && (
408 |                     <div className="text-xs text-purple-400 mt-1">Similarity: {(t.similarity * 100).toFixed(1)}%</div>
409 |                   )}
410 |                 </div>
411 |               );
412 |             })}
413 |           </div>
414 |         )}
415 |       </div>
416 |     </CollapsibleSection>
417 |   );
418 | }
419 | 
420 | function TimelinePanel({ events, loading, error, openSections, toggleSection }) {
421 |   const icon = (type) => {
422 |     switch ((type || '').toUpperCase()) {
423 |       case 'OPENED': return '🟢';
424 |       case 'ESCALATED': return '🟣';
425 |       case 'DEESCALATED': return '🟡';
426 |       case 'CLOSED': return '⚫';
427 |       case 'EMAIL_SENT': return '✉️';
428 |       case 'EMAIL_FAILED': return '❗';
429 |       case 'SOLUTION_CONFIRMED':
430 |       case 'USER_CONFIRMED':
431 |       case 'CONFIRMED':
432 |       case 'CONFIRM_OK': return '✅';
433 |       case 'SOLUTION_DENIED':
434 |       case 'USER_DENIED':
435 |       case 'NOT_FIXED':
436 |       case 'CONFIRM_NO':
437 |       case 'NOT_CONFIRMED':
438 |       case 'NOT_CONFIRM': return '🚫';
439 |       default: return '📌';
440 |     }
441 |   };
442 | 
443 |   const label = (ev) => {
444 |     const t = (ev.type || ev.event_type || '').toUpperCase();
445 |     const d = ev.details || {};
446 |     switch (t) {
447 |       case 'OPENED': return 'Ticket opened';
448 |       case 'ESCALATED': return `Escalated ${d.from_level ? `L${d.from_level} → ` : ''}${d.to_level ? `L${d.to_level}` : 'next level'}`;
449 |       case 'DEESCALATED': return `De-escalated to ${d.to_level ? `L${d.to_level}` : 'lower level'}${d.note ? ` (note: ${d.note})` : ''}`;
450 |       case 'CLOSED': return 'Ticket closed';
451 |       case 'EMAIL_SENT': return `Email sent${d.template ? ` (${d.template})` : ''}${d.to ? ` to ${d.to}` : ''}`;
452 |       case 'EMAIL_FAILED': return 'Email failed';
453 |       case 'SOLUTION_CONFIRMED':
454 |       case 'USER_CONFIRMED':
455 |       case 'CONFIRMED':
456 |       case 'CONFIRM_OK': return 'User confirmed the solution';
457 |       case 'SOLUTION_DENIED':
458 |       case 'USER_DENIED':
459 |       case 'NOT_FIXED':
460 |       case 'CONFIRM_NO':
461 |       case 'NOT_CONFIRMED':
462 |       case 'NOT_CONFIRM': return `User says not fixed${d.reason ? `: ${d.reason}` : ''}`;
463 |       default:
464 |         return d.label || d.message || (ev.type || ev.event_type) || 'Event';
465 |     }
466 |   };
467 | 
468 | const safeEvents = Array.isArray(events)
469 |   ? [...events].sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
470 |   : [];
471 | 
472 | const dedupedEvents = [];
473 | let prevType = null, prevLabel = null;
474 | 
475 | for (const ev of safeEvents) {
476 |   const type = (ev.type || ev.event_type || '').toUpperCase();
477 |   const lbl = label(ev);
478 |   if (type === prevType && lbl === prevLabel) continue;
479 |   dedupedEvents.push(ev);
480 |   prevType = type;
481 |   prevLabel = lbl;
482 | }
483 | 
484 | 
485 |   return (
486 |     <CollapsibleSection
487 |       title={<span>🕒 Activity</span>}
488 |       isOpen={openSections.activity}
489 |       onToggle={() => toggleSection('activity')}
490 |     >
491 |       {loading && <div className="text-sm text-gray-500">Loading timeline…</div>}
492 |       {error && !loading && <div className="text-sm text-red-600">{error}</div>}
493 |       {!loading && !error && (
494 |         <ul className="space-y-2">
495 |          {dedupedEvents.length === 0 ? (
496 |             <li className="text-sm text-gray-400">No events yet.</li>
497 |           ) : (
498 |             dedupedEvents.map((ev, i) => (
499 |               <li key={ev.id ?? i} className="text-sm flex items-start gap-2">
500 |                 <span className="mt-0.5">{icon(ev.type || ev.event_type)}</span>
501 |                 <div className="flex-1">
502 |                   <div className="text-gray-800 dark:text-gray-100">{label(ev)}</div>
503 |                   <div className="text-[11px] text-gray-500">
504 |                     {dayjs(ev.created_at).fromNow()}
505 |                   </div>
506 |                 </div>
507 |               </li>
508 |             ))
509 |           )}
510 |         </ul>
511 |       )}
512 |     </CollapsibleSection>
513 |   );
514 | }
515 | 
516 | function ChatComposer({ value, onChange, onSend, sending, textareaRef, autoFocus, drawerOpen }) {
517 |   return (
518 |     <div className={`composer-bar w-full px-4 py-3 bg-white/90 dark:bg-black/90 shadow-xl sticky bottom-0 rounded-t-2xl ` + (drawerOpen ? 'pointer-events-none opacity-40 z-10' : 'z-40')}>
519 |       <div className="flex items-center w-full max-w-4xl mx-auto gap-3">
520 |         <input
521 |           ref={textareaRef}
522 |           type="text"
523 |           aria-label="Type a message"
524 |           placeholder="Type a message…"
525 |           className="flex-grow rounded-full bg-white dark:bg-gray-800 shadow-inner ring-1 ring-gray-200 dark:ring-gray-700 px-6 py-3 placeholder-gray-400 dark:placeholder-gray-400 text-base focus:outline-none focus:ring-2 focus:ring-indigo-400 transition"
526 |           value={value}
527 |           onChange={e => {
528 |             if (typeof e.target.value === 'string') onChange(e.target.value);
529 |           }}
530 |           onKeyDown={e => !sending && e.key === 'Enter' && onSend()}
531 |           autoFocus={autoFocus}
532 |         />
533 |         <button
534 |           onClick={onSend}
535 |           aria-label="Send message"
536 |           disabled={sending}
537 |           className="px-6 py-3 bg-gradient-to-r from-indigo-500 to-purple-500 hover:from-indigo-600 hover:to-purple-600 text-white font-semibold rounded-full shadow-md transform hover:-translate-y-0.5 transition disabled:opacity-50"
538 |         >
539 |           🚀 {sending ? 'Sending…' : 'Send'}
540 |         </button>
541 |       </div>
542 |     </div>
543 |   );
544 | }
545 | 
546 | // function RightTopPanel({
547 | //   tid,
548 | //   API_BASE,
549 | //   panelOpen,
550 | //   setPanelOpen,
551 | //   suggestedPrompts,
552 | //   suggestedPromptsLoading,
553 | //   suggestedPromptsError,
554 | //   relatedTickets,
555 | //   relatedTicketsLoading,
556 | //   relatedTicketsError,
557 | //   handleRelatedTicketClick,
558 | //   stepInfo,
559 | //   timeline,
560 | //   timelineLoading,
561 | //   timelineError,
562 | //   openSections,
563 | //   toggleSection,
564 | // }) {
565 | //   return (
566 | //     <aside className="flex flex-col gap-2 w-full md:w-80 max-w-xs">
567 | //       {/* Activity collapsible at the top */}
568 | //       <TimelinePanel
569 | //         events={timeline}
570 | //         loading={timelineLoading}
571 | //         error={timelineError}
572 | //         openSections={openSections}
573 | //         toggleSection={toggleSection}
574 | //       />
575 | //       <SuggestedPrompts
576 | //         threadId={tid}
577 | //         prompts={suggestedPrompts}
578 | //         open={panelOpen}
579 | //         onToggle={() => setPanelOpen((v) => !v)}
580 | //         apiBase={API_BASE}
581 | //       />
582 | //       <RelatedTicketList
583 | //         tickets={relatedTickets}
584 | //         loading={relatedTicketsLoading}
585 | //         error={relatedTicketsError}
586 | //         onClick={handleRelatedTicketClick}
587 | //         openSections={openSections}
588 | //         toggleSection={toggleSection}
589 | //       />
590 | //       <StepProgressBar stepInfo={stepInfo} />
591 | //     </aside>
592 | //   );
593 | // }
594 | 
595 | 
596 | // =========================
597 | // Main Component
598 | // =========================
599 | function ChatHistory({ threadId, onBack, className = '' }) {
600 |   // Core ticket/messages
601 |   const [ticket, setTicket] = useState(null);
602 |   const [messages, setMessages] = useState([]);
603 |   const [confirmLinks, setConfirmLinks] = useState({ confirm: '', notConfirm: '' });
604 |   const [panelOpen, setPanelOpen] = useState(true); 
605 | 
606 | 
607 |   // De-duplicate (user/bot/assistant) across entire stream (not just adjacent)
608 |   const displayMessages = useMemo(() => {
609 |     const out = [];
610 |     const norm = (s) => String(s || '').trim().toLowerCase().replace(/\s+/g, ' ');
611 | 
612 |     for (const cur of messages) {
613 |       const prev = out[out.length - 1];
614 |       const curIsAssistant = cur.sender === 'assistant' || cur.sender === 'bot';
615 |       const prevIsAssistant = prev && (prev.sender === 'assistant' || prev.sender === 'bot');
616 | 
617 |       // Only suppress if the *previous* assistant bubble is identical
618 |       if (
619 |         curIsAssistant &&
620 |         prevIsAssistant &&
621 |         norm(toDisplayString(prev.content)) === norm(toDisplayString(cur.content))
622 |       ) {
623 |         continue;
624 |       }
625 |       out.push(cur);
626 |     }
627 |     return out;
628 |   }, [messages]);
629 | 
630 | 
631 | 
632 |   // Sidebar (collapsible)
633 |   const [openSections, setOpenSections] = useState({ suggested: true, related: false, activity: false });
634 |   const toggleSection = (section) => setOpenSections(prev => ({ ...prev, [section]: !prev[section] }));
635 | 
636 |   // Thread nav
637 |   const [parentThreadId, setParentThreadId] = useState(null);
638 |   const [activeThreadId, setActiveThreadId] = useState(threadId);
639 |   const tid = activeThreadId || threadId;
640 | 
641 |   // KB overlay
642 |   const [showKB, setShowKB] = useState(false);
643 | 
644 |   // Timeline
645 |   const [timeline, setTimeline] = useState([]);
646 |   const [timelineLoading, setTimelineLoading] = useState(false);
647 |   const [timelineError, setTimelineError] = useState(null);
648 |   const [timelineRefresh, setTimelineRefresh] = useState(0);
649 | 
650 |   // Dark mode
651 |   const [darkMode, setDarkMode] = useState(false);
652 | 
653 |   // Loading state for thread
654 |   const [loading, setLoading] = useState(false);
655 |   const [error, setError] = useState(null);
656 | 
657 |   // Composer
658 |   const [sending, setSending] = useState(false);
659 |   const [newMsg, setNewMsg] = useState('');
660 | 
661 |   // Actions (escalate/close)
662 |   const [actionLoading, setActionLoading] = useState(false);
663 |   const [actionError, setActionError] = useState(null);
664 | 
665 | 
666 |   // Actions (escalate/close)
667 |   const [notifyUser, setNotifyUser] = useState(false);
668 | 
669 |   // Solution/steps
670 |   const [pendingSolution, setPendingSolution] = useState(null);
671 |   const [showSolutionPrompt, setShowSolutionPrompt] = useState(false);
672 |   const [stepInfo, setStepInfo] = useState(null);
673 |   const [loadingStep, setLoadingStep] = useState(false);
674 |   const [stepError, setStepError] = useState(null);
675 | 
676 |   // Refs
677 |   const messageRefs = useRef({});
678 |   const scrollRef = useRef(null);
679 |   const scrollBottomRef = useRef(null);
680 |   const textareaRef = useRef(null);
681 |   const tempIdRef = useRef(1);
682 |   const [highlightedMsgId, setHighlightedMsgId] = useState(null);
683 |   const solutionPanelRef = useRef(null);
684 | 
685 |   // CC state
686 |   const [cc, setCc] = useState('');
687 | 
688 |   // Draft Email Editor (new)
689 |   const [showDraftEditor, setShowDraftEditor] = useState(false);
690 |   const [draftEditorBody, setDraftEditorBody] = useState('');
691 |   const [aiDraft, setAiDraft] = useState(false); // Track if draft is AI-generated
692 |   const [showAIDisclaimer, setShowAIDisclaimer] = useState(true); // Toggle for disclaimer
693 | 
694 |   // Allow common typos/synonyms
695 |   const DRAFT_WORD = '(?:draft|drat|draf|darft|drfat|daft|compose|write|prepare|create)';
696 |   const EMAIL_WORD = '(?:email|mail|message|reply)';
697 | 
698 |   const ADJ_WORDS = '(?:short|brief|concise|detailed|formal|informal|friendly|professional|polite|casual|clear|simple|comprehensive|thorough|succinct)';
699 |   const ADJ_BLOCK = `(?:${ADJ_WORDS}(?:\\s+${ADJ_WORDS})*)?`; // zero or more adjectives
700 |   // For “show editor empty”
701 |   const DRAFT_EMAIL_OPEN_EMPTY_RE =
702 |     /\b(?:open|show)\s+(?:the\s+)?(?:draft\s+)?email\s+editor\b|\bcompose\s+(?:a\s+)?new\s+email\s+(?:from\s+scratch|without\s+solution)\b/i;
703 | 
704 |   const DRAFT_EMAIL_WITH_SOLUTION_RE = new RegExp(
705 |    `\\b${DRAFT_WORD}(?:\\s+(?:me|us))?\\s+` +
706 |    `(?:(?:a|an|the)\\s+)?` +              // optional article
707 |    `${ADJ_BLOCK}\\s*` +                   // optional adjectives (" short", " brief", …)
708 |    `${EMAIL_WORD}` +                      // email/mail/message/reply
709 |    `(?:\\s+(?:to|for)\\s+(?:the\\s+)?user)?` +  // optional "to/for the user"
710 |    `(?:\\s+(?:with|including|containing)\\s+(?:the\\s+)?(?:solution|fix|steps))?` + // "with solution"
711 |    `\\b`,
712 |    'i'
713 |  );
714 | 
715 |   const GENERIC_DRAFT_EMAIL_RE = new RegExp(
716 |    `\\b${DRAFT_WORD}(?:\\s+(?:me|us))?\\s+` +
717 |    `(?:(?:a|an|the)\\s+)?` +  // optional article
718 |    `${ADJ_BLOCK}\\s*` +       // optional adjectives
719 |    `${EMAIL_WORD}\\b`,
720 |    'i'
721 |  );
722 | 
723 |   // Needed by sendMessage to decide whether to show the Proposed Solution panel
724 |   const EXPLICIT_SOLUTION_INTENT_RE =
725 |     /\b(?:draft|write|compose|prepare|create)\s+(?:the\s+)?(?:final\s+)?solution\b|\bpropose\s+(?:a\s+)?solution\b|\bwhat(?:'s| is)\s+the\s+fix\b/i;
726 | 
727 | 
728 |   const MAX_HISTORY = 4;
729 |   const MAX_MSG_CHARS = 600;
730 |   const buildHistory = (msgs) => msgs.slice(-MAX_HISTORY).map(m => ({
731 |     role: m.sender === 'user' ? 'user' : 'assistant',
732 |     content: (typeof m.content === 'string' ? m.content : JSON.stringify(m.content)).slice(0, MAX_MSG_CHARS),
733 |   }));
734 | 
735 |   const looksLikeSolution = (s) =>
736 |   /\blikely fix\b|\bsolution\b|\bsteps\b|^\s*\d+\./i.test(s || '');
737 | 
738 |   const getBestSolutionText = () => {
739 |     if (pendingSolution) return pendingSolution;
740 | 
741 |     // 1) Last explicit solution bubble
742 |     const fromType = [...messages].reverse().find(
743 |       m => m.type === 'solution' && (m.text || m.content)
744 |     );
745 |     if (fromType) return String(fromType.text || fromType.content || '');
746 | 
747 |     // 2) Last assistant msg that "looks like" a fix/steps
748 |     const lastFixy = [...messages].reverse().find(
749 |       m => (m.sender === 'assistant' || m.sender === 'bot')
750 |         && typeof m.content === 'string'
751 |         && looksLikeSolution(m.content)
752 |     );
753 |     if (lastFixy) return lastFixy.content;
754 | 
755 |     // 3) Otherwise, last assistant text
756 |     const anyAssistant = [...messages].reverse().find(
757 |       m => (m.sender === 'assistant' || m.sender === 'bot') && (m.text || m.content)
758 |     );
759 |     return String(anyAssistant?.text || anyAssistant?.content || '');
760 |   };
761 | 
762 | 
763 | //   const getConfirmLinks = async () => {
764 | //   // Use cached if available
765 | //   if (confirmLinks.confirm && confirmLinks.notConfirm) return confirmLinks;
766 | 
767 | //   // 1) Try direct links endpoint
768 | //   try {
769 | //     const r = await fetch(`${API_BASE}/threads/${tid}/confirm-links`, {
770 | //       headers: authHeaders(),
771 | //       credentials: 'include'
772 | //     });
773 | //     if (r.ok) {
774 | //       const data = await r.json();
775 | //       const links = {
776 | //         confirm: data?.confirm_url || data?.confirm || '',
777 | //         notConfirm: data?.not_confirm_url || data?.notConfirm || data?.deny_url || ''
778 | //       };
779 | //       if (links.confirm && links.notConfirm) {
780 | //         setConfirmLinks(links);
781 | //         return links;
782 | //       }
783 | //     }
784 | //   } catch {}
785 | 
786 | //   // 2) Try token -> build signed links
787 | //   try {
788 | //     const r2 = await fetch(`${API_BASE}/threads/${tid}/confirm-token`, {
789 | //       method: 'POST',
790 | //       headers: { 'Content-Type': 'application/json', ...authHeaders() },
791 | //       credentials: 'include'
792 | //     });
793 | //     const data2 = await r2.json();
794 | //     if (r2.ok && data2?.token) {
795 | //       const origin = (typeof window !== 'undefined' && window.location?.origin) || 'http://localhost:3000';
796 | //       const links = {
797 | //         confirm: `${origin}/confirm?token=${encodeURIComponent(data2.token)}&a=confirm`,
798 | //         notConfirm: `${origin}/confirm?token=${encodeURIComponent(data2.token)}&a=not_confirm`
799 | //       };
800 | //       setConfirmLinks(links);
801 | //       return links;
802 | //     }
803 | //   } catch {}
804 | 
805 | //   // 3) **DEMO FALLBACK** (always produce visible links even if unauthorized)
806 | //   const origin = (typeof window !== 'undefined' && window.location?.origin) || 'http://localhost:3000';
807 | //   const demoLinks = {
808 | //     confirm: `${origin}/confirm?thread=${encodeURIComponent(tid)}&a=confirm&demo=1`,
809 | //     notConfirm: `${origin}/confirm?thread=${encodeURIComponent(tid)}&a=not_confirm&demo=1`
810 | //   };
811 | //   setConfirmLinks(demoLinks);
812 | //   return demoLinks;
813 | // };
814 | 
815 |   // const getConfirmLinks = async () => {
816 |   //   // Use cached if available
817 |   //   if (confirmLinks.confirm && confirmLinks.notConfirm) return confirmLinks;
818 | 
819 |   //   // Try a direct links endpoint (if your API exposes it)
820 |   //   try {
821 |   //     const r = await fetch(`${API_BASE}/threads/${tid}/confirm-links`, {
822 |   //       headers: authHeaders(),
823 |   //       credentials: 'include'
824 |   //     });
825 |   //     if (r.ok) {
826 |   //       const data = await r.json();
827 |   //       const links = {
828 |   //         confirm: data?.confirm_url || data?.confirm || '',
829 |   //         notConfirm: data?.not_confirm_url || data?.notConfirm || data?.deny_url || ''
830 |   //       };
831 |   //       if (links.confirm && links.notConfirm) {
832 |   //         setConfirmLinks(links);
833 |   //         return links;
834 |   //       }
835 |   //     }
836 |   //   } catch {}
837 | 
838 |   //   // Otherwise get a token and build the URLs against the app origin
839 |   //   try {
840 |   //     const r2 = await fetch(`${API_BASE}/threads/${tid}/confirm-token`, {
841 |   //       method: 'POST',
842 |   //       headers: { 'Content-Type': 'application/json', ...authHeaders() },
843 |   //       credentials: 'include'
844 |   //     });
845 |   //     const data2 = await r2.json();
846 |   //     if (r2.ok && data2?.token) {
847 |   //       const origin = (typeof window !== 'undefined' && window.location?.origin) || 'http://localhost:3000';
848 |   //       const links = {
849 |   //         confirm: `${origin}/confirm?token=${encodeURIComponent(data2.token)}&a=confirm`,
850 |   //         notConfirm: `${origin}/confirm?token=${encodeURIComponent(data2.token)}&a=not_confirm`
851 |   //       };
852 |   //       setConfirmLinks(links);
853 |   //       return links;
854 |   //     }
855 |   //   } catch {}
856 | 
857 |   //   // Last resort: empty (won't append)
858 |   //   return { confirm: '', notConfirm: '' };
859 |   // };
860 | 
861 |   const getConfirmLinks = async () => {
862 |   // Use cache
863 |   if (confirmLinks.confirm && confirmLinks.notConfirm) return confirmLinks;
864 | 
865 |   // 1) Server-prepared links
866 |   try {
867 |     const r = await fetch(`${API_BASE}/threads/${tid}/confirm-links`, {
868 |       headers: authHeaders(),
869 |       credentials: 'include'
870 |     });
871 |     if (r.ok) {
872 |       const data = await r.json();
873 |       const links = {
874 |         confirm: data?.confirm_url || data?.confirm || '',
875 |         notConfirm: data?.not_confirm_url || data?.notConfirm || data?.deny_url || ''
876 |       };
877 |       if (links.confirm && links.notConfirm) {
878 |         setConfirmLinks(links);
879 |         return links;
880 |       }
881 |     } else {
882 |       console.warn('[getConfirmLinks] confirm-links status:', r.status);
883 |     }
884 |   } catch (e) {
885 |     console.warn('[getConfirmLinks] confirm-links error:', e);
886 |   }
887 | 
888 |   // 2) Signed token → build URLs
889 |   try {
890 |     const r2 = await fetch(`${API_BASE}/threads/${tid}/confirm-token`, {
891 |       method: 'POST',
892 |       headers: { 'Content-Type': 'application/json', ...authHeaders() },
893 |       credentials: 'include'
894 |     });
895 |     const data2 = await r2.json().catch(() => ({}));
896 |     if (r2.ok && data2?.token) {
897 |       const origin = (typeof window !== 'undefined' && window.location?.origin) || 'http://localhost:3000';
898 |       const links = {
899 |         confirm: `${origin}/solutions/confirm?token=${encodeURIComponent(data2.token)}&a=confirm`,
900 |         notConfirm: `${origin}/solutions/confirm?token=${encodeURIComponent(data2.token)}&a=not_confirm`,
901 |       };
902 |       setConfirmLinks(links);
903 |       return links;
904 |     } else {
905 |       console.warn('[getConfirmLinks] confirm-token status:', r2.status, data2);
906 |     }
907 |   } catch (e) {
908 |     console.warn('[getConfirmLinks] confirm-token error:', e);
909 |   }
910 | 
911 |   // 3) Dev fallback (lets you SEE links even if you’re logged out)
912 |   const origin = (typeof window !== 'undefined' && window.location?.origin) || 'http://localhost:3000';
913 |   const links = {
914 |     confirm: `${origin}/confirm?thread=${encodeURIComponent(tid)}&a=confirm&demo=1`,
915 |     notConfirm: `${origin}/confirm?thread=${encodeURIComponent(tid)}&a=not_confirm&demo=1`,
916 |   };
917 |   console.warn('[getConfirmLinks] using demo fallback links (check your auth).');
918 |   setConfirmLinks(links);
919 |   return links;
920 | };
921 | 
922 | 
923 | 
924 |   const buildEmailFromAnyText = (text) => {
925 |     // Remove all asterisks (**) used for markdown bold/italic
926 |     let solution = (text || '').replace(/\*\*/g, '').replace(/\*/g, '').trim();
927 |     const greeting = ticket?.requester_name ? `Hi ${ticket.requester_name},` : 'Hi there,';
928 |     if (solution) {
929 |       return `${greeting}
930 | 
931 |   ${solution}
932 | 
933 |   Best regards,
934 |   Support Team`;
935 |     }
936 |     const summary = ticket?.text
937 |       ? `I’m following up on your request: "${ticket.text}".`
938 |       : `I’m following up on your request.`;
939 |     return `${greeting}
940 | 
941 |   ${summary}
942 |   Here’s a quick update: I'm preparing the next steps and will share the final fix shortly.
943 | 
944 |   Best regards,
945 |   Support Team`;
946 |   };
947 | 
948 |   // const draftFromBackendOrBuild = async (solutionLike) => {
949 |   //   const candidate = (solutionLike || '').trim();
950 | 
951 |   //   // Ask backend first (and request links if it supports them)
952 |   //   try {
953 |   //     if (candidate) {
954 |   //       const res = await fetch(`${API_BASE}/threads/${tid}/draft-email`, {
955 |   //         method: 'POST',
956 |   //         headers: { 'Content-Type': 'application/json', ...authHeaders() },
957 |   //         credentials: 'include',
958 |   //         body: JSON.stringify({ solution: candidate, include_links: false })
959 |   //       });
960 |   //       let data = {};
961 |   //       try { data = await res.json(); } catch {}
962 |   //       let email = (data?.email && String(data.email).trim()) || '';
963 | 
964 |   //       // If backend didn't include the confirm links, append ours
965 |   //       const hasConfirmLinks = /\/confirm\?token=.*?&a=/.test(email);
966 |   //       if (!hasConfirmLinks) {
967 |   //         const links = await getConfirmLinks();
968 |   //         if (links.confirm && links.notConfirm) {
969 |   //           const base = email || buildEmailFromAnyText(candidate);
970 |   //           email = `${base}
971 | 
972 |   // —
973 | 
974 |   // Please let us know if the fix worked:
975 | 
976 |   // ✅ Solution worked: ${links.confirm}
977 |   // ❌ Didn’t solve the problem: ${links.notConfirm}`;
978 |   //         } else if (!email) {
979 |   //           email = buildEmailFromAnyText(candidate);
980 |   //         }
981 |   //       }
982 |   //       return email;
983 |   //     }
984 |   //   } catch {}
985 | 
986 |   //   // Pure frontend fallback (+links if we can fetch them)
987 |   //   const base = buildEmailFromAnyText(candidate);
988 |   //   const links = await getConfirmLinks();
989 |   //   if (links.confirm && links.notConfirm) {
990 |   //     return `${base}
991 | 
992 |   // —
993 | 
994 |   // Please let us know if the fix worked:
995 | 
996 |   // ✅ Solution worked: ${links.confirm}
997 |   // ❌ Didn’t solve the problem: ${links.notConfirm}`;
998 |   //   }
999 |   //   return base;
1000 |   // };
1001 | 
1002 | // const draftFromBackendOrBuild = async (solutionLike) => {
1003 | //   const candidate = (solutionLike || '').trim();
1004 | 
1005 | //   try {
1006 | //     if (candidate) {
1007 | //       const res = await fetch(`${API_BASE}/threads/${tid}/draft-email`, {
1008 | //         method: 'POST',
1009 | //         headers: { 'Content-Type': 'application/json', ...authHeaders() },
1010 | //         credentials: 'include',
1011 | //         body: JSON.stringify({ solution: candidate, include_links: false })
1012 | //       });
1013 | //       let data = {};
1014 | //       try { data = await res.json(); } catch {}
1015 | //       let email = (data?.email && String(data.email).trim()) || '';
1016 | 
1017 | //       // If backend didn't include the confirm links, insert ours BEFORE "Best regards,"
1018 | //       const hasConfirmLinks = /\/confirm\?token=.*?&a=/.test(email);
1019 | //       if (!hasConfirmLinks) {
1020 | //         const links = await getConfirmLinks();
1021 | //         if (links.confirm && links.notConfirm) {
1022 | //           const base = email || buildEmailFromAnyText(candidate);
1023 | //           const confirmBlock = `Please let us know if the fix worked:
1024 | 
1025 | // ✅ Solution worked: ${links.confirm}
1026 | // ❌ Didn’t solve the problem: ${links.notConfirm}`;
1027 | //           email = insertBeforeBestRegards(base, confirmBlock);
1028 | //         } else if (!email) {
1029 | //           email = buildEmailFromAnyText(candidate);
1030 | //         }
1031 | //       }
1032 | //       return email;
1033 | //     }
1034 | //   } catch {}
1035 | 
1036 | //   // Pure frontend fallback (+links inserted BEFORE "Best regards,")
1037 | //   const base = buildEmailFromAnyText(candidate);
1038 | //   const links = await getConfirmLinks();
1039 | //   if (links.confirm && links.notConfirm) {
1040 | //     const confirmBlock = `Please let us know if the fix worked:
1041 | 
1042 | // ✅ Solution worked: ${links.confirm}
1043 | // ❌ Didn’t solve the problem: ${links.notConfirm}`;
1044 | //     return insertBeforeBestRegards(base, confirmBlock);
1045 | //   }
1046 | //   return base;
1047 | // };
1048 | 
1049 | // Convert simple HTML (especially <a>) to plain text while keeping URLs visible.
1050 | function asPlainTextPreservingLinks(htmlOrText = '') {
1051 |   let s = String(htmlOrText);
1052 | 
1053 |   // Replace <br> and <p> with newlines for readability
1054 |   s = s.replace(/<\s*br\s*\/?>/gi, '\n')
1055 |        .replace(/<\/\s*p\s*>/gi, '\n')
1056 |        .replace(/<\s*p[^>]*>/gi, '');
1057 | 
1058 |   // Turn <a href="URL">text</a> into "text: URL"
1059 |   s = s.replace(/<a\b[^>]*href="([^"]+)"[^>]*>([\s\S]*?)<\/a>/gi, (m, href, text) => {
1060 |     // strip any tags inside the anchor text
1061 |     const inner = text.replace(/<[^>]+>/g, '').trim();
1062 |     return inner ? `${inner}: ${href}` : href;
1063 |   });
1064 | 
1065 |   // Strip all remaining tags
1066 |   s = s.replace(/<[^>]+>/g, '');
1067 | 
1068 |   // Decode a few common entities
1069 |   s = s.replace(/&nbsp;/g, ' ')
1070 |        .replace(/&amp;/g, '&')
1071 |        .replace(/&lt;/g, '<')
1072 |        .replace(/&gt;/g, '>');
1073 | 
1074 |   return s.trim();
1075 | }
1076 | 
1077 |   // Insert a block right before the "Best regards," line (case-insensitive).
1078 | const insertBeforeBestRegards = (body, block) => {
1079 |   const BR_RE = /(^|\n)\s*Best regards,?/i;
1080 |   const m = BR_RE.exec(body || '');
1081 |   if (m) {
1082 |     const idx = m.index + m[1].length; // start of the "Best regards," line
1083 |     return body.slice(0, idx) + '\n\n' + block + '\n\n' + body.slice(idx);
1084 |   }
1085 |   // If there is no "Best regards," just append the block.
1086 |   return (body || '') + '\n\n' + block;
1087 | };
1088 | 
1089 | const draftFromBackendOrBuild = async (solutionLike) => {
1090 |   const candidate = (solutionLike || '').trim();
1091 | 
1092 |   try {
1093 |     if (candidate) {
1094 |       const res = await fetch(`${API_BASE}/threads/${tid}/draft-email`, {
1095 |         method: 'POST',
1096 |         headers: { 'Content-Type': 'application/json', ...authHeaders() },
1097 |         credentials: 'include',
1098 |         body: JSON.stringify({ solution: candidate, include_links: true })
1099 |       });
1100 |       const data = await res.json().catch(() => ({}));
1101 |       if (res.ok && data?.email) return String(data.email);
1102 |     }
1103 |   } catch {}
1104 | 
1105 |   // Backend didn’t give a draft — return a plain, link-free email
1106 |   return buildEmailFromAnyText(candidate);
1107 | };
1108 | 
1109 | 
1110 | // const draftFromBackendOrBuild = async (solutionLike) => {
1111 | //   const candidate = (solutionLike || '').trim();
1112 | 
1113 | //   // Get base from backend (no links requested) or fallback
1114 | //   try {
1115 | //     if (candidate) {
1116 | //       const res = await fetch(`${API_BASE}/threads/${tid}/draft-email`, {
1117 | //         method: 'POST',
1118 | //         headers: { 'Content-Type': 'application/json', ...authHeaders() },
1119 | //         credentials: 'include',
1120 | //         body: JSON.stringify({ solution: candidate, include_links: false })
1121 | //       });
1122 | //       const data = await res.json().catch(() => ({}));
1123 | //       email = (data?.email && String(data.email).trim()) || '';
1124 | //     }
1125 | //   } catch {}
1126 | //   if (!email) email = buildEmailFromAnyText(candidate);
1127 | 
1128 | //   // Fetch (or build) links → insert BEFORE "Best regards,"
1129 | //   const { confirm, notConfirm } = await getConfirmLinks();
1130 | //   const block =
1131 | // `Please let us know if the fix worked:
1132 | 
1133 | // ✅ Solution worked: ${confirm}
1134 | // ❌ Didn’t solve the problem: ${notConfirm}`;
1135 | 
1136 | //   return insertBeforeBestRegards(email, block);
1137 | // };
1138 | 
1139 | 
1140 | // const draftFromBackendOrBuild = async (solutionLike) => {
1141 | //   const candidate = (solutionLike || '').trim();
1142 | 
1143 | //   try {
1144 | //     if (candidate) {
1145 | //       // **Ask backend to include links again**
1146 | //       const res = await fetch(`${API_BASE}/threads/${tid}/draft-email`, {
1147 | //         method: 'POST',
1148 | //         headers: { 'Content-Type': 'application/json', ...authHeaders() },
1149 | //         credentials: 'include',
1150 | //         body: JSON.stringify({ solution: candidate, include_links: true })
1151 | //       });
1152 | 
1153 | //       let data = {};
1154 | //       try { data = await res.json(); } catch {}
1155 | //       let email = asPlainTextPreservingLinks((data?.email && String(data.email).trim()) || '');
1156 | 
1157 | //       // If backend didn't include the confirm links, or they are missing,
1158 | //       // build them and insert BEFORE "Best regards," so sanitize won't cut them.
1159 | //       const hasConfirmLinks = /\/confirm\?token=.*?&a=/.test(email);
1160 | //       if (!hasConfirmLinks) {
1161 | //         const links = await getConfirmLinks();
1162 | //         if (links.confirm && links.notConfirm) {
1163 | //           const base = email || buildEmailFromAnyText(candidate);
1164 | //           const block =
1165 | // `Please let us know if the fix worked:
1166 | 
1167 | // ✅ Solution worked: ${links.confirm}
1168 | // ❌ Didn’t solve the problem: ${links.notConfirm}`;
1169 | //           email = insertBeforeBestRegards(base, block);
1170 | //         } else if (!email) {
1171 | //           email = buildEmailFromAnyText(candidate);
1172 | //         }
1173 | //       } else {
1174 | //         // Backend included links; make sure they survive sanitize by moving them
1175 | //         // before "Best regards," if needed.
1176 | //         const BR_RE = /(^|\n)\s*Best regards,?/i;
1177 | //         if (BR_RE.test(email) && email.indexOf('confirm?') > email.search(BR_RE)) {
1178 | //           // If links are after the signature, pull them up above it
1179 | //           const after = email.slice(email.search(BR_RE));
1180 | //           const before = email.slice(0, email.search(BR_RE));
1181 | //           const tailWithLinks = email.match(/.*confirm\?.*$/ms)?.[0] || '';
1182 | //           email = before + '\n\n' + tailWithLinks + '\n\n' + after;
1183 | //         }
1184 | //       }
1185 | 
1186 | //       return email;
1187 | //     }
1188 | //   } catch {}
1189 | 
1190 | //   // Pure frontend fallback (+links) — also insert BEFORE "Best regards,"
1191 | //   const base = buildEmailFromAnyText(candidate);
1192 | //   const links = await getConfirmLinks();
1193 | //   if (links.confirm && links.notConfirm) {
1194 | //     const block =
1195 | // `Please let us know if the fix worked:
1196 | 
1197 | // ✅ Solution worked: ${links.confirm}
1198 | // ❌ Didn’t solve the problem: ${links.notConfirm}`;
1199 | //     return insertBeforeBestRegards(base, block);
1200 | //   }
1201 | //   return base;
1202 | // };
1203 | 
1204 | 
1205 | 
1206 |   // Fetch an explicit solution (without adding bubbles), then show the panel
1207 |   const ensureSolutionThenGet = async () => {
1208 |     let best = getBestSolutionText();
1209 |     if (best && best.trim()) return best;
1210 | 
1211 |     try {
1212 |       const resp = await fetch(`${API_BASE}/threads/${tid}/chat`, {
1213 |         method: 'POST',
1214 |         headers: { 'Content-Type': 'application/json', ...authHeaders() },
1215 |         credentials: 'include',
1216 |         body: JSON.stringify({
1217 |           message: 'propose a solution',
1218 |           history: buildHistory(messages),
1219 |           no_store: true,
1220 |           source: 'suggested'
1221 |         })
1222 |       });
1223 |       const data = await resp.json();
1224 |       if (resp.ok && data?.type === 'solution' && typeof data.text === 'string' && data.text.trim()) {
1225 |         setPendingSolution(data.text);      // show Proposed Solution panel
1226 |         best = data.text;
1227 |       }
1228 |     } catch {}
1229 |     return (best || '').trim();
1230 |   };
1231 | 
1232 |   
1233 |   // Track the last user intent for the current send
1234 |   const lastUserIntentRef = useRef('normal'); // 'normal' | 'explicit_solution' | 'suggested'
1235 | 
1236 | 
1237 |   // --- User-friendly solution/email utilities ---
1238 |   function makeUserFriendly(text) {
1239 |     if (!text) return '';
1240 |     // Replace technical jargon with simple language
1241 |     let friendly = text
1242 |       .replace(/\btroubleshoot\b/gi, 'check')
1243 |       .replace(/\bdiagnose\b/gi, 'look into')
1244 |       .replace(/\bissue\b/gi, 'problem')
1245 |       .replace(/\bresolve\b/gi, 'fix')
1246 |       .replace(/\bconfiguration\b/gi, 'settings')
1247 |       .replace(/\bparameters?\b/gi, 'details')
1248 |       .replace(/\bexecute\b/gi, 'run')
1249 |       .replace(/\bfunction\b/gi, 'feature')
1250 |       .replace(/\bscript\b/gi, 'step')
1251 |       .replace(/\bserver\b/gi, 'system')
1252 |       .replace(/\bapplication\b/gi, 'app')
1253 |       .replace(/\binterface\b/gi, 'screen')
1254 |       .replace(/\bAPI\b/gi, 'connection')
1255 |       .replace(/\bdeploy\b/gi, 'set up')
1256 |       .replace(/\bcredentials?\b/gi, 'login info')
1257 |       .replace(/\bauthenticate\b/gi, 'log in')
1258 |       .replace(/\bvalidate\b/gi, 'check')
1259 |       .replace(/\berror\b/gi, 'problem')
1260 |       .replace(/\bexception\b/gi, 'unexpected problem')
1261 |       .replace(/\bsyntax\b/gi, 'writing')
1262 |       .replace(/\bcommand\b/gi, 'instruction')
1263 |       .replace(/\bterminal\b/gi, 'window')
1264 |       .replace(/\bconsole\b/gi, 'window')
1265 |       .replace(/\bdebug\b/gi, 'check')
1266 |       .replace(/\bcompile\b/gi, 'prepare')
1267 |       .replace(/\bbuild\b/gi, 'prepare')
1268 |       .replace(/\bframework\b/gi, 'tool')
1269 |       .replace(/\blibrary\b/gi, 'tool')
1270 |       .replace(/\bdependency\b/gi, 'needed tool')
1271 |       .replace(/\bupdate\b/gi, 'refresh')
1272 |       .replace(/\bupgrade\b/gi, 'refresh')
1273 |       .replace(/\bpatch\b/gi, 'fix')
1274 |       .replace(/\bversion\b/gi, 'type')
1275 |       .replace(/\bplatform\b/gi, 'system')
1276 |       .replace(/\bnetwork\b/gi, 'connection')
1277 |       .replace(/\bprotocol\b/gi, 'method')
1278 |       .replace(/\bport\b/gi, 'connection point')
1279 |       .replace(/\baccess\b/gi, 'open')
1280 |       .replace(/\bpermission\b/gi, 'access')
1281 |       .replace(/\bprivilege\b/gi, 'access')
1282 |       .replace(/\broot\b/gi, 'main')
1283 |       .replace(/\badmin\b/gi, 'manager')
1284 |       .replace(/\buser\b/gi, 'you')
1285 |       .replace(/\bsudo\b/gi, 'special access')
1286 |       .replace(/\bscript\b/gi, 'step')
1287 |       .replace(/\bexecute\b/gi, 'run')
1288 |       .replace(/\bterminal\b/gi, 'window');
1289 |     // Add a friendly tone
1290 |     friendly = friendly.replace(/\bplease\b/gi, 'please');
1291 |     // Add a suggestion if not present
1292 |     if (!/let me know|feel free|reach out|happy to help|hope this helps|if you need anything else/i.test(friendly)) {
1293 |       friendly += '\n\nIf you need anything else, feel free to ask!';
1294 |     }
1295 |     return friendly;
1296 |   }
1297 | 
1298 |   const getLastSolutionText = () => {
1299 |     if (pendingSolution) return makeUserFriendly(pendingSolution);
1300 |     const s = [...messages].reverse().find(
1301 |       m => m.type === 'solution' && (m.text || m.content)
1302 |     );
1303 |     return makeUserFriendly((s?.text || s?.content || '').toString());
1304 |   };
1305 | 
1306 |   const buildEmailFromSolution = (solution) => {
1307 |     const greeting = ticket?.requester_name ? `Hi ${ticket.requester_name},` : 'Hi there,';
1308 |     return `${greeting}
1309 |   \n${makeUserFriendly(solution)}\n\nBest regards,\nSupport Team`;
1310 |   };
1311 | 
1312 | 
1313 | 
1314 |   // Trim Subject: header, replace [User], and cut after "Best regards,"
1315 | const sanitizeEmailBody = (raw) => {
1316 |   let t = String(raw || '');
1317 | 
1318 |   // 1) Remove a leading "Subject: ..." line (and following blank lines)
1319 |   t = t.replace(/^\s*Subject:[^\n]*\n(?:\s*\n)*/i, '');
1320 | 
1321 |   // 2) Hard-code [User] -> Priyanka (handle spacing/case)
1322 |   t = t.replace(/\[\s*User\s*\]/gi, 'Priyanka');
1323 |   t = t.replace(/Hi\s*\[\s*User\s*\]\s*,/i, 'Hi Priyanka,'); // common greeting variant
1324 | 
1325 | 
1326 |   // 3) Keep text only up to (and including) "Best regards,"
1327 |   const m = /(^|\n)([^\S\r\n]*Best regards,?)/i.exec(t);
1328 |   if (m) {
1329 |     const end = m.index + m[1].length + m[2].length; // end of the "Best regards," line
1330 |     t = t.slice(0, end).trimEnd();
1331 |   }
1332 | 
1333 |   return t;
1334 | };
1335 | 
1336 | // // Insert a block right before "Best regards,"
1337 | // const insertBeforeBestRegards = (body, block) => {
1338 | //   const re = /(^|\n)\s*Best regards,?/i;
1339 | //   const m = re.exec(body);
1340 | //   if (!m) return `${body.trim()}\n\n${block}`; // fallback if no BR line found
1341 | //   return `${body.slice(0, m.index).trimEnd()}\n\n${block}\n\n${body.slice(m.index)}`;
1342 | // };
1343 | 
1344 | 
1345 | const openDraftEditor = (prefill) => {
1346 |    const processed = sanitizeEmailBody(prefill || '');
1347 |    setDraftEditorBody(processed);
1348 |    const isAIGenerated = !!(processed && processed.trim());
1349 |    setAiDraft(isAIGenerated);
1350 |    setShowAIDisclaimer(isAIGenerated); // keep the disclaimer toggle ON by default
1351 |    setShowDraftEditor(true);
1352 | };
1353 | 
1354 |   // --- Poll live status/level every 5s ---
1355 |   useEffect(() => {
1356 |   // If a request is in-flight, skip setting up the poller
1357 |   if (!activeThreadId || sending || loadingStep || actionLoading) return;
1358 | 
1359 |   const interval = setInterval(() => {
1360 |     fetch(`${API_BASE}/threads/${activeThreadId}`, { headers: authHeaders(), credentials: 'include' })
1361 |       .then(r => (r.ok ? r.json() : Promise.reject(r.status)))
1362 |       .then(data => setTicket(t => {
1363 |         if (!t) return t;
1364 |         const statusChanged = t.status !== data.status;
1365 |         const levelChanged = Number(t.level) !== Number(data.level);
1366 |         if (statusChanged || levelChanged) {
1367 |           setMessages(prev => [...prev, {
1368 |             id: `sys-${Date.now()}`,
1369 |             sender: 'system',
1370 |             content:
1371 |               `Status changed: ${t.status ?? '—'} → ${data.status}` +
1372 |               (levelChanged ? ` (L${t.level} → L${Number(data.level)})` : ''),
1373 |             timestamp: new Date().toISOString()
1374 |           }]);
1375 |           setTimelineRefresh(x => x + 1);
1376 |         }
1377 |         return { ...t, status: data.status, level: Number(data.level) };
1378 |       }))
1379 |       .catch(() => {});
1380 |   }, 5000);
1381 | 
1382 |   return () => clearInterval(interval);
1383 | }, [activeThreadId, sending, loadingStep, actionLoading]);
1384 | 
1385 |   
1386 |   // Fetch timeline
1387 |   useEffect(() => {
1388 |     if (!activeThreadId) return;
1389 |     setTimelineLoading(true);
1390 |     setTimelineError(null);
1391 |     fetch(`${API_BASE}/threads/${activeThreadId}/timeline`, { headers: authHeaders(), credentials: 'include' })
1392 |       .then(r => (r.ok ? r.json() : Promise.reject(r.status)))
1393 |       .then(data => setTimeline(Array.isArray(data) ? data : []))
1394 |       .catch(() => setTimelineError('Failed to load timeline'))
1395 |       .finally(() => setTimelineLoading(false));
1396 |   }, [activeThreadId, timelineRefresh]);
1397 | 
1398 |   // Refresh messages when timeline changes (merge, not replace)
1399 |   useEffect(() => {
1400 |     if (!activeThreadId) return;
1401 |     fetch(`${API_BASE}/threads/${activeThreadId}`, { headers: authHeaders(), credentials: 'include' })
1402 |       .then(r => r.ok ? r.json() : Promise.reject())
1403 |       .then(data => {
1404 |         const fresh = Array.isArray(data.messages)
1405 |           ? data.messages.map(m => ({
1406 |               ...m,
1407 |               sender: (m.sender === 'bot' ? 'assistant' : m.sender),
1408 |               content: toDisplayString(m.content),
1409 |             }))
1410 |           : [];
1411 |         setMessages(prev => {
1412 |           const seen = new Set(prev.map(m => m.id));
1413 |           const merged = [...prev];
1414 |           for (const m of fresh) {
1415 |             if (m?.source === 'suggested' || m?.transient || m?.meta?.transient) continue;
1416 |             if (!m?.id || seen.has(m.id)) continue;
1417 |             const norm = (s) => String(s || '').trim().toLowerCase().replace(/\s+/g, ' ');
1418 |             const mIsAssistant = m.sender === 'assistant' || m.sender === 'bot';
1419 |             const existsByText =
1420 |               mIsAssistant &&
1421 |               merged.some(p =>
1422 |                 (p.sender === 'assistant' || p.sender === 'bot') &&
1423 |                 norm(toDisplayString(p.content)) === norm(toDisplayString(m.content))
1424 |               );
1425 |             if (existsByText) continue;
1426 |             merged.push(m);
1427 |           }
1428 |           return merged;
1429 |         });
1430 |       })
1431 |       .catch(() => {});
1432 |   }, [timelineRefresh, activeThreadId]);
1433 | 
1434 |   useEffect(() => { setActiveThreadId(threadId); }, [threadId]);
1435 | 
1436 |   // useEffect(() => {
1437 |   //   setConfirmLinks({ confirm: '', notConfirm: '' });
1438 |   // }, [tid]);
1439 | 
1440 |   // Reset refs map when messages change
1441 |   useEffect(() => { messageRefs.current = {}; }, [messages]);
1442 | 
1443 |   // Scroll/highlight support
1444 |   useEffect(() => {
1445 |     if (!highlightedMsgId) return;
1446 |     const el = messageRefs.current[highlightedMsgId];
1447 |     if (!el) return;
1448 |     requestAnimationFrame(() => {
1449 |       el.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
1450 |       setTimeout(() => setHighlightedMsgId(null), 3500);
1451 |     });
1452 |   }, [highlightedMsgId]);
1453 | 
1454 |   useEffect(() => {
1455 |     if (pendingSolution && solutionPanelRef.current) {
1456 |       solutionPanelRef.current.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
1457 |     }
1458 |   }, [pendingSolution]);
1459 | 
1460 | 
1461 |   // Initial thread load
1462 |   useEffect(() => {
1463 |     if (!activeThreadId) return;
1464 |     setLoading(true);
1465 |     setError(null);
1466 |     fetch(`${API_BASE}/threads/${activeThreadId}`, { headers: authHeaders(), credentials: 'include' })
1467 |       .then(r => r.ok ? r.json() : Promise.reject(r.status))
1468 |       .then(data => {
1469 |         setTicket(data);
1470 |         const normalized = (Array.isArray(data.messages) ? data.messages : []).map((m) => {
1471 |           const c = m?.content;
1472 |           return {
1473 |             ...m,
1474 |             sender: (m.sender === 'bot' ? 'assistant' : m.sender),
1475 |             content: toDisplayString(c),
1476 |           };
1477 |         });
1478 |         setMessages(normalized);
1479 |       })
1480 |       .catch(() => setError('Failed to load thread'))
1481 |       .finally(() => setLoading(false));
1482 |   }, [activeThreadId]);
1483 | 
1484 |   // Smart scroll to bottom
1485 |   useEffect(() => {
1486 |     if (scrollBottomRef.current) {
1487 |       scrollBottomRef.current.style.scrollMarginBottom = '220px';
1488 |       scrollBottomRef.current.scrollIntoView({ behavior: 'smooth', block: 'end' });
1489 |     }
1490 |   }, [messages, loading]);
1491 | 
1492 |   // Derive step/solution prompt from messages
1493 |   useEffect(() => {
1494 |     if (!messages.length) return;
1495 |     let lastStepMsg = null;
1496 |     let foundPendingSolution = null;
1497 |     for (let i = messages.length - 1; i >= 0; i--) {
1498 |       const m = messages[i];
1499 |       if (m && m.type === 'solution' && m.askToSend && m.text) { foundPendingSolution = m.text; break; }
1500 |       if ((m.sender === 'bot' || m.sender === 'assistant') && typeof m.step === 'number' && typeof m.total === 'number') {
1501 |         lastStepMsg = m; break;
1502 |       }
1503 |       if ((m.sender === 'bot' || m.sender === 'assistant') && typeof m.content === 'string' && m.content.trim() === 'Did this solve your issue?') {
1504 |         break;
1505 |       }
1506 |     }
1507 |     if (foundPendingSolution) {
1508 |       setPendingSolution(foundPendingSolution);
1509 |       setShowSolutionPrompt(false);
1510 |       setStepInfo(null);
1511 |       return;
1512 |     }
1513 |     const last = messages[messages.length - 1];
1514 |     if ((last.sender === 'bot' || last.sender === 'assistant') && typeof last.content === 'string' && last.content.trim() === 'Did this solve your issue?') {
1515 |       setShowSolutionPrompt(true);
1516 |       setStepInfo(null);
1517 |     } else if (lastStepMsg) {
1518 |       setStepInfo({ step: lastStepMsg.step, total: lastStepMsg.total });
1519 |       setShowSolutionPrompt(false);
1520 |     } else {
1521 |       setStepInfo(null);
1522 |       setShowSolutionPrompt(false);
1523 |     }
1524 |   }, [messages, loading]);
1525 | 
1526 |   // Refresh timeline on window focus
1527 |   useEffect(() => {
1528 |     const onFocus = () => setTimelineRefresh(x => x + 1);
1529 |     window.addEventListener('focus', onFocus);
1530 |     return () => window.removeEventListener('focus', onFocus);
1531 |   }, []);
1532 | 
1533 |   // Mention rendering + click
1534 |   function renderContentWithMentions(content, onMentionClick) {
1535 |     const mentionRegexSplit = /(@[\w]+)/g;     // for .split
1536 |     const isMention = /^@[\w]+$/;              // for .test
1537 |     if (typeof content !== 'string') return content;
1538 |     const parts = content.split(mentionRegexSplit);
1539 |     return parts.map((part, idx) => {
1540 |       if (isMention.test(part)) {
1541 |         const agentName = part.slice(1);
1542 |         return (
1543 |           <span
1544 |             key={idx}
1545 |             className="font-bold text-blue-700 bg-blue-100 rounded px-1 mx-0.5 cursor-pointer hover:underline"
1546 |             onClick={() => onMentionClick(agentName)}
1547 |           >
1548 |             {part}
1549 |           </span>
1550 |         );
1551 |       }
1552 |       return part;
1553 |     });
1554 |   }
1555 | 
1556 |   function handleMentionClick(agentName) {
1557 |     const msg = messages.find(m => Array.isArray(m.mentions) && m.mentions.includes(agentName));
1558 |     if (!msg) return;
1559 |     setHighlightedMsgId(msg.id);
1560 |     requestAnimationFrame(() => {
1561 |       if (messageRefs.current[msg.id]) {
1562 |         messageRefs.current[msg.id].scrollIntoView({ behavior: 'smooth', block: 'nearest' });
1563 |         if (scrollRef.current) {
1564 |           const msgEl = messageRefs.current[msg.id];
1565 |           const scrollEl = scrollRef.current;
1566 |           const msgBottom = msgEl.offsetTop + msgEl.offsetHeight;
1567 |           const scrollBottom = scrollEl.scrollTop + scrollEl.offsetHeight;
1568 |           if (msgBottom > scrollBottom - 100) {
1569 |             scrollEl.scrollTop += msgBottom - (scrollBottom - 100);
1570 |           }
1571 |         }
1572 |       }
1573 |     });
1574 |     setTimeout(() => setHighlightedMsgId(null), 3500);
1575 |   }
1576 | 
1577 |   // Suggested prompts
1578 |   const [suggestedPrompts, setSuggestedPrompts] = useState([]);
1579 |   const [suggestedPromptsLoading, setSuggestedPromptsLoading] = useState(false);
1580 |   const [suggestedPromptsError, setSuggestedPromptsError] = useState(null);
1581 | 
1582 | 
1583 |   useEffect(() => {
1584 |     if (!tid) return;
1585 |     setSuggestedPromptsLoading(true);
1586 |     setSuggestedPromptsError(null);
1587 | 
1588 |     fetch(`${API_BASE}/threads/${tid}/suggested-prompts`, { credentials: "include", headers: authHeaders() })
1589 |       .then((r) => (r.ok ? r.json() : Promise.reject(r.status)))
1590 |       .then((data) => {
1591 |         let prompts = Array.isArray(data.prompts) ? data.prompts : [];
1592 |         setSuggestedPrompts(prompts);
1593 |       })
1594 |       .catch(() => setSuggestedPromptsError("Failed to load suggestions"))
1595 |       .finally(() => setSuggestedPromptsLoading(false));
1596 |   }, [tid, API_BASE]);
1597 | 
1598 | 
1599 |   const showPendingSolutionAsChatAndClear = (solutionText) => {
1600 |     const text = String(solutionText || '').trim();
1601 | 
1602 |     // 1) Close the panel FIRST so we don't suppress solution bubbles
1603 |     setPendingSolution(null);
1604 | 
1605 |     // 2) No text? nothing to render
1606 |     if (!text) return;
1607 | 
1608 |     // 3) Push a normal assistant bubble
1609 |     setMessages(prev => [
1610 |       ...prev,
1611 |       {
1612 |         id: `temp-${tempIdRef.current++}`,
1613 |         sender: 'bot',
1614 |         type: 'solution',              // render like a normal assistant "solution"
1615 |         content: text,
1616 |         timestamp: new Date().toISOString(),
1617 |       },
1618 |     ]);
1619 |   };
1620 | 
1621 | 
1622 | 
1623 |   const handleSuggestedPromptClick = async (prompt) => {
1624 |     console.debug('[DEBUG] Suggested prompt clicked:', prompt);
1625 |     const trimmed = (prompt || '').trim();
1626 |     setNewMsg('');
1627 | 
1628 |     if (DRAFT_EMAIL_OPEN_EMPTY_RE.test(trimmed)) {
1629 |       setNewMsg('');
1630 |       setMessages(prev => [
1631 |         ...prev,
1632 |         {
1633 |           id: `temp-${tempIdRef.current++}`,
1634 |           sender: 'user',
1635 |           content: trimmed,
1636 |           source: 'suggested',
1637 |           timestamp: new Date().toISOString()
1638 |         }
1639 |       ]);
1640 |       const best = (await ensureSolutionThenGet()) || '';
1641 |       if (best.trim()) setPendingSolution(best.trim());
1642 |       openDraftEditor('');
1643 |       return;
1644 |     }
1645 | 
1646 |     if (DRAFT_EMAIL_WITH_SOLUTION_RE.test(trimmed) || GENERIC_DRAFT_EMAIL_RE.test(trimmed)) {
1647 |       setNewMsg('');
1648 |       setMessages(prev => [
1649 |         ...prev,
1650 |         {
1651 |           id: `temp-${tempIdRef.current++}`,
1652 |           sender: 'user',
1653 |           content: trimmed,
1654 |           source: 'suggested',
1655 |           timestamp: new Date().toISOString()
1656 |         }
1657 |       ]);
1658 |       // Show the Proposed Solution panel first (no editor yet)
1659 |       let best = (await ensureSolutionThenGet()) || '';
1660 |       if (typeof best !== 'string') best = String(best ?? '');
1661 |       const clean = best.trim();
1662 |       if (clean) setPendingSolution(clean);
1663 |       return;
1664 | 
1665 |     }
1666 | 
1667 |     // Fallback: treat as normal chat input
1668 |     setNewMsg(trimmed);
1669 |     // Fallback: send directly (mark as suggested)
1670 |     await sendMessage(trimmed, { source: 'suggested', intent: 'suggested' });
1671 |   };
1672 | 
1673 |   // Related tickets
1674 |   const [relatedTickets, setRelatedTickets] = useState([]);
1675 |   const [relatedTicketsLoading, setRelatedTicketsLoading] = useState(false);
1676 |   const [relatedTicketsError, setRelatedTicketsError] = useState(null);
1677 | 
1678 |   useEffect(() => {
1679 |     if (!tid) return;
1680 |     setRelatedTicketsLoading(true);
1681 |     setRelatedTicketsError(null);
1682 |     fetch(`${API_BASE}/threads/${tid}/related-tickets`, { credentials: 'include' })
1683 |       .then((r) => (r.ok ? r.json() : Promise.reject(r.status)))
1684 |       .then(data => setRelatedTickets(Array.isArray(data.tickets) ? data.tickets : []))
1685 |       .catch(() => setRelatedTicketsError('Failed to load related tickets'))
1686 |       .finally(() => setRelatedTicketsLoading(false));
1687 |   }, [tid]);
1688 | 
1689 |   const handleRelatedTicketClick = (t) => {
1690 |     if (!t?.id) return;
1691 |     setParentThreadId(activeThreadId);
1692 |     setActiveThreadId(String(t.id));
1693 |   };
1694 | 
1695 |   // Chat send
1696 |   const sendMessage = async (overrideText = null, options = {}) => {
1697 |     const text = String(overrideText ?? newMsg).trim();
1698 | 
1699 |     // Decide the intent for this message
1700 |     const isExplicitSolution = EXPLICIT_SOLUTION_INTENT_RE.test(text);
1701 |     lastUserIntentRef.current = options.intent || (isExplicitSolution ? 'explicit_solution' : 'normal');
1702 | 
1703 |     if (!text) return;
1704 | 
1705 | 
1706 | 
1707 |     // If user types 'escalate this ticket', trigger escalation
1708 |     if (/^escalate this ticket$/i.test(text.trim())) {
1709 |       setNewMsg('');
1710 |       setMessages(prev => [
1711 |         ...prev,
1712 |         {
1713 |           id: `temp-${tempIdRef.current++}`,
1714 |           sender: 'user',
1715 |           content: text,
1716 |           source: options.source || 'typed',
1717 |           timestamp: new Date().toISOString()
1718 |         }
1719 |       ]);
1720 |       // Call the escalate endpoint
1721 |       try {
1722 |         const resp = await fetch(`${API_BASE}/threads/${tid}/escalate`, {
1723 |           method: 'POST',
1724 |           headers: { 'Content-Type': 'application/json', ...authHeaders() },
1725 |           credentials: 'include',
1726 |         });
1727 |         const data = await resp.json();
1728 |         if (!resp.ok) throw new Error(data.error || 'Failed to escalate');
1729 |           setMessages(prev => [
1730 |             ...prev,
1731 |             {
1732 |               id: `temp-${Date.now()}-escalate`,
1733 |               sender: 'bot',
1734 |               content: 'Ticket escalated to L2 support.',
1735 |               type: 'info',
1736 |               timestamp: new Date().toISOString(),
1737 |             },
1738 |           ]);
1739 |           setPendingSolution(null); // Hide solution box if open
1740 |         setTimelineRefresh(x => x + 1);
1741 |       } catch (e) {
1742 |         setMessages(prev => [
1743 |           ...prev,
1744 |           {
1745 |             id: `temp-${Date.now()}-escalate-error`,
1746 |             sender: 'bot',
1747 |               content: `Failed to escalate: ${e.message || e}`,
1748 |               type: 'error',
1749 |             timestamp: new Date().toISOString(),
1750 |           },
1751 |         ]);
1752 |       }
1753 |       return;
1754 |     }
1755 | 
1756 |     // If user types a draft email request, open only the editor (no solution box)
1757 |     // 1) Explicitly open an empty editor (keep this behavior)
1758 |     if (DRAFT_EMAIL_OPEN_EMPTY_RE.test(text)) {
1759 |       setNewMsg('');
1760 |       setMessages(prev => [
1761 |         ...prev,
1762 |         {
1763 |           id: `temp-${tempIdRef.current++}`,
1764 |           sender: 'user',
1765 |           content: text,
1766 |           source: options.source || 'typed',
1767 |           timestamp: new Date().toISOString()
1768 |         }
1769 |       ]);
1770 |       setPendingSolution(null);
1771 |       openDraftEditor(''); // empty editor by request
1772 |       return;
1773 |     }
1774 | 
1775 |     // 2) Draft email intent (generic or with solution) → show Proposed Solution first
1776 |     if (DRAFT_EMAIL_WITH_SOLUTION_RE.test(text) || GENERIC_DRAFT_EMAIL_RE.test(text)) {
1777 |       setNewMsg('');
1778 |       setMessages(prev => [
1779 |         ...prev,
1780 |         {
1781 |           id: `temp-${tempIdRef.current++}`,
1782 |           sender: 'user',
1783 |           content: text,
1784 |           source: options.source || 'typed',
1785 |           timestamp: new Date().toISOString()
1786 |         }
1787 |       ]);
1788 |       let best = (await ensureSolutionThenGet()) || '';
1789 |       if (typeof best !== 'string') best = String(best ?? '');
1790 |       const clean = best.trim();
1791 |       if (clean) setPendingSolution(clean); // ← show panel, NOT the editor
1792 |       return;
1793 |     }
1794 | 
1795 | 
1796 | 
1797 |     setSending(true);
1798 |     setError(null);
1799 |     setNewMsg('');
1800 | 
1801 |     setMessages(prev => [
1802 |       ...prev,
1803 |       { id: `temp-${tempIdRef.current++}`, sender: 'user', content: text, timestamp: new Date().toISOString() }
1804 |     ]);
1805 | 
1806 |     // show a typing placeholder to improve perceived latency
1807 |     const tempTypingId = `typing-${Date.now()}`;
1808 |     setMessages(prev => [
1809 |       ...prev,
1810 |       { id: tempTypingId, sender: 'assistant', content: '…thinking', type: 'info', timestamp: new Date().toISOString() }
1811 |     ]);
1812 | 
1813 | 
1814 |     try {
1815 |       const lastMessages = buildHistory([
1816 |         ...messages,
1817 |         { sender: 'user', content: text }  // <- include current user message
1818 |       ]);
1819 |       const resp = await fetch(`${API_BASE}/threads/${tid}/chat`, {
1820 |         method: 'POST',
1821 |         headers: { 'Content-Type': 'application/json', ...authHeaders() },
1822 |         credentials: 'include',
1823 |         body: JSON.stringify({
1824 |               message: text,
1825 |               history: lastMessages,
1826 |               no_store: true,
1827 |               ...(options.source ? { source: options.source } : {})
1828 |             })
1829 |       });
1830 |       const data = await resp.json();
1831 |       if (!resp.ok) throw new Error(data.error || 'Error');
1832 | 
1833 |       setMessages(prev => {
1834 |       let arr = prev.filter(m => m.id !== tempTypingId);
1835 | 
1836 |       // 1) Solution shape
1837 |       if (data?.type === 'solution' && typeof data.text === 'string' && data.text.trim()) {
1838 |         if (lastUserIntentRef.current === 'explicit_solution') {
1839 |           // Only open the Proposed Solution panel for explicit intent
1840 |           setPendingSolution(data.text);
1841 |           return arr;
1842 |         }
1843 |         // Otherwise show as a normal assistant bubble
1844 |         arr = [...arr, {
1845 |           id: `temp-${tempIdRef.current++}`,
1846 |           sender: 'bot',
1847 |           content: data.text,
1848 |           type: 'solution',
1849 |           timestamp: new Date().toISOString(),
1850 |         }];
1851 |         return arr;
1852 |       }
1853 | 
1854 |       // 2) Step-by-step shape
1855 |       if (data?.reply && typeof data.reply === 'object' && data.reply !== null) {
1856 |         const steps = Object.values(data.reply);
1857 |         arr = [...arr, {
1858 |           id: `temp-${tempIdRef.current++}`,
1859 |           sender: 'bot',
1860 |           content: steps[0],
1861 |           step: 1,
1862 |           total: steps.length,
1863 |           timestamp: new Date().toISOString()
1864 |         }];
1865 |         setStepInfo({ step: 1, total: steps.length, steps });
1866 |         setShowSolutionPrompt(false);
1867 |         return arr;
1868 |       }
1869 | 
1870 |       // 3) Plain chat shape
1871 |       arr = [...arr, {
1872 |         id: `temp-${tempIdRef.current++}`,
1873 |         sender: 'bot',
1874 |         content: toDisplayString(data.reply ?? ''),
1875 |         step: data.step,
1876 |         total: data.total,
1877 |         timestamp: new Date().toISOString()
1878 |       }];
1879 | 
1880 |       if (typeof data.step === 'number' && typeof data.total === 'number') {
1881 |         setStepInfo({ step: data.step, total: data.total });
1882 |         setShowSolutionPrompt(false);
1883 |       } else if (typeof data.reply === 'string' && data.reply.trim() === 'Did this solve your issue?') {
1884 |         setShowSolutionPrompt(true);
1885 |         setStepInfo(null);
1886 |       } else {
1887 |         setStepInfo(null);
1888 |         setShowSolutionPrompt(false);
1889 |       }
1890 | 
1891 |       return arr;
1892 |     });
1893 | 
1894 |     } catch (e) {
1895 |       setMessages(prev => prev.filter(m => m.id !== tempTypingId));
1896 |       setError(`Failed to send message: ${e.message}`);
1897 |     } finally {
1898 |       setSending(false);
1899 |     }
1900 |   };
1901 | 
1902 |   // Step confirm
1903 |   const confirmStep = async ok => {
1904 |     if (!stepInfo) return;
1905 |     setLoadingStep(true);
1906 |     setStepError(null);
1907 |     try {
1908 |       if (stepInfo.steps && Array.isArray(stepInfo.steps)) {
1909 |         const nextStep = stepInfo.step + 1;
1910 |         if (nextStep <= stepInfo.total) {
1911 |           setMessages(prev => [
1912 |             ...prev,
1913 |             {
1914 |               id: `temp-${tempIdRef.current++}`,
1915 |               sender: 'bot',
1916 |               content: stepInfo.steps[nextStep - 1],
1917 |               step: nextStep,
1918 |               total: stepInfo.total,
1919 |               timestamp: new Date().toISOString()
1920 |             }
1921 |           ]);
1922 |           if (nextStep === stepInfo.total) {
1923 |             setShowSolutionPrompt(true);
1924 |             setStepInfo(null);
1925 |           } else {
1926 |             setStepInfo({ ...stepInfo, step: nextStep });
1927 |             setShowSolutionPrompt(false);
1928 |           }
1929 |         }
1930 |         setLoadingStep(false);
1931 |         return;
1932 |       }
1933 | 
1934 |       const resp = await fetch(`${API_BASE}/threads/${tid}/step`, {
1935 |         method: 'POST',
1936 |         headers: { 'Content-Type': 'application/json', ...authHeaders() },
1937 |         credentials: 'include',
1938 |         body: JSON.stringify({ ok })
1939 |       });
1940 |       const data = await resp.json();
1941 |       if (!resp.ok) throw new Error(data.error);
1942 |       if (typeof data.step === 'number' && typeof data.total === 'number') {
1943 |         if (data.step === data.total) {
1944 |           setMessages(prev => [
1945 |             ...prev,
1946 |             { id: `temp-${tempIdRef.current++}`, sender: 'bot', content: data.reply, step: data.step, total: data.total, timestamp: new Date().toISOString() },
1947 |             { id: `temp-${tempIdRef.current++}`, sender: 'bot', content: 'Did this solve your issue?', timestamp: new Date().toISOString() }
1948 |           ]);
1949 |           setShowSolutionPrompt(true);
1950 |           setStepInfo(null);
1951 |         } else {
1952 |           setMessages(prev => [
1953 |             ...prev,
1954 |             { id: `temp-${tempIdRef.current++}`, sender: 'bot', content: data.reply, step: data.step, total: data.total, timestamp: new Date().toISOString() }
1955 |           ]);
1956 |           setStepInfo({ step: data.step, total: data.total });
1957 |           setShowSolutionPrompt(false);
1958 |         }
1959 |       } else if (typeof data.reply === 'string' && data.reply.trim() === 'Did this solve your issue?') {
1960 |         setMessages(prev => [...prev, { id: `temp-${tempIdRef.current++}`, sender: 'bot', content: data.reply, timestamp: new Date().toISOString() }]);
1961 |         setShowSolutionPrompt(true);
1962 |         setStepInfo(null);
1963 |       } else {
1964 |         setMessages(prev => [...prev, { id: `temp-${tempIdRef.current++}`, sender: 'bot', content: 'Did this solve your issue?', timestamp: new Date().toISOString() }]);
1965 |         setShowSolutionPrompt(true);
1966 |         setStepInfo(null);
1967 |       }
1968 |     } catch (e) {
1969 |       setStepError(e.message);
1970 |     } finally {
1971 |       setLoadingStep(false);
1972 |     }
1973 |   };
1974 | 
1975 |   // Solution response (kept for completeness; not wired to UI prompt here)
1976 |   const handleSolutionResponse = async (solved) => {
1977 |     setShowSolutionPrompt(false);
1978 |     try {
1979 |       const resp = await fetch(`${API_BASE}/threads/${tid}/solution`, {
1980 |         method: 'POST',
1981 |         headers: { 'Content-Type': 'application/json', ...authHeaders() },
1982 |         credentials: 'include',
1983 |         body: JSON.stringify({ solved }),
1984 |       });
1985 |       const data = await resp.json();
1986 |       if (!resp.ok) throw new Error(data.error || 'Error');
1987 |       setMessages(prev => [
1988 |         ...prev,
1989 |         {
1990 |           id: `temp-${tempIdRef.current++}`,
1991 |           sender: 'bot',
1992 |           content: solved ? '🎉 Glad I could help!' : '🚀 Ticket escalated to L2 support.',
1993 |           timestamp: new Date().toISOString()
1994 |         }
1995 |       ]);
1996 |       setTicket(t => ({ ...t, status: data.status }));
1997 |     } catch (e) {
1998 |       setMessages(prev => [
1999 |         ...prev,
2000 |         { id: `temp-${tempIdRef.current++}`, sender: 'system', content: `Solution update failed: ${e.message}`, timestamp: new Date().toISOString() }
2001 |       ]);
2002 |     }
2003 |   };
2004 | 
2005 |   // Escalate / Close (with downloadable report)
2006 |   const handleAction = async action => {
2007 |     setActionLoading(true);
2008 |     setActionError(null);
2009 |     try {
2010 |       if (action === 'escalate') {
2011 |         const reportLines = [];
2012 |         reportLines.push(`Ticket ID: ${tid}`);
2013 |         if (ticket?.status) reportLines.push(`Status: ${ticket.status}`);
2014 |         if (ticket?.category) reportLines.push(`Category: ${ticket.category}`);
2015 |         if (ticket?.subject) reportLines.push(`Subject: ${ticket.subject}`);
2016 |         if (ticket?.text) reportLines.push(`Text: ${ticket.text}`);
2017 |         reportLines.push('--- Chat History ---');
2018 |         messages.forEach(msg => {
2019 |           reportLines.push(`[${msg.sender}] ${typeof msg.content === 'string' ? msg.content : '[non-text content]'}`);
2020 |         });
2021 |         const reportText = reportLines.join('\n');
2022 | 
2023 |         const resp = await fetch(`${API_BASE}/threads/${tid}/escalate`, {
2024 |           method: 'POST',
2025 |           headers: { 'Content-Type': 'application/json', ...authHeaders() },
2026 |           credentials: 'include',
2027 |           body: JSON.stringify({ report: reportText })
2028 |         });
2029 |         if (!resp.ok) throw new Error('Failed to escalate');
2030 |         const data = await resp.json();
2031 |         setTicket(t => ({ ...t, status: data.status }));
2032 | 
2033 |         const blob = new Blob([reportText], { type: 'text/plain' });
2034 |         const url = URL.createObjectURL(blob);
2035 |         setMessages(prev => [
2036 |           ...prev,
2037 |           { id: `temp-${Date.now()}-escalate`, sender: 'bot', content: `Ticket escalated to L2 support.${notifyUser ? ' (notification sent)' : ' (no notification)'}`, timestamp: new Date().toISOString() },
2038 |           { id: `temp-${Date.now()}-dl`, sender: 'bot', content: <a href={url} download={`ticket_${tid}_report.txt`} className="underline text-blue-600">ticket_{tid}_report.txt</a>, timestamp: new Date().toISOString() }
2039 |         ]);
2040 |         setTimelineRefresh(x => x + 1);
2041 |       } else {
2042 |         const resp = await fetch(`${API_BASE}/threads/${tid}/close`, {
2043 |           method: 'POST',
2044 |           headers: { 'Content-Type': 'application/json', ...authHeaders() },
2045 |           credentials: 'include',
2046 |           body: JSON.stringify({ notify: notifyUser })
2047 |         });
2048 |         const data = await resp.json();
2049 |         if (!resp.ok) throw new Error(data.error || 'Failed to close');
2050 | 
2051 |         setTicket(t => ({ ...t, status: data.status }));
2052 |         setMessages(prev => [
2053 |           ...prev,
2054 |           {
2055 |             ...(data.message || {}),
2056 |             id: `temp-${Date.now()}-close`,
2057 |             sender: 'bot',
2058 |             content: `${data.message?.content || 'Ticket closed.'}${notifyUser ? ' (notification sent)' : ' (no notification)'}`
2059 |           }
2060 |         ]);
2061 |         setTimelineRefresh(x => x + 1);
2062 |       }
2063 |     } catch (e) {
2064 |       setActionError('Failed to update ticket.');
2065 |     } finally {
2066 |       setActionLoading(false);
2067 |     }
2068 |   };
2069 | 
2070 |   // TicketHeader
2071 |   function TicketHeader({ ticket, onBack, onEscalate, onClose, actionLoading, darkMode, setDarkMode, showKB, setShowKB }) {
2072 |     const handleDeescalate = async () => {
2073 |       const note = window.prompt('Add a short note for de-escalation (optional):') || '';
2074 |       setActionLoading(true);
2075 |       try {
2076 |         const resp = await fetch(`${API_BASE}/threads/${ticket?.id}/deescalate`, {
2077 |           method: 'POST',
2078 |           headers: { 'Content-Type': 'application/json', ...authHeaders() },
2079 |           credentials: 'include',
2080 |           body: JSON.stringify({ note })
2081 |         });
2082 |         const data = await resp.json();
2083 |         if (!resp.ok) throw new Error(data.error || 'Failed');
2084 |         setTicket(t => ({ ...t, status: data.status, level: Number(data.level) }));
2085 |         setMessages(prev => [...prev, {
2086 |           id: `temp-${Date.now()}-deesc`,
2087 |           sender: 'system',
2088 |           content: `↩️ De-escalated to L${data.level}${note ? ` (note: ${note})` : ''}.`
2089 |         }]);
2090 |         setTimelineRefresh(x => x + 1);
2091 |       } catch (e) {
2092 |         setActionError(e.message);
2093 |       } finally {
2094 |         setActionLoading(false);
2095 |       }
2096 |     };
2097 | 
2098 |     return (
2099 |       <div className="flex items-center justify-between px-6 py-4 border-b border-gray-200 dark:border-gray-800 bg-white/80 dark:bg-black/80 backdrop-blur-md sticky top-0 z-40">
2100 |         <div className="flex items-center gap-4">
2101 |           <button
2102 |             onClick={onBack}
2103 |             className="p-2 rounded-full bg-blue-100 hover:bg-blue-200 transition text-blue-700 font-bold"
2104 |             aria-label="Back"
2105 |           >←</button>
2106 |           <span className="text-xl font-semibold text-gray-900 dark:text-gray-100">
2107 |             Ticket #{ticket?.id || tid}
2108 |           </span>
2109 |           <button
2110 |             onClick={() => setShowKB(v => !v)}
2111 |             className="px-2.5 py-1 rounded-lg ring-1 ring-gray-300 dark:ring-gray-700 bg-white dark:bg-gray-900 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-800 dark:text-gray-100 text-xs"
2112 |             aria-label="Show Knowledge Base"
2113 |           >📚 KB</button>
2114 |         </div>
2115 |         <div className="flex items-center gap-3">
2116 |           {typeof ticket?.level === 'number' && (
2117 |             <span
2118 |               className={
2119 |                 `px-3 py-1 rounded-full text-sm font-semibold mr-1 ` +
2120 |                 (ticket.level === 1
2121 |                   ? 'bg-blue-100 text-blue-800'
2122 |                   : ticket.level === 2
2123 |                   ? 'bg-purple-100 text-purple-800'
2124 |                   : 'bg-red-100 text-red-800')
2125 |               }
2126 |             >
2127 |               L{ticket.level}
2128 |             </span>
2129 |           )}
2130 |           {ticket?.status && (
2131 |             <span
2132 |               className={
2133 |                 `px-3 py-1 rounded-full text-sm font-semibold mr-2 ` +
2134 |                 (ticket.status?.toLowerCase() === 'open'
2135 |                   ? 'bg-green-100 text-green-800'
2136 |                   : ticket.status?.toLowerCase() === 'escalated'
2137 |                   ? 'bg-orange-100 text-orange-800'
2138 |                   : ticket.status?.toLowerCase() === 'deescalated'
2139 |                   ? 'bg-blue-200 text-blue-900 border border-blue-400'
2140 |                   : ticket.status?.toLowerCase() === 'closed'
2141 |                   ? 'bg-gray-200 text-gray-700'
2142 |                   : 'bg-blue-100 text-blue-800')
2143 |               }
2144 |             >
2145 |               {ticket.status?.toLowerCase() === 'deescalated' ? 'Deescalated' : ticket.status}
2146 |             </span>
2147 |           )}
2148 | 
2149 |           {/* Notify toggle for close/escalate context */}
2150 |           <label className="flex items-center gap-2 px-3 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-200 text-xs sm:text-sm select-none cursor-pointer">
2151 |             <input
2152 |               type="checkbox"
2153 |               className="accent-indigo-600 cursor-pointer"
2154 |               checked={notifyUser}
2155 |               onChange={e => setNotifyUser(e.target.checked)}
2156 |             />
2157 |             Notify user
2158 |           </label>
2159 | 
2160 |           {/* Escalate: L1, L2, L3, MANAGER */}
2161 |           <Gate roles={["L1", "L2", "L3", "MANAGER"]}>
2162 |             <button
2163 |               onClick={() => handleAction('escalate')}
2164 |               disabled={actionLoading}
2165 |               className="flex items-center gap-1 px-3 py-1 bg-orange-500 text-white rounded-full hover:bg-orange-600 transition disabled:opacity-50 text-sm"
2166 |             >🛠 Escalate</button>
2167 |           </Gate>
2168 | 
2169 |           {/* De-escalate: L2, L3, MANAGER only */}
2170 |           <Gate roles={["L2", "L3", "MANAGER"]}>
2171 |             {ticket?.level > 1 && (
2172 |               <button
2173 |                 onClick={handleDeescalate}
2174 |                 disabled={actionLoading}
2175 |                 className="flex items-center gap-1 px-3 py-1 bg-amber-500 text-white rounded-full hover:bg-amber-600 transition disabled:opacity-50 text-sm"
2176 |               >↩️ De-escalate</button>
2177 |             )}
2178 |           </Gate>
2179 | 
2180 |           {/* Close: MANAGER */}
2181 |           <Gate roles={["MANAGER"]}>
2182 |             <button
2183 |               onClick={() => handleAction('close')}
2184 |               disabled={actionLoading}
2185 |               className="flex items-center gap-1 px-3 py-1 bg-gray-700 text-white rounded-full hover:bg-gray-900 transition disabled:opacity-50 text-sm"
2186 |             >🚫 Close</button>
2187 |           </Gate>
2188 | 
2189 |         </div>
2190 |       </div>
2191 |     );
2192 |   }
2193 | 
2194 |   // Email send (used by DraftEmailEditor)
2195 |   const handleSendFinalEmail = async () => {
2196 |     // Re-sanitize in case anything was edited in the UI
2197 |     let emailToSend = sanitizeEmailBody(draftEditorBody);
2198 |     if (aiDraft && showAIDisclaimer) {
2199 |       emailToSend = `${emailToSend}\n\n—\nAutomated draft: Created by our AI support assistant and reviewed by our team.`;
2200 |     }
2201 |     const ccList = cc
2202 |       .split(/[,\s;]+/)
2203 |       .map(s => s.trim())
2204 |       .filter(Boolean);
2205 |     const ccUnique = [...new Set(ccList.map(e => e.toLowerCase()))];
2206 |     const EMAIL_RE = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
2207 |     const invalid = ccUnique.filter(e => !EMAIL_RE.test(e));
2208 |     if (invalid.length) {
2209 |       setActionError(`Invalid CC ${invalid.length > 1 ? 'addresses' : 'address'}: ${invalid.join(', ')}`);
2210 |       return;
2211 |     }
2212 | 
2213 |     try {
2214 |       setSending(true);
2215 |       setActionError(null);
2216 |       const res = await fetch(`${API_BASE}/threads/${tid}/send-email`, {
2217 |         method: 'POST',
2218 |         headers: { 'Content-Type': 'application/json', ...authHeaders() },
2219 |         // credentials: 'include',
2220 |         body: JSON.stringify({ email: emailToSend, cc: ccUnique })
2221 |       });
2222 |       const data = await res.json();
2223 |       if (!res.ok) throw new Error(data?.error || 'Error sending email');
2224 | 
2225 |       setMessages(prev => [
2226 |         ...prev,
2227 |         {
2228 |           id: `temp-${Date.now()}`,
2229 |           sender: 'system',
2230 |           content: `📤 Email sent to ${data.recipient}${ccUnique.length ? ` (cc: ${ccUnique.join(', ')})` : ''}.`,
2231 |           timestamp: new Date().toISOString()
2232 |         }
2233 |       ]);
2234 | 
2235 |       setShowDraftEditor(false);
2236 |       setDraftEditorBody('');
2237 |       setCc('');
2238 |       setTimelineRefresh(x => x + 1);
2239 |     } catch (e) {
2240 |       setActionError(e.message || 'Failed to send email');
2241 |     } finally {
2242 |       setSending(false);
2243 |     }
2244 |   };
2245 | 
2246 |   if (loading) return <div className="p-6 text-center text-gray-500">Loading chat…</div>;
2247 |   if (error)   return <div className="p-6 text-center text-red-500">{error}</div>;
2248 | 
2249 |   // =========================
2250 |   // Render
2251 |   // =========================
2252 |   return (
2253 |     <>
2254 |       {showKB && <KBDashboard open={showKB} onClose={() => setShowKB(false)} />}
2255 | 
2256 |       <div className={`flex flex-col h-full min-h-screen w-full ${darkMode ? 'dark' : ''} ${className} bg-white dark:bg-black transition-colors`}>
2257 |         <TicketHeader
2258 |           ticket={ticket}
2259 |           showKB={showKB}
2260 |           setShowKB={setShowKB}
2261 |           onBack={parentThreadId ? () => { setActiveThreadId(parentThreadId); setParentThreadId(null); } : onBack}
2262 |           onEscalate={() => handleAction('escalate')}
2263 |           onClose={() => handleAction('close')}
2264 |           actionLoading={actionLoading}
2265 |           darkMode={darkMode}
2266 |           setDarkMode={setDarkMode}
2267 |         />
2268 | 
2269 |         <div className="mx-4 md:mx-4 mt-0 md:grid md:grid-cols-12 md:gap-4">
2270 |           {/* LEFT: Ticket + Chat */}
2271 |           <div className="md:col-span-8 flex flex-col">
2272 |             <TicketInfoCard ticket={ticket} />
2273 | 
2274 |             {/* CHAT PANEL (moved here) */}
2275 |             <div className="flex-1 flex flex-col relative min-w-0">
2276 |               {/* Messages */}
2277 |               <div
2278 |                 ref={scrollRef}
2279 |                 className="overflow-y-auto p-2 sm:p-4 space-y-4 bg-[#F9FAFB] dark:bg-black scroll-smooth max-h-[calc(100vh-260px)] min-h-[200px]"
2280 |                 style={{ paddingBottom: 'var(--composer-height, 120px)' }}
2281 |               >
2282 |                 {displayMessages.map((msg, i) => {
2283 |                 // Suppress bot message bubble if it looks like a draft email (starts with 'Subject:')
2284 |                 if ((msg.sender === 'bot' || msg.sender === 'assistant' || msg.type === 'email') && typeof msg.content === 'string' && msg.content.trim().startsWith('Subject:')) {
2285 |                   return null;
2286 |                 }
2287 |                 if (msg.type === 'solution') {
2288 |                   // While the Proposed Solution panel is visible, keep solutions out of the stream.
2289 |                   if (pendingSolution) return null;
2290 |                   // After you dismiss (pendingSolution is null), show solution messages in-stream.
2291 |                   // fall through and render like normal
2292 |                 }
2293 | 
2294 |                 const isUser = msg.sender === 'user';
2295 |                 const isBot = msg.sender === 'bot' || msg.sender === 'assistant';
2296 |                 const isSystem = msg.sender === 'system';
2297 |                 const isSystemEvent = [
2298 |                   'not_fixed_feedback',
2299 |                   'system',
2300 |                   'diagnostics',
2301 |                   'email_sent',
2302 |                   'escalated',
2303 |                   'closed',
2304 |                   'deescalated',
2305 |                   'step',
2306 |                   'info',
2307 |                   'event',
2308 |                 ].includes(msg.type);
2309 | 
2310 |                 let displayContent = toDisplayString(msg.content);
2311 |                 if (msg.downloadUrl && msg.downloadName) {
2312 |                   displayContent = (
2313 |                     <a href={msg.downloadUrl} download={msg.downloadName} className="underline text-blue-600">
2314 |                       {msg.downloadName}
2315 |                     </a>
2316 |                   );
2317 |                 }
2318 | 
2319 |                 // Left-aligned for bot/system
2320 |                 if (isBot || isSystem || isSystemEvent) {
2321 |                   let icon = '🤖';
2322 |                   if (msg.type === 'not_fixed_feedback') icon = '🚫';
2323 |                   if (msg.type === 'diagnostics') icon = '🧪';
2324 |                   if (msg.type === 'email_sent') icon = '✉️';
2325 |                   if (msg.type === 'escalated') icon = '🛠';
2326 |                   if (msg.type === 'closed') icon = '🚫';
2327 |                   if (msg.type === 'deescalated') icon = '↩️';
2328 |                   if (msg.type === 'step') icon = '🪜';
2329 |                   if (msg.type === 'info') icon = 'ℹ️';
2330 |                   if (msg.type === 'event') icon = '📌';
2331 |                   return (
2332 |                     <div
2333 |                       key={msg.id ?? i}
2334 |                       ref={el => { if (el && msg.id) messageRefs.current[msg.id] = el; }}
2335 |                       className="flex w-full group justify-start"
2336 |                     >
2337 |                       <div className="bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-100 rounded-bl-3xl rounded-br-3xl rounded-tl-xl rounded-tr-lg border border-gray-200 dark:border-gray-700" style={{ padding: '12px 20px', margin: '4px 0', maxWidth: '75vw', boxShadow: '0 2px 8px rgba(0,0,0,0.04)' }}>
2338 |                         <div className="font-medium text-xs flex items-center gap-2 mb-1">
2339 |                           <span>{icon}</span>
2340 |                           <span className="inline-block align-middle text-[13px]">
2341 |                             {typeof displayContent === 'string'
2342 |                               ? renderListOrText(displayContent, (s) => renderContentWithMentions(s, handleMentionClick))
2343 |                               : displayContent}
2344 |                           </span>
2345 |                         </div>
2346 |                         <div className="text-[10px] text-gray-400 dark:text-gray-300 text-right mt-2">
2347 |                           {msg.timestamp ? dayjs(msg.timestamp).format('HH:mm') : ''}
2348 |                         </div>
2349 |                       </div>
2350 |                     </div>
2351 |                   );
2352 |                 }
2353 | 
2354 |                 // Right-aligned user messages
2355 |                 return (
2356 |                   <div
2357 |                     key={msg.id ?? i}
2358 |                     ref={el => { if (el && msg.id) messageRefs.current[msg.id] = el; }}
2359 |                     className={["flex w-full group", isUser ? 'justify-end' : 'justify-start'].join(' ')}
2360 |                   >
2361 |                     <div className={
2362 |                       isUser
2363 |                         ? 'bg-blue-100 dark:bg-blue-900 text-blue-900 dark:text-blue-100 rounded-tr-3xl rounded-bl-3xl rounded-tl-xl rounded-br-lg'
2364 |                         : 'bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-100 rounded-bl-3xl rounded-br-3xl rounded-tl-xl rounded-tr-lg'
2365 |                     } style={{ padding: '12px 20px', margin: '4px 0', maxWidth: '75vw', boxShadow: '0 2px 8px rgba(0,0,0,0.04)' }}>
2366 |                       <div className="font-medium text-xs">
2367 |                         <span className="inline-block align-middle text-[13px]">
2368 |                           {typeof displayContent === 'string'
2369 |                             ? renderListOrText(displayContent, (s) => renderContentWithMentions(s, handleMentionClick))
2370 |                             : displayContent}
2371 |                         </span>
2372 |                       </div>
2373 |                       <div className="text-[10px] text-gray-400 dark:text-gray-300 text-right mt-2">
2374 |                         {msg.timestamp ? dayjs(msg.timestamp).format('HH:mm') : ''}
2375 |                       </div>
2376 |                     </div>
2377 |                   </div>
2378 |                 );
2379 |               })}
2380 | 
2381 | 
2382 |                 {/* Proposed Solution panel */}
2383 |                 <div ref={solutionPanelRef}>
2384 |                   <ProposedSolutionBox
2385 |                     text={pendingSolution}
2386 |                     onDraft={async () => {
2387 |                       const sol = (await ensureSolutionThenGet()) || getLastSolutionText() || '';
2388 |                       const emailBody = await draftFromBackendOrBuild(sol);
2389 |                       setPendingSolution(null);
2390 |                       openDraftEditor(emailBody);
2391 |                     }}
2392 |                     onDismiss={showPendingSolutionAsChatAndClear}
2393 |                      
2394 |                   />
2395 |                 </div>
2396 | 
2397 |                 <div ref={scrollBottomRef} />
2398 |               </div>
2399 | 
2400 |               {/* Draft Email Editor */}
2401 |               <DraftEmailEditor
2402 |                 open={showDraftEditor}
2403 |                 body={draftEditorBody}
2404 |                 setBody={setDraftEditorBody}
2405 |                 cc={cc}
2406 |                 setCc={setCc}
2407 |                 loading={sending}
2408 |                 error={actionError}
2409 |                 onSend={handleSendFinalEmail}
2410 |                 aiDraft={aiDraft}
2411 |                 showAIDisclaimer={showAIDisclaimer}
2412 |                 setShowAIDisclaimer={setShowAIDisclaimer}
2413 |                 onCancel={() => {
2414 |                   setShowDraftEditor(false);
2415 |                   if (draftEditorBody) {
2416 |                     setMessages(prev => [
2417 |                       ...prev,
2418 |                       {
2419 |                         id: `temp-${tempIdRef.current++}`,
2420 |                         sender: 'bot',
2421 |                         content: draftEditorBody,
2422 |                         type: 'draft_email',
2423 |                         timestamp: new Date().toISOString(),
2424 |                       },
2425 |                     ]);
2426 |                   }
2427 |                 }}
2428 |               />
2429 | 
2430 |               {/* Composer */}
2431 |               <ChatComposer
2432 |                 value={newMsg}
2433 |                 onChange={v => {
2434 |                   if (typeof v === 'string') setNewMsg(v);
2435 |                   else if (v && v.target && typeof v.target.value === 'string') setNewMsg(v.target.value);
2436 |                 }}
2437 |                 onSend={sendMessage}
2438 |                 sending={sending}
2439 |                 textareaRef={textareaRef}
2440 |                 drawerOpen={showDraftEditor}
2441 |               />
2442 |             </div>
2443 |           </div>
2444 | 
2445 |           {/* RIGHT: Collapsibles */}
2446 |           <div className="md:col-span-4 flex flex-col gap-2">
2447 |             <div className="md:sticky md:top-20">
2448 |               <TimelinePanel
2449 |                 events={timeline}
2450 |                 loading={timelineLoading}
2451 |                 error={timelineError}
2452 |                 openSections={openSections}
2453 |                 toggleSection={toggleSection}
2454 |               />
2455 |               <SuggestedPrompts
2456 |                 threadId={tid}
2457 |                 prompts={suggestedPrompts}
2458 |                 open={panelOpen}
2459 |                 onToggle={() => setPanelOpen(v => !v)}
2460 |                 apiBase={API_BASE}
2461 |                 onPromptSelect={handleSuggestedPromptClick}
2462 |               />
2463 |               <RelatedTicketList
2464 |                 tickets={relatedTickets}
2465 |                 loading={relatedTicketsLoading}
2466 |                 error={relatedTicketsError}
2467 |                 onClick={handleRelatedTicketClick}
2468 |                 openSections={openSections}
2469 |                 toggleSection={toggleSection}
2470 |               />
2471 |               <StepProgressBar stepInfo={stepInfo} />
2472 |             </div>
2473 |           </div>
2474 |         </div>
2475 |       </div>
2476 |     </>
2477 |   );
2478 | }
2479 | 
2480 | export default React.memo(ChatHistory);
```

components/Gate.jsx
```
1 | import React from 'react';
2 | import { useAuth } from './AuthContext';
3 | 
4 | // Usage: <Gate roles={["admin"]} fallback={<div>Not authorized</div>}>Secret</Gate>
5 | export function hasRole(agent, roles = []) {
6 |   if (!agent || !agent.role) return false;
7 |   return roles.includes(agent.role);
8 | }
9 | 
10 | export default function Gate({ roles = [], children, fallback = null }) {
11 |   const { agent } = useAuth();
12 |   const role = agent?.role;
13 |   console.log('GATE_RENDERED');
14 |   console.log('GATE_AGENT', agent);
15 |   console.log('GATE_PROPS', { role, roles, agent });
16 |   if (hasRole(agent, roles)) {
17 |     return <>{children}</>;
18 |   }
19 |   return fallback;
20 | }
```

components/GroupedTickets.jsx
```
1 | // components/GroupedTickets.jsx
2 | 
3 | import React, { useState } from 'react';
4 | import { motion, AnimatePresence } from 'framer-motion';
5 | 
6 | export default function GroupedTickets({ threads, selectedId, onSelect }) {
7 |   // For demo: treat all except selected as unread
8 |   const getUnread = t => selectedId !== t.id;
9 |   const [openTeam, setOpenTeam] = useState(null);
10 |   const [openCat, setOpenCat]   = useState({});
11 | 
12 |   // Group threads by team → category
13 |   const grouped = threads.reduce((acc, t) => {
14 |     acc[t.assigned_team] = acc[t.assigned_team] || {};
15 |     acc[t.assigned_team][t.predicted_category] =
16 |       acc[t.assigned_team][t.predicted_category] || [];
17 |     acc[t.assigned_team][t.predicted_category].push(t);
18 |     return acc;
19 |   }, {});
20 | 
21 |   // Simple team/category icons
22 |   const teamIcons = {
23 |     'L1-Password-Team': '🔑',
24 |     'L1-Network-Team': '🌐',
25 |     'L1-Software-Team': '💻',
26 |     'L1-Hardware-Team': '🖥️',
27 |     'General-Support': '🛠️',
28 |   };
29 | 
30 |   return (
31 |     <div className="w-full h-full overflow-y-auto p-2">
32 |       {Object.entries(grouped).map(([team, cats]) => (
33 |         <motion.div
34 |           key={team}
35 |           layout
36 |           className="mb-4 rounded-2xl shadow bg-white dark:bg-gray-900 border border-gray-100 dark:border-gray-800"
37 |         >
38 |           <button
39 |             className="w-full flex items-center gap-2 px-4 py-3 text-left font-semibold text-lg rounded-t-2xl transition hover:bg-[#ADC1CC]/40 dark:hover:bg-[#ADC1CC]/20"
40 |             style={{ borderColor: '#ADC1CC' }}
41 |             onClick={() => setOpenTeam(openTeam === team ? null : team)}
42 |             aria-expanded={openTeam === team}
43 |           >
44 |             <span className="text-2xl dark:text-white">{teamIcons[team] || '👥'}</span>
45 |             <span className="dark:text-white">{team}</span>
46 |             <span className="ml-auto px-2 py-1 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 text-xs font-bold rounded-full">{Object.values(cats).flat().length} tickets</span>
47 |             <span className="ml-2 text-gray-400">{openTeam === team ? '▲' : '▼'}</span>
48 |           </button>
49 |           <AnimatePresence initial={false}>
50 |             {openTeam === team && (
51 |               <motion.div
52 |                 layout
53 |                 initial={{ opacity: 0, height: 0 }}
54 |                 animate={{ opacity: 1, height: 'auto' }}
55 |                 exit={{ opacity: 0, height: 0 }}
56 |                 transition={{ duration: 0.3 }}
57 |                 className="pl-2 pb-2"
58 |               >
59 |                 {Object.entries(cats).map(([cat, tickets]) => (
60 |                   <motion.div
61 |                     key={cat}
62 |                     layout
63 |                     className="mb-2 rounded-xl border border-[#ADC1CC] bg-gray-50 dark:bg-gray-800 shadow-sm"
64 |                   >
65 |                     <button
66 |                       className="w-full flex items-center gap-2 px-4 py-2 text-left text-base font-medium italic rounded-t-xl transition hover:bg-[#ADC1CC]/30 dark:hover:bg-[#ADC1CC]/10"
67 |                     //   style={{ borderColor: '#ADC1CC' }}
68 |                       onClick={() =>
69 |                         setOpenCat(prev => ({
70 |                           ...prev,
71 |                           [team]: prev[team] === cat ? null : cat
72 |                         }))
73 |                       }
74 |                       aria-expanded={openCat[team] === cat}
75 |                     >
76 |                       <span className="text-lg dark:text-white">📂</span>
77 |                       <span className="dark:text-white">{cat}</span>
78 |                       <span className="ml-auto px-2 py-1 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 text-xs font-bold rounded-full">{tickets.length}</span>
79 |                       <span className="ml-2 text-gray-400">{openCat[team] === cat ? '▲' : '▼'}</span>
80 |                     </button>
81 |                     <AnimatePresence initial={false}>
82 |                       {openCat[team] === cat && (
83 |                         <motion.ul
84 |                           layout
85 |                           initial={{ opacity: 0, height: 0 }}
86 |                           animate={{ opacity: 1, height: 'auto' }}
87 |                           exit={{ opacity: 0, height: 0 }}
88 |                           transition={{ duration: 0.2 }}
89 |                           className="pl-4 py-2 space-y-1 list-none"
90 |                         >
91 |                           {tickets.map(t => (
92 |                             <li key={t.id}>
93 |                               <button
94 |                                 className={`w-full text-left text-sm px-3 py-2 rounded-xl transition font-medium flex items-center gap-2 ${
95 |                                   selectedId === t.id
96 |                                     ? 'bg-blue-100 dark:bg-blue-800 text-blue-700 dark:text-blue-200 shadow border border-blue-400 font-bold'
97 |                                     : getUnread(t)
98 |                                       ? 'font-bold text-gray-900 dark:text-gray-100 relative'
99 |                                       : 'text-gray-800 dark:text-gray-200'
100 |                                 }`}
101 |                                 onClick={() => onSelect(t.id)}
102 |                                 aria-current={selectedId === t.id ? 'true' : undefined}
103 |                               >
104 |                                 <span className="font-mono text-xs text-gray-500 dark:text-gray-400 mr-2">#{t.id}</span>
105 |                                 <span>{t.text.slice(0, 32)}…</span>
106 |                               </button>
107 |                             </li>
108 |                           ))}
109 |                         </motion.ul>
110 |                       )}
111 |                     </AnimatePresence>
112 |                   </motion.div>
113 |                 ))}
114 |               </motion.div>
115 |             )}
116 |           </AnimatePresence>
117 |         </motion.div>
118 |       ))}
119 |     </div>
120 |   );
121 | }
```

components/KBDashboard.jsx
```
1 | 
2 | import React, { useEffect, useMemo, useState, useCallback } from "react";
3 | import dayjs from "dayjs";
4 | import { useAuth } from "../components/AuthContext"; // adjust path if needed
5 | import Gate from "./Gate"; // adjust path if needed
6 | 
7 | // Use environment variable for API base URL
8 | const API_BASE = process.env.NEXT_PUBLIC_API_BASE || "http://localhost:5000";
9 | 
10 | /**
11 |  * UI: Agent Knowledge Dashboard
12 |  * - Review solutions (send confirm email, promote to KB)
13 |  * - Manage KB drafts (publish, archive)
14 |  * - Handle feedback (resolve, triage)
15 |  * - Light analytics (counts & trends)
16 |  *
17 |  * Props
18 |  * - open: boolean — show/hide overlay
19 |  * - onClose: () => void
20 |  */
21 | export default function KBDashboard({ open, onClose }) {
22 |   const authedFetch = useAuthedFetch();
23 |   const [tab, setTab] = useState("review");
24 | 
25 |   // --- API endpoints (adjust if your backend uses different paths) ---
26 |   const API = useMemo(() => ({
27 |     solutions: `${API_BASE}/solutions`, // GET list; POST actions may be on /solutions/:id/*
28 |     solutionConfirm: (id) => `${API_BASE}/solutions/${id}/send_confirmation_email`,
29 |     articles: `${API_BASE}/kb/articles`, // GET list
30 |     promoteFromSolution: (id) => `${API_BASE}/solutions/${id}/promote`, // POST
31 |     publishArticle: (id) => `${API_BASE}/kb/articles/${id}/publish`,
32 |     archiveArticle: (id) => `${API_BASE}/kb/articles/${id}/archive`,
33 |     feedback: `${API_BASE}/kb/feedback`, // GET list
34 |     resolveFeedback: (id) => `${API_BASE}/kb/feedback/${id}/resolve`,
35 |     analytics: `${API_BASE}/kb/analytics`,
36 |   }), [API_BASE]);
37 | 
38 |   // --- State ---
39 |   const [loading, setLoading] = useState(false);
40 |   const [err, setErr] = useState("");
41 |   const [solutions, setSolutions] = useState([]);
42 |   const [articles, setArticles] = useState([]);
43 |   const [feedback, setFeedback] = useState([]);
44 |   const [metrics, setMetrics] = useState(null);
45 |   const [agentStats, setAgentStats] = useState([]);
46 | 
47 |   const [q, setQ] = useState(""); // search
48 |   const [statusFilter, setStatusFilter] = useState("all");
49 | 
50 |   // --- Data fetchers ---
51 |   const refresh = useCallback(async () => {
52 |     if (!open) return;
53 |     setLoading(true); setErr("");
54 |     try {
55 |       const [solR, artR, fbR, anR] = await Promise.all([
56 |         // solutions: prefer statuses relevant to review
57 |         authedFetch(`${API.solutions}?status=draft,sent_for_confirm,confirmed_by_user,published&limit=50`),
58 |         authedFetch(`${API.articles}?status=draft,published,archived&limit=50`),
59 |         authedFetch(`${API.feedback}?limit=50`),
60 |         authedFetch(API.analytics).catch(() => null),
61 |       ]);
62 |       const sol = (await solR.json()) || [];
63 |       const art = (await artR.json()) || [];
64 |       const fb  = (await fbR.json())  || [];
65 |       const mx  = anR ? await anR.json() : null;
66 |       setSolutions(Array.isArray(sol) ? sol : (sol.items || []));
67 |       setArticles(Array.isArray(art) ? art : (art.items || []));
68 |       setFeedback(Array.isArray(fb) ? fb : (fb.items || []));
69 |       setMetrics(mx);
70 |     } catch (e) {
71 |       setErr(`Failed to load: ${e.message || e}`);
72 |     } finally {
73 |       setLoading(false);
74 |     }
75 |   }, [API, authedFetch, open]);
76 | 
77 | 
78 |   // Fetch agent analytics when analytics tab is loaded
79 |   useEffect(() => {
80 |     if (tab !== 'analytics' || !open) return;
81 |     (async () => {
82 |       try {
83 |         const res = await authedFetch(`${API_BASE}/kb/analytics/agents`);
84 |         const data = await res.json();
85 |         setAgentStats(Array.isArray(data.agents) ? data.agents : []);
86 |       } catch (e) {
87 |         setAgentStats([]);
88 |       }
89 |     })();
90 |   }, [tab, open, authedFetch]);
91 | 
92 |   // --- Actions ---
93 |   const sendConfirmEmail = async (solution) => {
94 |     try {
95 |       const r = await authedFetch(API.solutionConfirm(solution.id), { method: 'POST' });
96 |       if (!r.ok) throw new Error((await r.json()).error || 'Failed');
97 |       toast(`Confirmation email queued for solution #${solution.id}`);
98 |     } catch (e) { toast(`Error: ${e.message || e}`, true); }
99 |   };
100 | 
101 |   const promoteToKB = async (solution) => {
102 |     try {
103 |   // Copy confirm link helper (component scope)
104 |   const copyConfirmLink = async (s) => {
105 |     const url =
106 |       s.confirm_url ||
107 |       (s.confirm_token
108 |         ? `${window.location.origin}/solutions/confirm?token=${encodeURIComponent(s.confirm_token)}`
109 |         : "");
110 |     if (!url) return toast("No confirm link available", true);
111 |     await navigator.clipboard.writeText(url);
112 |     toast("Confirm link copied");
113 |   };
114 |       const r = await authedFetch(API.promoteFromSolution(solution.id), {
115 |         method: 'POST', headers: { 'Content-Type': 'application/json' }
116 |       });
117 |       const data = await r.json();
118 |       if (!r.ok) throw new Error(data.error || 'Failed');
119 |       toast(`Promoted to KB as article #${data.article_id || ''}`);
120 |       refresh();
121 |     } catch (e) { toast(`Error: ${e.message || e}`, true); }
122 |   };
123 | 
124 |   const publishArticle = async (article) => {
125 |     try {
126 |       const r = await authedFetch(API.publishArticle(article.id), { method: 'POST' });
127 |       const data = await r.json();
128 |       if (!r.ok) throw new Error(data.error || 'Failed');
129 |       toast(`Published article #${article.id}`);
130 |       refresh();
131 |     } catch (e) { toast(`Error: ${e.message || e}`, true); }
132 |   };
133 | 
134 |   const archiveArticle = async (article) => {
135 |     try {
136 |       const r = await authedFetch(API.archiveArticle(article.id), { method: 'POST' });
137 |       const data = await r.json();
138 |       if (!r.ok) throw new Error(data.error || 'Failed');
139 |       toast(`Archived article #${article.id}`);
140 |       refresh();
141 |     } catch (e) { toast(`Error: ${e.message || e}`, true); }
142 |   };
143 | 
144 |   const resolveFeedback = async (f) => {
145 |     try {
146 |       const r = await authedFetch(API.resolveFeedback(f.id), { method: 'POST' });
147 |       const data = await r.json();
148 |       if (!r.ok) throw new Error(data.error || 'Failed');
149 |       toast(`Resolved feedback #${f.id}`);
150 |       refresh();
151 |     } catch (e) { toast(`Error: ${e.message || e}`, true); }
152 |   };
153 | 
154 |   // --- Derived filtered lists ---
155 |   const filteredSolutions = useMemo(() => {
156 |     const term = q.toLowerCase();
157 |     return solutions.filter(s => {
158 |       const hit = !term ||
159 |         String(s.text || '').toLowerCase().includes(term) ||
160 |         String(s.ticket_id || '').toLowerCase().includes(term) ||
161 |         String(s.status || '').toLowerCase().includes(term);
162 |       const statusOk = statusFilter === 'all' || String(s.status || '').toLowerCase() === statusFilter;
163 |       return hit && statusOk;
164 |     });
165 |   }, [solutions, q, statusFilter]);
166 | 
167 |   const filteredArticles = useMemo(() => {
168 |     const term = q.toLowerCase();
169 |     return articles.filter(a => {
170 |       const hit = !term ||
171 |         String(a.title || '').toLowerCase().includes(term) ||
172 |         String(a.problem_summary || '').toLowerCase().includes(term) ||
173 |         String(a.status || '').toLowerCase().includes(term);
174 |       return hit && (statusFilter === 'all' || String(a.status || '').toLowerCase() === statusFilter);
175 |     });
176 |   }, [articles, q, statusFilter]);
177 | 
178 |   const filteredFeedback = useMemo(() => {
179 |     const term = q.toLowerCase();
180 |     return feedback.filter(f => {
181 |       const hit = !term ||
182 |         String(f.comment || '').toLowerCase().includes(term) ||
183 |         String(f.feedback_type || '').toLowerCase().includes(term) ||
184 |         String(f.user_email || '').toLowerCase().includes(term);
185 |       const st = f.resolved_at ? 'resolved' : 'open';
186 |       return hit && (statusFilter === 'all' || st === statusFilter);
187 |     });
188 |   }, [feedback, q, statusFilter]);
189 | 
190 |   if (!open) return null;
191 | 
192 |   return (
193 |     <div className="fixed inset-0 z-[1000] bg-black/40 backdrop-blur-sm flex items-center justify-center p-4" role="dialog" aria-modal>
194 |       <div className="bg-white dark:bg-gray-900 w-full max-w-6xl rounded-2xl shadow-2xl border border-gray-200 dark:border-gray-800 overflow-hidden">
195 |         {/* Header */}
196 |         <div className="flex items-center justify-between px-5 py-3 border-b border-gray-200 dark:border-gray-800 bg-gray-50/70 dark:bg-gray-800/50">
197 |           <div className="flex items-center gap-2">
198 |             <span className="text-xl">📚</span>
199 |             <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100">Knowledge Dashboard</h2>
200 |           </div>
201 |           <button onClick={onClose} className="px-3 py-1 rounded-full text-sm bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 hover:bg-gray-300 dark:hover:bg-gray-600">Close</button>
202 |         </div>
203 | 
204 |         {/* Controls */}
205 |         <div className="flex items-center gap-3 px-5 py-3 border-b border-gray-200 dark:border-gray-800">
206 |           <div className="flex gap-1 rounded-xl bg-gray-100 dark:bg-gray-800 p-1">
207 |             {[
208 |               { id: 'review', label: 'Review' },
209 |               { id: 'feedback', label: 'Feedback' },
210 |               { id: 'analytics', label: 'Analytics' },
211 |             ].map(t => (
212 |               <button key={t.id} onClick={() => setTab(t.id)}
213 |                 className={`px-3 py-1 rounded-lg text-sm ${tab===t.id? 'bg-white dark:bg-gray-700 shadow text-gray-900 dark:text-gray-100':'text-gray-600 dark:text-gray-300'}`}>{t.label}</button>
214 |             ))}
215 |           </div>
216 |           <input value={q} onChange={e=>setQ(e.target.value)} placeholder="Search…" className="flex-1 min-w-[120px] px-3 py-2 rounded-lg ring-1 ring-gray-300 dark:ring-gray-700 bg-white dark:bg-gray-900 text-sm" />
217 |           <select value={statusFilter} onChange={(e)=>setStatusFilter(e.target.value)} className="px-3 py-2 rounded-lg ring-1 ring-gray-300 dark:ring-gray-700 bg-white dark:bg-gray-900 text-sm">
218 |             <option value="all">All</option>
219 |             <option value="draft">Draft</option>
220 |             <option value="sent_for_confirm">Sent for confirm</option>
221 |             <option value="confirmed_by_user">Confirmed</option>
222 |             <option value="published">Published</option>
223 |             <option value="open">Open (feedback)</option>
224 |             <option value="resolved">Resolved (feedback)</option>
225 |           </select>
226 |           <button onClick={refresh} disabled={loading} className="px-3 py-2 rounded-lg bg-indigo-600 text-white text-sm disabled:opacity-50">Refresh</button>
227 |         </div>
228 | 
229 |         {err && <div className="px-5 py-2 text-sm text-red-600">{err}</div>}
230 | 
231 |         {/* Content */}
232 |         <div className="p-5 max-h-[70vh] overflow-y-auto">
233 |           {tab === 'review' && (
234 |             <div className="grid grid-cols-1 lg:grid-cols-2 gap-5">
235 |               {/* Solutions */}
236 |               <section className="rounded-2xl border border-gray-200 dark:border-gray-800 p-4">
237 |                 <header className="flex items-center justify-between mb-3">
238 |                   <h3 className="font-semibold text-gray-900 dark:text-gray-100">Solutions</h3>
239 |                   <span className="text-xs text-gray-500">{filteredSolutions.length} shown</span>
240 |                 </header>
241 |                 <div className="overflow-x-auto">
242 |                   <table className="w-full text-sm">
243 |                     <thead className="text-left text-gray-500">
244 |                       <tr>
245 |                         <th className="py-2 pr-3">ID</th>
246 |                         <th className="py-2 pr-3">Ticket</th>
247 |                         <th className="py-2 pr-3">Status</th>
248 |                         <th className="py-2 pr-3">Agent</th>
249 |                         <th className="py-2 pr-3">Actions</th>
250 |                       </tr>
251 |                     </thead>
252 |                     <tbody>
253 |                       {filteredSolutions.map(s => (
254 |                         <tr key={s.id} className="border-t border-gray-100 dark:border-gray-800 align-top">
255 |                           <td className="py-2 pr-3">#{s.id}</td>
256 |                           <td className="py-2 pr-3">
257 |                             <div className="text-gray-800 dark:text-gray-100 font-medium">{s.ticket_id}</div>
258 |                             <div className="text-xs text-gray-500 line-clamp-2 max-w-[28ch]">{s.text}</div>
259 |                             <div className="text-[11px] text-gray-500 mt-1">
260 |                               {s.sent_for_confirm_at && <>Sent {fmt(s.sent_for_confirm_at)}</>}
261 |                               {s.confirmed_at && (
262 |                                 <span className="ml-2 text-emerald-600">
263 |                                   Confirmed {fmt(s.confirmed_at)}
264 |                                 </span>
265 |                               )}
266 |                             </div>
267 |                           </td>
268 |                           <td className="py-2 pr-3">
269 |                             <StatusBadge value={s.status} />
270 |                           </td>
271 |                           <td className="py-2 pr-3">{s.owner || s.agent || s.user_email || '-'}</td>
272 |                           <td className="py-2 pr-3">
273 |                             <div className="flex flex-wrap gap-2">
274 |                               <Gate roles={["L2","L3","MANAGER"]}>
275 |                                 {['draft','sent_for_confirm'].includes(String(s.status).toLowerCase()) && (
276 |                                   <button className="btn-subtle" onClick={()=>sendConfirmEmail(s)}>✉️ Send confirm</button>
277 |                                 )}
278 |                                 {(s.confirm_url || s.confirm_token) && (
279 |                                   <button className="btn-subtle" onClick={()=>copyConfirmLink(s)}>🔗 Copy link</button>
280 |                                 )}
281 |                                 <button className="btn-subtle" onClick={()=>promoteToKB(s)}>⬆️ Promote</button>
282 |                               </Gate>
283 |                             </div>
284 |                           </td>
285 |                         </tr>
286 |                       ))}
287 |                       {filteredSolutions.length===0 && (
288 |                         <tr><td colSpan={5} className="py-6 text-center text-gray-500">No solutions found.</td></tr>
289 |                       )}
290 |                     </tbody>
291 |                   </table>
292 |                 </div>
293 |               </section>
294 | 
295 |               {/* Articles */}
296 |               <section className="rounded-2xl border border-gray-200 dark:border-gray-800 p-4">
297 |                 <header className="flex items-center justify-between mb-3">
298 |                   <h3 className="font-semibold text-gray-900 dark:text-gray-100">KB Articles</h3>
299 |                   <span className="text-xs text-gray-500">{filteredArticles.length} shown</span>
300 |                 </header>
301 |                 <div className="overflow-x-auto">
302 |                   <table className="w-full text-sm">
303 |                     <thead className="text-left text-gray-500">
304 |                       <tr>
305 |                         <th className="py-2 pr-3">ID</th>
306 |                         <th className="py-2 pr-3">Title</th>
307 |                         <th className="py-2 pr-3">Status</th>
308 |                         <th className="py-2 pr-3">Approved By</th>
309 |                         <th className="py-2 pr-3">Actions</th>
310 |                       </tr>
311 |                     </thead>
312 |                     <tbody>
313 |                       {filteredArticles.map(a => (
314 |                         <tr key={a.id} className="border-t border-gray-100 dark:border-gray-800 align-top">
315 |                           <td className="py-2 pr-3">#{a.id}</td>
316 |                           <td className="py-2 pr-3">
317 |                             <div className="text-gray-800 dark:text-gray-100 font-medium line-clamp-1">{a.title || '(untitled)'}</div>
318 |                             <div className="text-xs text-gray-500 line-clamp-2 max-w-[40ch]">{a.problem_summary}</div>
319 |                           </td>
320 |                           <td className="py-2 pr-3"><StatusBadge value={a.status} /></td>
321 |                           <td className="py-2 pr-3">{a.approved_by || '-'}</td>
322 |                           <td className="py-2 pr-3">
323 |                             <div className="flex flex-wrap gap-2">
324 |                               <Gate roles={["L2","L3","MANAGER"]}>
325 |                                 {String(a.status).toLowerCase()==='draft' && (
326 |                                   <button className="btn-subtle" onClick={()=>publishArticle(a)}>🚀 Publish</button>
327 |                                 )}
328 |                                 {String(a.status).toLowerCase()==='published' && (
329 |                                   <button className="btn-subtle" onClick={()=>archiveArticle(a)}>🗄️ Archive</button>
330 |                                 )}
331 |                               </Gate>
332 |                             </div>
333 |                           </td>
334 |                         </tr>
335 |                       ))}
336 |                       {filteredArticles.length===0 && (
337 |                         <tr><td colSpan={5} className="py-6 text-center text-gray-500">No articles found.</td></tr>
338 |                       )}
339 |                     </tbody>
340 |                   </table>
341 |                 </div>
342 |               </section>
343 |             </div>
344 |           )}
345 | 
346 |           {tab === 'feedback' && (
347 |             <section className="rounded-2xl border border-gray-200 dark:border-gray-800 p-4">
348 |               <header className="flex items-center justify-between mb-3">
349 |                 <h3 className="font-semibold text-gray-900 dark:text-gray-100">Feedback Inbox</h3>
350 |                 <span className="text-xs text-gray-500">{filteredFeedback.length} shown</span>
351 |               </header>
352 |               <div className="overflow-x-auto">
353 |                 <table className="w-full text-sm">
354 |                   <thead className="text-left text-gray-500">
355 |                     <tr>
356 |                       <th className="py-2 pr-3">ID</th>
357 |                       <th className="py-2 pr-3">Article</th>
358 |                       <th className="py-2 pr-3">Type</th>
359 |                       <th className="py-2 pr-3">Rating</th>
360 |                       <th className="py-2 pr-3">Comment</th>
361 |                       <th className="py-2 pr-3">When</th>
362 |                       <th className="py-2 pr-3">Actions</th>
363 |                     </tr>
364 |                   </thead>
365 |                   <tbody>
366 |                     {filteredFeedback.map(f => {
367 |                       const st = f.resolved_at ? 'resolved' : 'open';
368 |                       return (
369 |                         <tr key={f.id} className="border-t border-gray-100 dark:border-gray-800 align-top">
370 |                           <td className="py-2 pr-3">#{f.id}</td>
371 |                           <td className="py-2 pr-3">#{f.kb_article_id}</td>
372 |                           <td className="py-2 pr-3"><StatusBadge value={f.feedback_type} /></td>
373 |                           <td className="py-2 pr-3">{f.rating ?? '-'}</td>
374 |                           <td className="py-2 pr-3 max-w-[40ch]"><div className="line-clamp-2 text-gray-800 dark:text-gray-100">{f.comment}</div></td>
375 |                           <td className="py-2 pr-3 text-gray-500">{fmt(f.created_at)}</td>
376 |                           <td className="py-2 pr-3">
377 |                             <div className="flex flex-wrap gap-2">
378 |                               {st === 'open' ? (
379 |                                 <button className="btn-subtle" onClick={()=>resolveFeedback(f)}>✅ Resolve</button>
380 |                               ) : (
381 |                                 <span className="text-xs text-gray-400">Resolved</span>
382 |                               )}
383 |                             </div>
384 |                           </td>
385 |                         </tr>
386 |                       );
387 |                     })}
388 |                     {filteredFeedback.length===0 && (
389 |                       <tr><td colSpan={7} className="py-6 text-center text-gray-500">No feedback yet.</td></tr>
390 |                     )}
391 |                   </tbody>
392 |                 </table>
393 |               </div>
394 |             </section>
395 |           )}
396 | 
397 |           {tab === 'analytics' && (
398 |             <section className="grid grid-cols-1 md:grid-cols-3 gap-4">
399 |               <KPI title="Solutions awaiting confirm" value={solutions.filter(s=>String(s.status).toLowerCase()==='sent_for_confirm').length} />
400 |               <KPI title="Draft KB articles" value={articles.filter(a=>String(a.status).toLowerCase()==='draft').length} />
401 |               <KPI title="Published KB articles" value={articles.filter(a=>String(a.status).toLowerCase()==='published').length} />
402 |               <KPI title="Open feedback" value={feedback.filter(f=>!f.resolved_at).length} />
403 |               <KPI title="Avg. rating (last 50)" value={avg(feedback.map(f=>Number(f.rating)).filter(Boolean)).toFixed(2)} />
404 |               <KPI title="Total confirmations" value={solutions.filter(s=>String(s.status).toLowerCase()==='confirmed_by_user').length} />
405 |               <KPI title="Confirm rate" value={confirmRate(solutions)} />
406 |               <KPI title="Avg time to confirm" value={avgHoursToConfirm(solutions)} />
407 | 
408 |               {/* Agent analytics table */}
409 |               <div className="md:col-span-3 rounded-2xl border border-gray-200 dark:border-gray-800 p-4 mt-4">
410 |                 <h4 className="font-semibold text-gray-900 dark:text-gray-100 mb-2">Agent Activity</h4>
411 |                 <div className="overflow-x-auto">
412 |                   <table className="w-full text-sm">
413 |                     <thead className="text-left text-gray-500">
414 |                       <tr>
415 |                         <th className="py-2 pr-3">Agent</th>
416 |                         <th className="py-2 pr-3">Solved</th>
417 |                         <th className="py-2 pr-3">Active</th>
418 |                       </tr>
419 |                     </thead>
420 |                     <tbody>
421 |                       {agentStats.length > 0 ? agentStats.map(a => (
422 |                         <tr key={a.agent_id} className="border-t border-gray-100 dark:border-gray-800 align-top">
423 |                           <td className="py-2 pr-3">{a.agent_id}</td>
424 |                           <td className="py-2 pr-3">{a.solved}</td>
425 |                           <td className="py-2 pr-3">{a.active}</td>
426 |                         </tr>
427 |                       )) : (
428 |                         <tr><td colSpan={3} className="py-6 text-center text-gray-500">No agent data.</td></tr>
429 |                       )}
430 |                     </tbody>
431 |                   </table>
432 |                 </div>
433 |               </div>
434 | 
435 |               {/* Simple trend (client-side) */}
436 |               <div className="md:col-span-3 rounded-2xl border border-gray-200 dark:border-gray-800 p-4">
437 |                 <h4 className="font-semibold text-gray-900 dark:text-gray-100 mb-2">7-day activity (client-side)</h4>
438 |                 <MiniSparkline series={build7DaySeries(solutions, articles, feedback)} />
439 |               </div>
440 |             </section>
441 |           )}
442 |         </div>
443 |       </div>
444 |     </div>
445 |   );
446 | }
447 | 
448 | // Helper for agent analytics fetch
449 | function authHeaders() {
450 |   const authToken = (typeof window !== 'undefined' && window.localStorage && window.localStorage.getItem('token')) || '';
451 |   return authToken ? { Authorization: `Bearer ${authToken}` } : {};
452 | }
453 | 
454 | // --- Helpers ---
455 | function useAuthedFetch(){
456 |   const { authToken } = useAuth();
457 |   return useCallback((url, opts={}) => {
458 |     const headers = { ...(opts.headers||{}), ...(authToken ? { Authorization: `Bearer ${authToken}` } : {}) };
459 |     return fetch(url, { ...opts, headers, credentials: 'include' });
460 |   }, [authToken]);
461 | }
462 | 
463 | function fmt(ts){
464 |   if (!ts) return '-';
465 |   const d = dayjs(ts);
466 |   return d.isValid() ? d.fromNow?.() || d.format('YYYY-MM-DD HH:mm') : String(ts);
467 | }
468 | 
469 | function avg(arr){
470 |   if (!arr.length) return 0;
471 |   return arr.reduce((a,b)=>a+b,0)/arr.length;
472 | }
473 | 
474 | function build7DaySeries(solutions, articles, feedback){
475 |   const buckets = {}; // yyyy-mm-dd -> counts
476 |   const mark = (ts, key) => {
477 |     const d = dayjs(ts).format('YYYY-MM-DD');
478 |     buckets[d] = buckets[d] || { s:0, a:0, f:0 };
479 |     buckets[d][key]++;
480 |   };
481 |   solutions.forEach(s=>mark(s.updated_at || s.created_at, 's'));
482 |   articles.forEach(a=>mark(a.updated_at || a.created_at, 'a'));
483 |   feedback.forEach(f=>mark(f.created_at, 'f'));
484 |   const days = [...Array(7)].map((_,i)=> dayjs().subtract(6-i,'day').format('YYYY-MM-DD'));
485 |   return days.map(d => ({ day: d.slice(5), solutions: (buckets[d]?.s)||0, articles: (buckets[d]?.a)||0, feedback: (buckets[d]?.f)||0 }));
486 | }
487 | 
488 | function StatusBadge({ value }){
489 |   const v = String(value||'').toLowerCase();
490 |   const map = {
491 |     draft: 'bg-blue-100 text-blue-800',
492 |     sent_for_confirm: 'bg-yellow-100 text-yellow-800',
493 |     confirmed_by_user: 'bg-green-100 text-green-800',
494 |     published: 'bg-purple-100 text-purple-800',
495 |     archived: 'bg-gray-200 text-gray-700',
496 |     open: 'bg-orange-100 text-orange-800',
497 |     resolved: 'bg-emerald-100 text-emerald-800',
498 |     helpful: 'bg-emerald-100 text-emerald-700',
499 |     not_helpful: 'bg-rose-100 text-rose-700',
500 |     issue: 'bg-amber-100 text-amber-700',
501 |   };
502 |   const cls = map[v] || 'bg-gray-100 text-gray-700';
503 |   return <span className={`px-2.5 py-0.5 rounded-full text-xs font-semibold ${cls}`}>{value}</span>;
504 | }
505 | 
506 | function KPI({ title, value }){
507 |   return (
508 |     <div className="rounded-2xl border border-gray-200 dark:border-gray-800 p-4">
509 |       <div className="text-xs uppercase tracking-wide text-gray-500">{title}</div>
510 |       <div className="text-2xl font-bold text-gray-900 dark:text-gray-100 mt-1">{Number.isFinite(value)? value : (value ?? '-') }</div>
511 |     </div>
512 |   );
513 | }
514 | 
515 | function MiniSparkline({ series }){
516 |   // very light bar-style sparkline using pure divs
517 |   const max = Math.max(1, ...series.map(p => p.solutions + p.articles + p.feedback));
518 |   return (
519 |     <div className="flex items-end gap-2 h-24">
520 |       {series.map((p,i)=>{
521 |         const v = p.solutions + p.articles + p.feedback;
522 |         const h = Math.round((v/max)*96);
523 |         return (
524 |           <div key={i} className="flex flex-col items-center">
525 |             <div className="w-4 bg-indigo-400 rounded-t" style={{ height: h }} />
526 |             <div className="text-[10px] text-gray-500 mt-1">{p.day}</div>
527 |           </div>
528 |         );
529 |       })}
530 |     </div>
531 |   );
532 | }
533 | 
534 | function confirmRate(solutions){
535 |   const status = (s) => String(s?.status || "").toLowerCase();
536 |   const sent = solutions.filter(s =>
537 |     ["sent_for_confirm", "confirmed_by_user", "published"].includes(status(s))
538 |   ).length;
539 | 
540 |   const confirmed = solutions.filter(s =>
541 |     ["confirmed_by_user", "published"].includes(status(s))
542 |   ).length;
543 | 
544 |   if (!sent) return "—";
545 |   return `${Math.round((confirmed / sent) * 100)}%`;
546 | }
547 | 
548 | function avgHoursToConfirm(solutions){
549 |   const diffs = solutions.map(s => {
550 |     const started = s.sent_for_confirm_at || s.created_at;
551 |     const done = s.confirmed_at;
552 |     if (!started || !done) return null;
553 |     const minutes = dayjs(done).diff(dayjs(started), "minute");
554 |     return minutes >= 0 ? minutes / 60 : null;
555 |   }).filter(v => v != null);
556 | 
557 |   if (!diffs.length) return "—";
558 |   return `${(diffs.reduce((a,b)=>a+b,0) / diffs.length).toFixed(1)}h`;
559 | }
560 | 
561 | 
562 | function toast(msg, isErr){
563 |   // tiny inline toast; replace with your own system if present
564 |   const el = document.createElement('div');
565 |   el.textContent = msg;
566 |   el.className = `fixed z-[1100] bottom-4 left-1/2 -translate-x-1/2 px-3 py-2 rounded-lg text-sm shadow-lg ${isErr? 'bg-rose-600 text-white':'bg-gray-900 text-white'}`;
567 |   document.body.appendChild(el);
568 |   setTimeout(()=>{ el.remove(); }, 2200);
569 | }
570 | 
571 | /*
572 |  * Minimal Tailwind button class used above
573 |  * .btn-subtle {
574 |  *   @apply px-2.5 py-1 rounded-lg ring-1 ring-gray-300 dark:ring-gray-700 bg-white dark:bg-gray-900 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-800 dark:text-gray-100 text-xs;
575 |  * }
576 |  */
```

components/LoadingBot.jsx
```
1 | import React, { useState } from 'react';
2 | import 'bootstrap-icons/font/bootstrap-icons.css';
3 | 
4 | export default function LoadingBot() {
5 |   const [clicks, setClicks] = useState(0);
6 |   const [wave, setWave] = useState(false);
7 |   const handleClick = () => {
8 |     setClicks(c => c + 1);
9 |     setWave(true);
10 |     setTimeout(() => setWave(false), 700);
11 |   };
12 |   let icon = 'bi-robot';
13 |   let text = 'Loading tickets…';
14 |   if (wave && clicks < 3) {
15 |     icon = 'bi-hand-thumbs-up';
16 |     text = 'Hi!';
17 |   } else if (clicks >= 3) {
18 |     icon = 'bi-emoji-frown';
19 |     text = 'Why so many clicks?';
20 |   }
21 |   return (
22 |     <div className="flex flex-col items-center justify-center select-none">
23 |       <div className="relative w-24 h-24 mb-4">
24 |         <div className="absolute left-0 top-0 w-24 h-24 animate-bot-walk cursor-pointer" onClick={handleClick} title="Click me!">
25 |           <i className={`bi ${icon} text-indigo-500 text-7xl`} style={{ filter: 'drop-shadow(0 2px 4px #6366f1)' }} />
26 |         </div>
27 |       </div>
28 |       <span className="text-2xl font-extrabold tracking-wide bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 bg-clip-text text-transparent drop-shadow-lg animate-pulse">
29 |         {text}
30 |       </span>
31 |       <style>{`
32 |         @keyframes bot-walk {
33 |           0%   { left: 0; }
34 |           50%  { left: 48px; }
35 |           100% { left: 0; }
36 |         }
37 |         .animate-bot-walk {
38 |           position: absolute;
39 |           animation: bot-walk 1.6s infinite linear;
40 |         }
41 |       `}</style>
42 |     </div>
43 |   );
44 | }
```

components/MentionsPanel.jsx
```
1 | 
2 | 
3 | 
4 | import React, { useState } from 'react';
5 | import { useMentions } from '../hooks/useMentions';
6 | 
7 | // Semantic color map for status
8 | const statusColorMap = {
9 |   open: 'bg-green-100 text-green-800',
10 |   pending: 'bg-yellow-100 text-yellow-800',
11 |   escalated: 'bg-red-100 text-red-800',
12 |   closed: 'bg-gray-200 text-gray-700',
13 | };
14 | 
15 | // Minutes threshold for "new" highlight
16 | const NEW_MINUTES = 10;
17 | 
18 | function isNewMention(timestamp) {
19 |   if (!timestamp) return false;
20 |   const now = Date.now();
21 |   const mentionTime = new Date(timestamp).getTime();
22 |   return (now - mentionTime) < NEW_MINUTES * 60 * 1000;
23 | }
24 | 
25 | export default function MentionsPanel({ agentId, onSelect, selectedId }) {
26 |   const { mentions, loading, error } = useMentions(agentId);
27 |   const [filter, setFilter] = useState('');
28 | 
29 |   // Ensure mentions is always an array
30 |   const safeMentions = Array.isArray(mentions) ? mentions : [];
31 |   // Filter mentions by ticket ID or subject
32 |   const filteredMentions = safeMentions.filter(m =>
33 |     m.subject?.toLowerCase().includes(filter.toLowerCase()) ||
34 |     m.ticket_id?.toLowerCase().includes(filter.toLowerCase())
35 |   );
36 | 
37 |   // Skeleton loader
38 |   const skeletons = Array.from({ length: 4 });
39 | 
40 |   return (
41 |     <div style={{ width: 350, minWidth: 350, maxWidth: 350, borderRight: '1px solid #eee', padding: 16 }}>
42 |       <div style={{ fontWeight: 'bold', fontSize: 18, marginBottom: 8 }}>
43 |         @Mentions
44 |         <span style={{
45 |           background: '#4f46e5',
46 |           color: 'white',
47 |           fontSize: 12,
48 |           borderRadius: '999px',
49 |           padding: '2px 8px',
50 |           marginLeft: 8
51 |         }}>
52 |           {filteredMentions.length}
53 |         </span>
54 |       </div>
55 |       <input
56 |         type="search"
57 |         placeholder="Search mentions…"
58 |         className="w-full p-2 mb-2 border rounded"
59 |         value={filter}
60 |         onChange={e => setFilter(e.target.value)}
61 |       />
62 |       {loading ? (
63 |         <ul className="ticket-list" style={{ listStyle: 'none', padding: 0 }}>
64 |           {skeletons.map((_, i) => (
65 |             <li key={i} className="p-3 mb-2 bg-gray-100 rounded animate-pulse" style={{ height: 48 }}></li>
66 |           ))}
67 |         </ul>
68 |       ) : error ? (
69 |         <div>Error loading mentions.</div>
70 |       ) : filteredMentions.length === 0 ? (
71 |         <div className="flex flex-col items-center justify-center text-center py-8">
72 |           <i className="bi bi-emoji-smile text-4xl text-indigo-400 mb-2"></i>
73 |           <div className="font-semibold mb-1">You have no pending mentions.</div>
74 |           <div className="text-sm text-gray-500">Sit back and relax—or check All Tickets.</div>
75 |         </div>
76 |       ) : (
77 |         <ul className="ticket-list" style={{ listStyle: 'none', padding: 0 }}>
78 |           {filteredMentions.map(m => (
79 |             <li
80 |               key={m.ticket_id}
81 |               className={`p-3 mb-2 bg-white rounded shadow hover:shadow-md cursor-pointer flex justify-between items-center ${selectedId === m.ticket_id ? 'active' : ''} ${isNewMention(m.timestamp) ? 'bg-indigo-50' : ''}`}
82 |               onClick={() => onSelect(m.ticket_id)}
83 |               title={m.subject}
84 |               style={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}
85 |             >
86 |               <div className="flex items-center" style={{ flex: 1, minWidth: 0 }}>
87 |                 <i className="bi bi-bell-fill text-indigo-500 mr-2" style={{ fontSize: 18 }}></i>
88 |                 <span
89 |                   style={{
90 |                     fontWeight: 'bold',
91 |                     overflow: 'hidden',
92 |                     textOverflow: 'ellipsis',
93 |                     whiteSpace: 'nowrap',
94 |                     display: 'inline-block',
95 |                     maxWidth: 120
96 |                   }}
97 |                   title={m.subject}
98 |                 >
99 |                   {m.subject}
100 |                 </span>
101 |               </div>
102 |               <span className={`px-2 py-1 rounded-full text-xs ml-2 ${statusColorMap[m.status] || 'bg-gray-200 text-gray-700'}`}>{m.status}</span>
103 |             </li>
104 |           ))}
105 |         </ul>
106 |       )}
107 |     </div>
108 |   );
109 | }
```

components/ProfileDropdown.jsx
```
1 | import React, { useState, useRef } from "react";
2 | import { useAuth } from "./AuthContext";
3 | 
4 | export default function ProfileDropdown() {
5 |   const { agent, logout } = useAuth();
6 |   const [open, setOpen] = useState(false);
7 |   const ref = useRef();
8 | 
9 |   // Close dropdown on outside click
10 |   React.useEffect(() => {
11 |     function handleClick(e) {
12 |       if (ref.current && !ref.current.contains(e.target)) setOpen(false);
13 |     }
14 |     if (open) document.addEventListener("mousedown", handleClick);
15 |     return () => document.removeEventListener("mousedown", handleClick);
16 |   }, [open]);
17 | 
18 |   if (!agent) return null;
19 | 
20 |   return (
21 |     <div className="relative ml-2" ref={ref}>
22 |       <button
23 |         className="flex items-center px-2 py-1 rounded hover:bg-gray-100 dark:hover:bg-gray-800 border border-gray-200 dark:border-gray-700 text-sm"
24 |         onClick={() => setOpen((v) => !v)}
25 |         aria-label="Profile menu"
26 |       >
27 |         <span className="bi bi-person-circle text-xl mr-1" />
28 |         <span className="hidden sm:inline font-medium max-w-[100px] truncate">{agent.name || agent.email}</span>
29 |         <span className="ml-1 bi bi-caret-down-fill text-xs" />
30 |       </button>
31 |       {open && (
32 |         <div className="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded shadow-lg z-50">
33 |           <div className="px-4 py-2 text-sm text-gray-700 dark:text-gray-200 border-b dark:border-gray-700">
34 |             <div className="font-semibold">{agent.name || agent.email}</div>
35 |             <div className="text-xs text-gray-500 dark:text-gray-400">{agent.role}</div>
36 |           </div>
37 |           <button
38 |             className="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 dark:hover:bg-gray-800"
39 |             onClick={logout}
40 |           >
41 |             <span className="bi bi-box-arrow-right mr-2" />Sign out
42 |           </button>
43 |         </div>
44 |       )}
45 |     </div>
46 |   );
47 | }
```

components/Sidebar.jsx
```
1 | import React, { useState } from 'react';
2 | import MentionsPanel from './MentionsPanel';
3 | import { useMentions } from '../hooks/useMentions';
4 | import GroupedTickets from './GroupedTickets';
5 | import ThreadList from './ThreadList';
6 | 
7 | export default function Sidebar({
8 |   agentId,
9 |   onSelect,
10 |   selectedId,
11 |   threads,
12 |   departments = [],
13 |   useNewList = false
14 | }) {
15 |   const [view, setView] = useState('all');
16 |   const { mentions = [] } = useMentions(agentId) || {};
17 | 
18 |   return (
19 |   <div className="sidebar" style={{ width: 350, minWidth: 350, maxWidth: 350 }}>
20 |       <div className="tabs">
21 |         <button
22 |           className={view === 'all' ? 'active' : ''}
23 |           onClick={() => setView('all')}
24 |         >All Tickets</button>
25 |         <button
26 |           className={view === 'mentions' ? 'active' : ''}
27 |           onClick={() => setView('mentions')}
28 |         >
29 |           <span style={{ display: 'inline-flex', alignItems: 'center', gap: 6 }}>
30 |             @Mentions
31 |             {mentions.length > 0 && (
32 |               <span style={{
33 |                 background: '#ef4444',
34 |                 color: 'white',
35 |                 fontSize: 12,
36 |                 borderRadius: '999px',
37 |                 padding: '2px 7px',
38 |                 fontWeight: 'bold',
39 |                 marginLeft: 6,
40 |                 boxShadow: '0 1px 4px rgba(0,0,0,0.08)'
41 |               }}>{mentions.length}</span>
42 |             )}
43 |           </span>
44 |         </button>
45 |       </div>
46 |       {view === 'all' ? (
47 |         useNewList
48 |           ? <ThreadList
49 |               onSelect={onSelect}
50 |               threads={threads}
51 |               selectedId={selectedId}
52 |               departments={departments}
53 |             />
54 |           : <GroupedTickets threads={threads} onSelect={onSelect} selectedId={selectedId} />
55 |       ) : (
56 |         <MentionsPanel agentId={agentId} onSelect={onSelect} selectedId={selectedId} />
57 |       )}
58 |     </div>
59 |   );
60 | }
```

components/SupportInboxPlugin.jsx
```
1 | import React, { useState, useEffect } from 'react';
2 | import ProfileDropdown from './ProfileDropdown';
3 | import Sidebar from './Sidebar';
4 | import LoadingBot from './LoadingBot';
5 | import GroupedTickets from './GroupedTickets';
6 | import ChatHistory from './ChatHistory';
7 | import 'bootstrap-icons/font/bootstrap-icons.css';
8 | import { useAuth } from './AuthContext';
9 | 
10 | // Use environment variable for API base URL
11 | const API_BASE = process.env.NEXT_PUBLIC_API_BASE || "http://localhost:5000";
12 | 
13 | const authHeaders = () => {
14 |   try {
15 |     const t = localStorage.getItem('authToken');
16 |     return t ? { Authorization: `Bearer ${t}` } : {};
17 |   } catch {
18 |     return {};
19 |   }
20 | };
21 | 
22 | export default function SupportInboxPlugin() {
23 |   const [selectedId, setSelectedId] = useState(null);
24 |   // Stable onBack handler to avoid remounts
25 |   const handleBack = React.useCallback(() => setSelectedId(null), []);
26 |   const [dark, setDark] = useState(false);
27 |   const [threads, setThreads] = useState([]);
28 |   const [loading, setLoading] = useState(true);
29 |   const [departments, setDepartments] = useState([]);
30 |   const [error, setError] = useState(null);
31 |   // grab the logged-in agent from context
32 |   const { agent } = useAuth();
33 | 
34 |   useEffect(() => {
35 |      document.documentElement.classList.toggle('dark', dark);
36 |    }, [dark]);
37 | 
38 |   useEffect(() => {
39 |     setLoading(true);
40 |     fetch(`${API_BASE}/threads?limit=20&offset=0`, {
41 |       method: 'GET',
42 |       credentials: 'include',
43 |       headers: {
44 |         'Content-Type': 'application/json',
45 |         ...authHeaders(),
46 |       },
47 |     })
48 |       .then(res => {
49 |         if (!res.ok) throw new Error(`HTTP ${res.status}`);
50 |         return res.json();
51 |       })
52 |       .then(payload => {
53 |         const list = Array.isArray(payload)
54 |           ? payload
55 |           : (payload.threads || []);
56 |         setThreads(list);
57 |         setLoading(false);
58 |       })
59 |       .catch(err => {
60 |         setError(err);
61 |         setLoading(false);
62 |       });
63 |   }, []);
64 | 
65 |     // NEW: load departments for the dropdown/filter in the new list (inside Sidebar)
66 |   useEffect(() => { 
67 |     fetch(`${API_BASE}/departments`, {
68 |       method: 'GET',
69 |       credentials: 'include',
70 |       headers: {
71 |         'Content-Type': 'application/json',
72 |         ...authHeaders(),
73 |       },
74 |     })
75 |       .then(r => (r.ok ? r.json() : Promise.reject(r.status)))
76 |       .then(data => {
77 |         const list = Array.isArray(data) ? data : (data.departments || []);
78 |         setDepartments(list);
79 |       })
80 |       .catch(() => {});
81 |   }, []);
82 | 
83 |   useEffect(() => { console.log('DEPARTMENTS', departments); }, [departments]);
84 | 
85 | 
86 |   if (loading) {
87 |     return (
88 |       <div className="fixed inset-0 w-full h-full min-h-screen h-screen bg-gray-50 flex items-center justify-center">
89 |         <LoadingBot />
90 |       </div>
91 |     );
92 |   }
93 |   return (
94 |     <div
95 |       className="fixed inset-0 w-full h-full min-h-screen h-screen bg-gray-50 shadow-2xl overflow-auto grid grid-cols-[1fr_3fr] grid-rows-[auto_1fr_auto]"
96 |     >
97 |       {/* Sidebar with tabs */}
98 |       <div className="row-start-2 row-end-3 col-start-1 col-end-2 flex flex-col items-start h-full overflow-y-auto bg-white p-0">
99 |           <Sidebar
100 |           agentId={agent?.id}
101 |           onSelect={setSelectedId}
102 |           selectedId={selectedId}
103 |           threads={threads}
104 |           departments={departments}
105 |           useNewList={true}   // tell Sidebar to render the new Open Tickets UI via adapter
106 |         />
107 |       </div>
108 | 
109 |       {/* Main header (row 1, col 2) */}
110 |       <div className="col-start-2 row-start-1 row-end-2 border-b bg-white flex items-center justify-between px-6">
111 |         <div className="flex items-center">
112 |           {selectedId ? (
113 |             <>
114 |               {/* <button onClick={() => setSelectedId(null)} className="text-indigo-900">&larr;</button> */}
115 |               <h2 className="text-xl font-semibold ml-2 text-indigo-900">#{selectedId}</h2>
116 |             </>
117 |           ) : (
118 |             <div className="text-indigo-900">Select a ticket</div>
119 |           )}
120 |         </div>
121 |         <div className="flex items-center">
122 |           <button
123 |             onClick={() => setDark(d => !d)}
124 |             className="bg-white text-black dark:bg-black dark:text-white"
125 |             aria-label="Toggle dark mode"
126 |           >
127 |             {dark ? <i className="bi bi-sun" id="icon"></i> : <i className="bi bi-moon-stars" id="icon"></i>}
128 |           </button>
129 |           <ProfileDropdown />
130 |         </div>
131 |       </div>
132 | 
133 |       {/* Chat + Related container (row 2, col 2) */}
134 |       <div className="row-start-2 row-end-3 col-start-2 col-end-3 flex items-center justify-center h-full bg-transparent">
135 |         <div className="flex-1 bg-white p-6 shadow-lg h-full flex flex-col">
136 |           {selectedId ? (
137 |             <ChatHistory
138 |               threadId={selectedId}
139 |               onBack={handleBack}
140 |               className="flex-1"
141 |             />
142 |           ) : (
143 |             <div className="h-full flex items-center justify-center text-indigo-900">
144 |               No ticket selected
145 |             </div>  
146 |           )}
147 |         </div>
148 |       </div>
149 |     </div>
150 |   );
151 | }
```

components/ThreadList.jsx
```
1 | // Use environment variable for API base URL
2 | const API_BASE = process.env.NEXT_PUBLIC_API_BASE || "http://localhost:5000";
3 | // frontend/components/ThreadList.jsx
4 | import React, { useEffect, useState } from 'react';
5 | import Gate from './Gate';
6 | import { setTicketDepartment } from '../lib/api';
7 | import dayjs from 'dayjs';
8 | import relativeTime from 'dayjs/plugin/relativeTime';
9 | import { useAuth } from '../components/AuthContext';
10 | 
11 | dayjs.extend(relativeTime);
12 | 
13 | const FALLBACK_DEPTS = [
14 |   { id: 1, name: 'ERP' },
15 |   { id: 2, name: 'CRM' },
16 |   { id: 3, name: 'SRM' },
17 |   { id: 4, name: 'Network' },
18 |   { id: 5, name: 'Security' },
19 | ];
20 | 
21 | export default function ThreadList({
22 |   onSelect,
23 |   threads: threadsProp = [],
24 |   selectedId,
25 |   departments = [],
26 | }) {
27 |   const [threads, setThreads] = useState(threadsProp);
28 |   // No polling: only update thread list on mount/prop change or after ticket view
29 |   const [loading, setLoading] = useState(!threadsProp?.length);
30 |   const [error, setError] = useState(null);
31 |   const { token, agent } = useAuth();
32 | 
33 |   const [overrideOpen, setOverrideOpen] = useState({});     // { [id]: boolean }
34 |   const [overrideDept, setOverrideDept] = useState({});     // { [id]: number|null }
35 |   const [overrideReason, setOverrideReason] = useState({}); // { [id]: string }
36 |   const [saving, setSaving] = useState({});                 // { [id]: boolean }
37 | 
38 |   const [summaries, setSummaries] = useState({});
39 |   const [activeDeptId, setActiveDeptId] = useState('all');
40 | 
41 |   // Load threads if parent didn't supply them
42 |   useEffect(() => {
43 |     if (threadsProp?.length) {
44 |       setThreads(threadsProp);
45 |       setLoading(false);
46 |       return;
47 |     }
48 |     setLoading(true);
49 |     fetch(`${API_BASE}/threads?limit=20&offset=0`, {
50 |          method: 'GET',
51 |          credentials: 'include', // send HttpOnly cookie set by /login
52 |          headers: {
53 |           'Content-Type': 'application/json',
54 |           ...(token ? { Authorization: `Bearer ${token}` } : {}), // also send Bearer if we have it
55 |         },
56 |       })  
57 |       .then((res) => {
58 |         if (!res.ok) throw new Error(`HTTP ${res.status}`);
59 |         return res.json();
60 |       })
61 |       .then((payload) => {
62 |         const list = Array.isArray(payload) ? payload : payload.threads || [];
63 |         setThreads(list);
64 |       })
65 |       .catch((err) => setError(err.message || String(err)))
66 |       .finally(() => setLoading(false));
67 |   }, [threadsProp, token]);
68 | 
69 |   // (Optional) fetch short summaries for each ticket
70 |   useEffect(() => {
71 |     let cancelled = false;
72 |     async function run() {
73 |       const out = {};
74 |       for (const t of threads) {
75 |         try {
76 |           const resp = await fetch(`${process.env.NEXT_PUBLIC_API_BASE}/summarize`, {
77 |             method: 'POST',
78 |             headers: { 'Content-Type': 'application/json' },
79 |             body: JSON.stringify({ text: t.text || t.subject || '' }),
80 |           });
81 |           out[t.id] = resp.ok ? (await resp.json()).summary || '' : '';
82 |         } catch {
83 |           out[t.id] = '';
84 |         }
85 |       }
86 |       if (!cancelled) setSummaries(out);
87 |     }
88 |     if (threads.length) run();
89 |     return () => {
90 |       cancelled = true;
91 |     };
92 |   }, [threads]);
93 | 
94 |   if (loading) return <div className="p-6 text-center text-gray-500">Loading tickets…</div>;
95 |   if (error)   return <div className="p-6 text-center text-red-500">Error: {error}</div>;
96 | 
97 | 
98 |   // Build department options, add Unassigned
99 |   const deptOptions = [
100 |     ...((departments?.length ? departments : FALLBACK_DEPTS).map(d => ({
101 |       id: Number(d.id),
102 |       name: String(d.name),
103 |     })))
104 |   ];
105 |   const deptNameById = Object.fromEntries(deptOptions.map(d => [d.id, d.name]));
106 | 
107 |   // Add Unassigned option to dropdown
108 |   const filterOptions = [
109 |     { id: 'all', name: 'All' },
110 |     ...deptOptions,
111 |     { id: 'unassigned', name: 'Unassigned' },
112 |   ];
113 | 
114 |   const role = agent?.role;
115 |   const roleFiltered = (threads || []).filter(t => {
116 |     const lvl = Number(t.level ?? 1);
117 |     if (role === 'L2') return lvl >= 2;
118 |     if (role === 'L3') return lvl === 3;
119 |     return true; // L1 & MANAGER see all
120 |   });
121 | 
122 |   // Filter by department, including unassigned
123 |   const filteredThreads =
124 |     activeDeptId === 'all'
125 |       ? roleFiltered
126 |       : activeDeptId === 'unassigned'
127 |         ? roleFiltered.filter(t =>
128 |             t.department === null ||
129 |             t.department_id === null ||
130 |             t.department === undefined ||
131 |             t.department_id === undefined ||
132 |             t.department === '' ||
133 |             t.department_id === ''
134 |           )
135 |         : roleFiltered.filter(t =>
136 |             (t.department_id ?? t.department?.id) === Number(activeDeptId)
137 |           );
138 | 
139 |   return (
140 |     <div className="overflow-auto pr-2 bg-gray-50 dark:bg-gray-900 p-4 space-y-3 max-w-sm w-full rounded-2xl shadow-lg border border-gray-100 dark:border-gray-800">
141 |       {/* Header + filter */}
142 |       <div className="flex items-center justify-between mb-1">
143 |         <h2 className="text-lg font-bold text-blue-700 dark:text-blue-300">Open Tickets</h2>
144 |         <div className="flex items-center gap-2">
145 |           <span className="text-xs text-gray-600 dark:text-gray-300">Department</span>
146 |           <select
147 |             className="px-2 py-1 rounded border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-sm"
148 |             value={activeDeptId}
149 |             onChange={(e) => setActiveDeptId(e.target.value)}
150 |           >
151 |             {filterOptions.map((d) => (
152 |               <option key={d.id} value={d.id}>
153 |                 {d.name}
154 |               </option>
155 |             ))}
156 |           </select>
157 |         </div>
158 |       </div>
159 | 
160 |       {/* Ticket cards */}
161 |       {filteredThreads.map((t) => {
162 |         const isActive = selectedId === t.id;
163 |         const depId = t.department_id ?? t.department?.id ?? null;
164 |         const depName = t.department?.name || t.department || (depId ? deptNameById[depId] : 'Unassigned');
165 |         const updatedTs = t.updated_at || t.lastActivity;
166 | 
167 |         return (
168 |           <div
169 |             key={t.id}
170 |             className={`bg-white dark:bg-gray-800 border rounded-xl shadow-sm transition cursor-pointer mb-2 px-3 py-2
171 |               ${isActive ? 'ring-2 ring-indigo-300 dark:ring-indigo-600 shadow-md z-10 border-transparent' : 'border-gray-200 dark:border-gray-700 hover:bg-indigo-50 dark:hover:bg-indigo-900'}`}
172 |             tabIndex={0}
173 |             aria-label={`Open ticket ${t.id}`}
174 |             onClick={() => onSelect?.(t.id)}
175 |           >
176 |             {/* Header row */}
177 |             <div className="flex items-start justify-between gap-2">
178 |               <div className="flex items-center gap-2 min-w-0">
179 |                 <span className="text-[15px] font-semibold text-gray-900 dark:text-gray-100 whitespace-nowrap">
180 |                   #{t.id}
181 |                 </span>
182 |                 <span className="px-2 py-0.5 bg-purple-50 dark:bg-purple-900 text-purple-800 dark:text-purple-200 text-[11px] font-medium rounded-full max-w-[120px] truncate">
183 |                   {depName || 'Unassigned'}
184 |                 </span>
185 |               </div>
186 |               <div className="flex flex-col items-end gap-1 min-w-0">
187 |                 <Gate roles={['MANAGER']}>
188 |                   <button
189 |                     className="px-2 py-0.5 bg-gray-200 dark:bg-gray-700 text-[11px] rounded-full text-gray-700 dark:text-gray-200 border border-gray-300 dark:border-gray-600 hover:bg-gray-300 dark:hover:bg-gray-600 transition"
190 |                     onClick={(e) => {
191 |                       e.stopPropagation();
192 |                       const current = t.department_id ?? t.department?.id ?? '';
193 |                       setOverrideOpen((o) => ({ ...o, [t.id]: !o[t.id] }));
194 |                       setOverrideDept((d) => ({ ...d, [t.id]: current }));
195 |                     }}
196 |                     disabled={saving[t.id]}
197 |                   >
198 |                     Override
199 |                   </button>
200 |                 </Gate>
201 |                 {updatedTs && (
202 |                   <span className="text-xs text-gray-400 mt-0.5 whitespace-nowrap">
203 |                     {dayjs(updatedTs).format('M/D/YYYY, h:mm A')}
204 |                   </span>
205 |                 )}
206 |               </div>
207 |             </div>
208 | 
209 |             {/* Override controls */}
210 |             {overrideOpen[t.id] && (
211 |               <div className="mt-2 bg-gray-50 dark:bg-gray-900 border-t border-b border-gray-200 dark:border-gray-700 flex flex-col gap-2 px-2 py-2 rounded">
212 |                 <label className="text-xs font-medium text-gray-700 dark:text-gray-200">Department:</label>
213 |                 <select
214 |                   className="px-2 py-1 rounded border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-sm"
215 |                   value={overrideDept[t.id] ?? ''}
216 |                   onChange={(e) => setOverrideDept((d) => ({ ...d, [t.id]: e.target.value ? Number(e.target.value) : '' }))}
217 |                   onClick={(e) => e.stopPropagation()}
218 |                 >
219 |                   <option value="">Unassigned</option>
220 |                   {deptOptions.map((d) => (
221 |                     <option key={d.id} value={d.id}>
222 |                       {d.name}
223 |                     </option>
224 |                   ))}
225 |                 </select>
226 | 
227 |                 <label className="text-xs font-medium text-gray-700 dark:text-gray-200 mt-2">Reason:</label>
228 |                 <input
229 |                   className="px-2 py-1 rounded border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-sm"
230 |                   value={overrideReason[t.id] || ''}
231 |                   onChange={(e) => setOverrideReason((r) => ({ ...r, [t.id]: e.target.value }))}
232 |                   onClick={(e) => e.stopPropagation()}
233 |                   placeholder="Reason for override"
234 |                 />
235 | 
236 |                 <div className="flex gap-2 mt-2">
237 |                   <button
238 |                     className="px-3 py-1 bg-blue-600 text-white rounded-full text-xs font-semibold hover:bg-blue-700 disabled:opacity-50"
239 |                     disabled={saving[t.id] || overrideDept[t.id] === undefined}
240 |                     onClick={async (e) => {
241 |                       e.stopPropagation();
242 |                       setSaving((s) => ({ ...s, [t.id]: true }));
243 |                       const prevDeptId = t.department_id ?? t.department?.id ?? null;
244 |                       try {
245 |                         await setTicketDepartment(t.id, {
246 |                           department_id: overrideDept[t.id],
247 |                           reason: overrideReason[t.id],
248 |                         });
249 |                         setThreads((cur) =>
250 |                           cur.map((ticket) =>
251 |                             ticket.id === t.id ? { ...ticket, department_id: overrideDept[t.id] } : ticket
252 |                           )
253 |                         );
254 |                         setOverrideOpen((o) => ({ ...o, [t.id]: false }));
255 |                         alert('Department updated successfully.');
256 |                       } catch (err) {
257 |                         alert('Failed to update department: ' + (err.message || err));
258 |                         setThreads((cur) =>
259 |                           cur.map((ticket) =>
260 |                             ticket.id === t.id ? { ...ticket, department_id: prevDeptId } : ticket
261 |                           )
262 |                         );
263 |                       } finally {
264 |                         setSaving((s) => ({ ...s, [t.id]: false }));
265 |                       }
266 |                     }}
267 |                   >
268 |                     Save
269 |                   </button>
270 |                   <button
271 |                     className="px-3 py-1 bg-gray-300 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-full text-xs font-semibold hover:bg-gray-400 dark:hover:bg-gray-600"
272 |                     onClick={(e) => {
273 |                       e.stopPropagation();
274 |                       setOverrideOpen((o) => ({ ...o, [t.id]: false }));
275 |                     }}
276 |                     disabled={saving[t.id]}
277 |                   >
278 |                     Cancel
279 |                   </button>
280 |                 </div>
281 |               </div>
282 |             )}
283 | 
284 |             {/* Summary (2 lines) */}
285 |             {summaries[t.id] && (
286 |               <div className="mt-2">
287 |                 <p className="line-clamp-2 text-sm text-gray-800 dark:text-gray-200">{summaries[t.id]}</p>
288 |               </div>
289 |             )}
290 | 
291 |             {/* Metadata pills */}
292 |             <div className="flex flex-wrap gap-1 mt-2 mb-1">
293 |               <span className="px-2 py-0.5 bg-blue-50 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-[11px] font-medium rounded-full">
294 |                 Level: {t.level}
295 |               </span>
296 |               <span className="px-2 py-0.5 bg-yellow-50 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200 text-[11px] font-medium rounded-full">
297 |                 Urgency: {t.urgency_level}
298 |               </span>
299 |               <span className="px-2 py-0.5 bg-pink-50 dark:bg-pink-900 text-pink-800 dark:text-pink-200 text-[11px] font-medium rounded-full">
300 |                 Impact: {t.impact_level}
301 |               </span>
302 |               <span className="px-2 py-0.5 bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 text-[11px] font-medium rounded-full">
303 |                 Status: {t.status}
304 |               </span>
305 |             </div>
306 | 
307 |             {/* Footer */}
308 |             <div className="border-t border-gray-100 dark:border-gray-800 pt-1 mt-1">
309 |               <p className="text-xs text-gray-500 dark:text-gray-400">
310 |                 Last activity: {dayjs(updatedTs || t.lastActivity).fromNow()}
311 |               </p>
312 |             </div>
313 |           </div>
314 |         );
315 |       })}
316 |     </div>
317 |   );
318 | }
```

components/TicketContext.jsx
```
1 | // frontend/src/components/TicketContext.jsx
2 | import React, { useState } from 'react';
3 | import ChatHistory from './ChatHistory';
4 | import QuickActions from './QuickActions';
5 | import MessageInput from './MessageInput';
6 | 
7 | export default function TicketContext({ ticket, knowledgeContext, onSend }) {
8 |   const [draftText, setDraftText] = useState('');
9 | 
10 |   const handleSend = () => {
11 |     onSend(ticket.ticketId, draftText);
12 |     setDraftText('');
13 |   };
14 | 
15 |   return (
16 |     <div>
17 |       <header className="ticket-header">
18 |         <h2>#{ticket.ticketId} – {ticket.subject}</h2>
19 |         <div className="ticket-meta">
20 |           <span>Level: {ticket.level}</span>
21 |           <span>Status: {ticket.status}</span>
22 |           <span>Priority: {ticket.priority}</span>
23 |           <span>Agent: {ticket.assignedAgent || 'Unassigned'}</span>
24 |         </div>
25 |       </header>
26 | 
27 |       <ChatHistory messages={ticket.messages} />
28 | 
29 |       {knowledgeContext && knowledgeContext.length > 0 && (
30 |         <div className="knowledge-context">
31 |           <h3>Related Tickets</h3>
32 |           <ul>
33 |             {knowledgeContext.map((txt, i) => (
34 |               <li key={i}>{txt}</li>
35 |             ))}
36 |           </ul>
37 |         </div>
38 |       )}
39 | 
40 |       <QuickActions ticketId={ticket.ticketId} />
41 | 
42 |       <MessageInput
43 |         value={draftText}
44 |         onChange={(v) => setDraftText(v)}
45 |         onSend={handleSend}
46 |       />
47 |     </div>
48 |   );
49 | }
```

components/TicketHeader.tsx
```
1 | // import React from "react";
2 | // import { Ticket } from "../../lib/types";
3 | // import { useAuth } from '../components/AuthContext';
4 | 
5 | // interface TicketHeaderProps {
6 | //   ticket: Ticket;
7 | //   agent: any;
8 | // }
9 | 
10 | // const levelLabel = (level: number) => {
11 | //   if (level === 1) return "L1";
12 | //   if (level === 2) return "L2";
13 | //   if (level === 3) return "L3";
14 | //   return `L${level}`;
15 | // };
16 | 
17 | // export default function TicketHeader({ ticket, agent }: TicketHeaderProps) {
18 | //   return (
19 | //     <div className="flex flex-wrap items-center gap-3 mb-4">
20 | //       <h1 className="text-xl font-bold flex-1">{ticket.subject}</h1>
21 | //       <span className="px-2 py-1 rounded bg-blue-100 text-blue-800 text-xs font-semibold">
22 | //         {ticket.status}
23 | //       </span>
24 | //       {ticket.department && (
25 | //         <span className="px-2 py-1 rounded bg-green-100 text-green-800 text-xs font-semibold">
26 | //           {ticket.department.name}
27 | //         </span>
28 | //       )}
29 | //       <span className="px-2 py-1 rounded bg-gray-100 text-gray-800 text-xs font-semibold">
30 | //         {levelLabel(ticket.level)}
31 | //       </span>
32 | //       {/* TODO: Override Department button for L2/L3/MANAGER */}
33 | //     </div>
34 | //   );
35 | // }
```

hooks/useMentions.js
```
1 | import { useState, useEffect } from 'react';
2 | 
3 | export function useMentions(agentId) {
4 |   const [mentions, setMentions] = useState([]);
5 |   const [loading, setLoading] = useState(true);
6 |   const [error, setError] = useState(null);
7 | 
8 |   useEffect(() => {
9 |     if (!agentId) return;
10 |     setLoading(true);
11 |   fetch(`${process.env.NEXT_PUBLIC_API_BASE}/inbox/mentions/${agentId}`)
12 |       .then(res => res.json())
13 |       .then(data => {
14 |         setMentions(data);
15 |         setLoading(false);
16 |       })
17 |       .catch(err => {
18 |         setError(err);
19 |         setLoading(false);
20 |       });
21 |   }, [agentId]);
22 | 
23 |   return { mentions, loading, error };
24 | }
```

lib/api.js
```
1 | const API_BASE = (process.env.NEXT_PUBLIC_API_BASE || 'http://localhost:5000').replace(/\/+$/, '');
2 | 
3 | 
4 | // Get tickets with pagination
5 | export async function getTickets({ limit = 50, offset = 0 } = {}) {
6 |   const res = await fetch(`${API_BASE}/tickets?limit=${limit}&offset=${offset}`);
7 |   if (!res.ok) throw new Error(`Error ${res.status}`);
8 |   return res.json();
9 | }
10 | 
11 | export async function setTicketDepartment(id, { department_id, reason }) {
12 |   const authToken = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;
13 | 
14 |   const headers = { 'Content-Type': 'application/json' };
15 |   if (authToken) headers['Authorization'] = `Bearer ${authToken}`;
16 | 
17 |   const res = await fetch(`${API_BASE}/threads/${id}/department`, {
18 |     method: 'PATCH',
19 |     headers,
20 |     body: JSON.stringify({ department_id, reason }),
21 |   });
22 | 
23 |   const data = await res.json().catch(() => ({}));
24 |   if (!res.ok) throw new Error(data.error || `HTTP ${res.status}`);
25 |   return data;
26 | }
27 | 
28 | 
29 | export async function fetchThreads() {
30 |   const res = await fetch(`${API_BASE}/threads`)
31 |   if (!res.ok) throw new Error(`Error ${res.status}`)
32 |   return res.json()
33 | }
34 | 
35 | export async function fetchTicket(id) {
36 |   const res = await fetch(`${API_BASE}/tickets/${id}`)
37 |   if (!res.ok) throw new Error(`Error ${res.status}`)
38 |   return res.json()
39 | }
40 | 
41 | export async function sendMessage(ticketId, message) {
42 |   const res = await fetch(`${API_BASE}/chat`, {
43 |     method: 'POST',
44 |     headers: { 'Content-Type': 'application/json' },
45 |     body: JSON.stringify({ ticketId, message }),
46 |   })
47 |   if (!res.ok) {
48 |     const err = await res.json()
49 |     throw new Error(err.error || `Error ${res.status}`)
50 |   }
51 |   return res.json()
52 | }
53 | 
54 | export async function searchContext(ticketId) {
55 |   const res = await fetch(`${API_BASE}/search`, {
56 |     method: 'POST',
57 |     headers: { 'Content-Type': 'application/json' },
58 |     body: JSON.stringify({ ticketId }),
59 |   })
60 |   if (!res.ok) throw new Error(`Error ${res.status}`)
61 |   return res.json()
62 | }
63 | 
64 | 
```

lib/apiClient.ts
```
1 | const API_BASE = (process.env.NEXT_PUBLIC_API_BASE || "http://localhost:5000").replace(/\/+$/, "");
2 | 
3 | export function getToken() {
4 |   if (typeof window === "undefined") return "";
5 |   return localStorage.getItem("authToken") || ""; return localStorage.getItem("authToken") || "";
6 | }
7 | 
8 | async function handle<T>(res: Response): Promise<T> {
9 |   const contentType = res.headers.get("content-type") || "";
10 |   const isJson = contentType.includes("application/json");
11 | 
12 |   if (res.status === 401) {
13 |     if (typeof window !== "undefined") window.location.href = "/login";
14 |     throw new Error("Unauthorized");
15 |   }
16 | 
17 |   if (!res.ok) {
18 |     let message = `${res.status} ${res.statusText}`;
19 |     try {
20 |       const body = isJson ? await res.json() : await res.text();
21 |       if (typeof body === "object" && body !== null && "error" in body) {
22 |         message = (body as { error: string }).error;
23 |       } else if (typeof body === "string" && body.trim()) {
24 |         message = body;
25 |       }
26 |     } catch {
27 |       /* ignore */
28 |     }
29 |     throw new Error(message);
30 |   }
31 | 
32 |   if (res.status === 204) return undefined as unknown as T;
33 |   return (isJson ? await res.json() : await res.text()) as T;
34 | }
35 | 
36 | function withAuthHeaders(extra?: HeadersInit): Headers {
37 |   const h = new Headers(extra);
38 |   if (!h.has("Accept")) h.set("Accept", "application/json");
39 |   if (!h.has("X-Requested-With")) h.set("X-Requested-With", "fetch");
40 |   const authToken = getToken();
41 |   if (authToken && !h.has("Authorization")) h.set("Authorization", `Bearer ${authToken}`);
42 |   return h;
43 | }
44 | 
45 | export async function apiGet<T>(path: string, init?: RequestInit) {
46 |   const res = await fetch(`${API_BASE}${path}`, {
47 |     method: "GET",
48 |     credentials: "include",
49 |     ...(init || {}),
50 |     headers: withAuthHeaders(init?.headers),
51 |   });
52 |   return handle<T>(res);
53 | }
54 | 
55 | export async function apiPost<T>(path: string, body?: unknown, init?: RequestInit) {
56 |   const res = await fetch(`${API_BASE}${path}`, {
57 |     method: "POST",
58 |     credentials: "include",
59 |     body: body !== undefined ? JSON.stringify(body) : undefined,
60 |     headers: withAuthHeaders({ "Content-Type": "application/json", ...(init?.headers || {}) }),
61 |     ...(init || {}),
62 |   });
63 |   return handle<T>(res);
64 | }
65 | 
66 | export async function apiPatch<T>(path: string, body?: unknown, init?: RequestInit) {
67 |   const res = await fetch(`${API_BASE}${path}`, {
68 |     method: "PATCH",
69 |     body: body !== undefined ? JSON.stringify(body) : undefined,
70 |     headers: withAuthHeaders({ "Content-Type": "application/json", ...(init?.headers || {}) }),
71 |     ...(init || {}),
72 |   });
73 |   return handle<T>(res);
74 | }
```

lib/KbFeedback.jsx
```
1 | import { useState } from "react";
2 | import { apiPost } from "./apiClient";
3 | 
4 | /**
5 |  * Props (all optional except one of `threadId` or `articleId`):
6 |  * - threadId: number|string   // When present → submits to /threads/:id/feedback
7 |  * - attemptId: number         // Optional, passed through to backend
8 |  * - userEmail: string         // Optional, passed through to backend
9 |  * - defaultType: "CONFIRM"|"REJECT" // If provided, locks the form to that type (no toggle)
10 |  * - articleId: number|string  // Fallback mode: submits to /kb/articles/:id/feedback
11 |  * - onSubmitted: function     // Callback after successful submit
12 |  */
13 | export default function KbFeedback(props) {
14 |   const {
15 |     threadId,
16 |     attemptId,
17 |     userEmail,
18 |     defaultType,       // "CONFIRM" | "REJECT" (optional)
19 |     articleId,         // if no threadId, falls back to KB-article feedback
20 |     onSubmitted
21 |   } = props || {};
22 | 
23 |   // Mode detection
24 |   const isThreadMode = !!threadId;
25 | 
26 |   // Shared state
27 |   const [pending, setPending] = useState(false);
28 |   const [msg, setMsg] = useState({ ok: "", err: "" });
29 | 
30 |   // Thread feedback state
31 |   const [tType, setTType] = useState(defaultType || "CONFIRM"); // CONFIRM or REJECT
32 |   const [rating, setRating] = useState(0);       // 1..5 (required for CONFIRM)
33 |   const [comment, setComment] = useState("");    // optional
34 |   const [reason, setReason] = useState("");      // required for REJECT
35 | 
36 |   // Article feedback state (legacy/thumbs)
37 |   const [thumb, setThumb] = useState("");        // "helpful" | "not_helpful"
38 |   const [aRating, setARating] = useState(0);
39 |   const [aComment, setAComment] = useState("");
40 | 
41 |   async function submitThreadFeedback() {
42 |     // Basic validations
43 |     if (!tType || (tType !== "CONFIRM" && tType !== "REJECT")) {
44 |       setMsg({ ok: "", err: "Choose Confirm or Not fixed." });
45 |       return;
46 |     }
47 |     if (tType === "CONFIRM" && (!rating || rating < 1 || rating > 5)) {
48 |       setMsg({ ok: "", err: "Please give a rating (1–5)." });
49 |       return;
50 |     }
51 |     if (tType === "REJECT" && !reason.trim()) {
52 |       setMsg({ ok: "", err: "Please provide a brief reason." });
53 |       return;
54 |     }
55 | 
56 |     setPending(true);
57 |     setMsg({ ok: "", err: "" });
58 | 
59 |     try {
60 |       await apiPost(`/threads/${threadId}/feedback`, {
61 |         type: tType,                  // "CONFIRM" | "REJECT"
62 |         rating: tType === "CONFIRM" ? rating : undefined,
63 |         comment: comment || undefined,
64 |         reason: tType === "REJECT" ? reason : undefined,
65 |         attempt_id: attemptId || undefined,
66 |         user_email: userEmail || undefined,
67 |       });
68 | 
69 |       // Reset (keep defaultType lock)
70 |       if (!defaultType) setTType("CONFIRM");
71 |       setRating(0);
72 |       setComment("");
73 |       setReason("");
74 | 
75 |       setMsg({ ok: "Thanks for your feedback!", err: "" });
76 |       onSubmitted && onSubmitted();
77 |     } catch (e) {
78 |       setMsg({ ok: "", err: e?.message || "Could not submit feedback" });
79 |     } finally {
80 |       setPending(false);
81 |     }
82 |   }
83 | 
84 |   async function submitArticleFeedback() {
85 |     if (!thumb) {
86 |       setMsg({ ok: "", err: "Choose 👍 or 👎" });
87 |       return;
88 |     }
89 | 
90 |     setPending(true);
91 |     setMsg({ ok: "", err: "" });
92 | 
93 |     try {
94 |       await apiPost(`/kb/articles/${articleId}/feedback`, {
95 |         feedback_type: thumb,                // "helpful" | "not_helpful"
96 |         rating: aRating || undefined,
97 |         comment: aComment || undefined,
98 |         user_email: userEmail || undefined,
99 |       });
100 | 
101 |       setThumb("");
102 |       setARating(0);
103 |       setAComment("");
104 | 
105 |       setMsg({ ok: "Thanks for your feedback!", err: "" });
106 |       onSubmitted && onSubmitted();
107 |     } catch (e) {
108 |       setMsg({ ok: "", err: e?.message || "Could not submit feedback" });
109 |     } finally {
110 |       setPending(false);
111 |     }
112 |   }
113 | 
114 |   // --- UI helpers ---
115 |   const Star = ({ filled, onClick, disabled }) => (
116 |     <button
117 |       type="button"
118 |       onClick={onClick}
119 |       disabled={disabled}
120 |       className={`text-2xl ${filled ? "opacity-100" : "opacity-30"} disabled:opacity-40`}
121 |       aria-label={filled ? "filled star" : "empty star"}
122 |     >
123 |       ★
124 |     </button>
125 |   );
126 | 
127 |   // =========================
128 |   // THREAD MODE (CONFIRM/REJECT)
129 |   // =========================
130 |   if (isThreadMode) {
131 |     const locked = !!defaultType; // if true, hide the toggle
132 | 
133 |     return (
134 |       <div className="rounded-xl border p-4 space-y-4 bg-white dark:bg-gray-900">
135 |         {!locked && (
136 |           <div className="flex gap-2">
137 |             <button
138 |               className={`px-3 py-1 rounded-md border ${tType === "CONFIRM" ? "bg-green-50" : ""}`}
139 |               onClick={() => setTType("CONFIRM")}
140 |               disabled={pending}
141 |             >
142 |               ✅ Confirmed (Solved)
143 |             </button>
144 |             <button
145 |               className={`px-3 py-1 rounded-md border ${tType === "REJECT" ? "bg-red-50" : ""}`}
146 |               onClick={() => setTType("REJECT")}
147 |               disabled={pending}
148 |             >
149 |               🚫 Not fixed
150 |             </button>
151 |           </div>
152 |         )}
153 | 
154 |         {tType === "CONFIRM" && (
155 |           <>
156 |             <div className="space-y-1">
157 |               <div className="text-sm font-medium">Rate the solution</div>
158 |               <div className="flex items-center gap-1">
159 |                 {[1, 2, 3, 4, 5].map((n) => (
160 |                   <Star
161 |                     key={n}
162 |                     filled={rating >= n}
163 |                     onClick={() => setRating(n)}
164 |                     disabled={pending}
165 |                   />
166 |                 ))}
167 |                 <span className="ml-2 text-sm text-gray-500">{rating || "—"}/5</span>
168 |               </div>
169 |             </div>
170 | 
171 |             <textarea
172 |               value={comment}
173 |               onChange={(e) => setComment(e.target.value)}
174 |               placeholder="Optional comment…"
175 |               className="w-full border rounded p-2 min-h-[80px]"
176 |               disabled={pending}
177 |             />
178 |           </>
179 |         )}
180 | 
181 |         {tType === "REJECT" && (
182 |           <>
183 |             <div className="space-y-1">
184 |               <label className="text-sm font-medium">Reason</label>
185 |               <input
186 |                 type="text"
187 |                 value={reason}
188 |                 onChange={(e) => setReason(e.target.value)}
189 |                 placeholder="What didn’t work?"
190 |                 className="w-full border rounded px-2 py-1"
191 |                 disabled={pending}
192 |               />
193 |             </div>
194 | 
195 |             <textarea
196 |               value={comment}
197 |               onChange={(e) => setComment(e.target.value)}
198 |               placeholder="Optional details…"
199 |               className="w-full border rounded p-2 min-h-[80px]"
200 |               disabled={pending}
201 |             />
202 |           </>
203 |         )}
204 | 
205 |         <div className="flex items-center gap-3">
206 |           <button
207 |             className="px-3 py-1 rounded-md border"
208 |             onClick={submitThreadFeedback}
209 |             disabled={pending || (tType === "CONFIRM" ? rating < 1 : false)}
210 |           >
211 |             {pending ? "Submitting…" : "Submit"}
212 |           </button>
213 |           {msg.ok && <span className="text-green-700 text-sm">{msg.ok}</span>}
214 |           {msg.err && <span className="text-red-600 text-sm">{msg.err}</span>}
215 |         </div>
216 |       </div>
217 |     );
218 |   }
219 | 
220 |   // =========================
221 |   // ARTICLE MODE (legacy thumbs)
222 |   // =========================
223 |   return (
224 |     <div className="rounded-xl border p-4 space-y-3">
225 |       <div className="flex gap-2">
226 |         <button
227 |           className={`px-3 py-1 rounded-md border ${thumb === "helpful" ? "bg-green-50" : ""}`}
228 |           onClick={() => setThumb("helpful")}
229 |           disabled={pending}
230 |         >
231 |           👍 Helpful
232 |         </button>
233 |         <button
234 |           className={`px-3 py-1 rounded-md border ${thumb === "not_helpful" ? "bg-red-50" : ""}`}
235 |           onClick={() => setThumb("not_helpful")}
236 |           disabled={pending}
237 |         >
238 |           👎 Not helpful
239 |         </button>
240 |       </div>
241 | 
242 |       <div className="flex items-center gap-2">
243 |         <label className="text-sm">Rating</label>
244 |         <input
245 |           type="number"
246 |           min={1}
247 |           max={5}
248 |           value={aRating || ""}
249 |           onChange={(e) => setARating(+e.target.value)}
250 |           className="w-16 border rounded px-2 py-1"
251 |           disabled={pending}
252 |         />
253 |       </div>
254 | 
255 |       <textarea
256 |         value={aComment}
257 |         onChange={(e) => setAComment(e.target.value)}
258 |         placeholder="Optional comment…"
259 |         className="w-full border rounded p-2 min-h-[80px]"
260 |         disabled={pending}
261 |       />
262 | 
263 |       <div className="flex items-center gap-3">
264 |         <button
265 |           className="px-3 py-1 rounded-md border"
266 |           onClick={submitArticleFeedback}
267 |           disabled={!thumb || pending || !articleId}
268 |         >
269 |           {pending ? "Submitting…" : "Submit"}
270 |         </button>
271 |         {msg.ok && <span className="text-green-700 text-sm">{msg.ok}</span>}
272 |         {msg.err && <span className="text-red-600 text-sm">{msg.err}</span>}
273 |       </div>
274 |     </div>
275 |   );
276 | }
```

lib/SolutionCard.tsx
```
1 | import { useState } from "react";
2 | import { apiPost } from "../lib/apiClient";
3 | 
4 | type Props = {
5 |   solutionId: string | number;
6 |   text: string;
7 |   status?: "draft" | "sent_for_confirm" | "confirmed_by_user" | "rejected" | "published";
8 |   onPromoted?: (articleId: number) => void;
9 | };
10 | 
11 | export default function SolutionCard({ solutionId, text, status, onPromoted }: Props) {
12 |   const [busy, setBusy] = useState<null | "send" | "promote">(null);
13 |   const [state, setState] = useState(status ?? "draft");
14 | 
15 |   async function sendConfirm() {
16 |     setBusy("send");
17 |     try {
18 |       await apiPost(`/solutions/${solutionId}/send_confirmation_email`);
19 |       setState("sent_for_confirm");
20 |       alert("Confirmation email sent.");
21 |     } catch (e: unknown) {
22 |       if (e instanceof Error) {
23 |         alert(e.message);
24 |       } else {
25 |         alert("Failed to send confirmation.");
26 |       }
27 |     } finally {
28 |       setBusy(null);
29 |     }
30 |   }
31 | 
32 |   async function promote() {
33 |     setBusy("promote");
34 |     try {
35 |       const r = await apiPost<{ article_id: number }>(`/solutions/${solutionId}/promote`);
36 |       setState("published");
37 |       alert("Promoted to KB.");
38 |       onPromoted?.(r.article_id);
39 |     } catch (e: unknown) {
40 |       if (e instanceof Error) {
41 |         alert(e.message);
42 |       } else {
43 |         alert("Promote failed");
44 |       }
45 |     } finally {
46 |       setBusy(null);
47 |     }
48 |   }
49 | 
50 |   const canPromote = state === "confirmed_by_user" || state === "published";
51 | 
52 |   return (
53 |     <div className="rounded-2xl border p-4 space-y-3">
54 |       <div className="text-sm uppercase tracking-wide opacity-60">Proposed solution</div>
55 |       <pre className="whitespace-pre-wrap text-sm">{text}</pre>
56 |       <div className="flex items-center gap-2">
57 |         <span className="text-xs px-2 py-1 rounded-full bg-gray-100">
58 |           {state.replaceAll("_"," ")}
59 |         </span>
60 |         <div className="ml-auto flex gap-2">
61 |           <button
62 |             className="px-3 py-1 rounded-md border"
63 |             disabled={busy !== null}
64 |             onClick={sendConfirm}
65 |           >
66 |             {busy==="send" ? "Sending..." : "Send confirmation"}
67 |           </button>
68 |           <button
69 |             className="px-3 py-1 rounded-md border"
70 |             disabled={busy !== null || !canPromote}
71 |             onClick={promote}
72 |             title={!canPromote ? "Enable after user confirms" : ""}
73 |           >
74 |             {busy==="promote" ? "Promoting..." : "Promote to KB"}
75 |           </button>
76 |         </div>
77 |       </div>
78 |     </div>
79 |   );
80 | }
```

public/index.html
```
1 | <!DOCTYPE html>
2 | <html lang="en">
3 |   <head>
4 |     <meta charset="utf-8" />
5 |     <title>AI Support Assistant</title>
6 |     <meta name="viewport" content="width=device-width,initial-scale=1" />
7 |     <!-- You can add favicon or other meta tags here -->
8 |   </head>
9 |   <body>
10 |     <div id="root"></div>
11 |     <!-- The Next.js or CRA bundle will be injected here -->
12 |      its working
13 |   </body>
14 | </html>
```

pages/confirm.jsx
```
1 | 'use client';
2 | import React, { useEffect, useState } from 'react';
3 | 
4 | const RAW_BASE = process.env.NEXT_PUBLIC_API_BASE || '';
5 | const API_BASE = /^https?:\/\//i.test(RAW_BASE) ? RAW_BASE : 'http://localhost:5000';
6 | console.log('[Confirm] API_BASE =', API_BASE);
7 | 
8 | export default function ConfirmPage() {
9 |   const [loading, setLoading] = useState(true);
10 |   const [valid, setValid] = useState(false);
11 |   const [action, setAction] = useState(null); // 'confirm' | 'not_confirm'
12 |   const [ticketId, setTicketId] = useState(null);
13 |   const [attemptId, setAttemptId] = useState(null);
14 |   const [email, setEmail] = useState(null);
15 |   const [done, setDone] = useState(false);
16 |   const [error, setError] = useState(null);
17 | 
18 |   // form fields
19 |   const [rating, setRating] = useState(0);
20 |   const [comment, setComment] = useState('');
21 |   const [reason, setReason] = useState('Did not work');
22 |   const [submitting, setSubmitting] = useState(false);
23 | 
24 |   useEffect(() => {
25 |     const params = new URLSearchParams(window.location.search);
26 |     const authToken = params.get('token');
27 |     const a = (params.get('a') || '').toLowerCase();
28 |     if (!authToken || !a) {
29 |       setLoading(false);
30 |       setValid(false);
31 |       setError('Missing token or action in URL.');
32 |       return;
33 |     }
34 | 
35 |     setAction(a === 'confirm' ? 'confirm' : 'not_confirm');
36 | 
37 |     // Record the click (CONFIRMED / NOT_CONFIRMED) on the backend.
38 |     fetch(`${API_BASE}/solutions/confirm?token=${encodeURIComponent(authToken)}&a=${encodeURIComponent(a)}`, {
39 |       method: 'GET',
40 |       headers: { Accept: 'application/json' },
41 |       credentials: 'include',
42 |     })
43 |      .then(async (r) => {
44 |         // read body even on non-2xx so we can surface .reason/.error
45 |         const raw = await r.text().catch(() => '');
46 |         let body;
47 |         try { body = raw ? JSON.parse(raw) : null; } catch { body = null; }
48 |         if (!r.ok) {
49 |           const reason = body?.reason || body?.error || r.statusText || `HTTP ${r.status}`;
50 |           throw new Error(reason);
51 |         }
52 |         return body ?? {};
53 |       
54 |     })
55 |     .then((data) => {
56 |         if (data?.ok) {
57 |           setTicketId(data.ticket_id ?? null);
58 |           setAttemptId(data.attempt_id ?? null);
59 |           setEmail(data.user_email ?? null);
60 |           setValid(true);
61 |         } else {
62 |           setValid(false);
63 |           setError(data?.reason || 'Invalid or expired link');
64 |         }
65 |       })
66 |       .catch((e) => {
67 |         setValid(false);
68 |         setError(e?.message || 'Failed to record confirmation.');
69 |       })
70 |       .finally(() => setLoading(false));
71 |   }, []);
72 | 
73 |   const submitFeedback = async (e) => {
74 |     e.preventDefault();
75 |     if (!ticketId) {
76 |       // If we can't tie feedback to a ticket, still complete UX
77 |       setDone(true);
78 |       return;
79 |     }
80 |     setSubmitting(true);
81 |     setError(null);
82 | 
83 |     try {
84 |       const body =
85 |         action === 'confirm'
86 |           ? { type: 'CONFIRM', rating, comment, attempt_id: attemptId, user_email: email }
87 |           : { type: 'REJECT', reason, comment, attempt_id: attemptId, user_email: email };
88 | 
89 |       const res = await fetch(`${API_BASE}/threads/${ticketId}/feedback`, {
90 |         method: 'POST',
91 |         headers: { 'Content-Type': 'application/json' },
92 |         body: JSON.stringify(body),
93 |       });
94 |       const data = await res.json();
95 |       if (!res.ok) throw new Error(data.error || 'Failed');
96 |       setDone(true);
97 |     } catch (err) {
98 |       setError(err?.message || 'Something went wrong');
99 |     } finally {
100 |       setSubmitting(false);
101 |     }
102 |   };
103 | 
104 |   if (loading) return <div className="flex items-center justify-center min-h-screen"><div className="text-lg">Processing…</div></div>;
105 |   if (!valid) return <div className="flex items-center justify-center min-h-screen"><div className="bg-white shadow-lg rounded-lg p-8 max-w-md w-full text-center"><h1 className="text-2xl font-bold mb-2 text-red-600">Invalid or expired link</h1><p className="text-gray-600">Please check your email link or contact support.</p></div></div>;
106 | 
107 |   if (done) {
108 |     return (
109 |       <div className="flex items-center justify-center min-h-screen">
110 |         <div className="bg-white shadow-lg rounded-lg p-8 max-w-md w-full text-center">
111 |           <h1 className="text-2xl font-bold mb-2 text-green-600">Thank you!</h1>
112 |           <p className="text-gray-700">Your feedback has been recorded. We appreciate your response.</p>
113 |         </div>
114 |       </div>
115 |     );
116 |   }
117 | 
118 |   // Star rating component
119 |   const StarRating = ({ value, onChange }) => (
120 |     <div className="flex items-center space-x-1">
121 |       {[1,2,3,4,5].map(star => (
122 |         <button
123 |           key={star}
124 |           type="button"
125 |           className={`text-2xl focus:outline-none ${star <= value ? 'text-yellow-400' : 'text-gray-300'} transition-colors`}
126 |           onClick={() => onChange(star)}
127 |           aria-label={`Rate ${star}`}
128 |         >★</button>
129 |       ))}
130 |     </div>
131 |   );
132 | 
133 |   return (
134 |     <div className="flex items-center justify-center min-h-screen bg-gray-50">
135 |       <div className="bg-white shadow-2xl rounded-2xl p-8 max-w-md w-full">
136 |         {action === 'confirm' ? (
137 |           <>
138 |             <h1 className="text-2xl font-bold mb-2 text-green-700 flex items-center gap-2">Thanks for confirming <span role="img" aria-label="party">🎉</span></h1>
139 |             <p className="mb-6 text-gray-700">Could you rate the solution and add a quick comment?</p>
140 |             <form onSubmit={submitFeedback} className="space-y-5">
141 |               <div>
142 |                 <span className="block text-sm font-medium text-gray-700 mb-1">Rating</span>
143 |                 <StarRating value={rating} onChange={setRating} />
144 |               </div>
145 |               <div>
146 |                 <label className="block text-sm font-medium text-gray-700 mb-1">Comment (optional)</label>
147 |                 <textarea
148 |                   className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-indigo-400 focus:border-indigo-400 transition"
149 |                   value={comment}
150 |                   onChange={(e) => setComment(e.target.value)}
151 |                   rows={3}
152 |                 />
153 |               </div>
154 |               <button
155 |                 disabled={submitting}
156 |                 className="w-full py-2 px-4 rounded-lg bg-indigo-600 hover:bg-indigo-700 text-white font-semibold shadow-md transition disabled:opacity-60"
157 |               >
158 |                 {submitting ? 'Submitting…' : 'Submit feedback'}
159 |               </button>
160 |             </form>
161 |           </>
162 |         ) : (
163 |           <>
164 |             <h1 className="text-2xl font-bold mb-2 text-red-700 flex items-center gap-2">Sorry it didn’t work <span role="img" aria-label="sad">😕</span></h1>
165 |             <p className="mb-6 text-gray-700">Tell us what happened so we can fix it.</p>
166 |             <form onSubmit={submitFeedback} className="space-y-5">
167 |               <div>
168 |                 <label className="block text-sm font-medium text-gray-700 mb-1">Reason</label>
169 |                 <select
170 |                   className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-indigo-400 focus:border-indigo-400 transition"
171 |                   value={reason}
172 |                   onChange={(e) => setReason(e.target.value)}
173 |                 >
174 |                   <option>Did not work</option>
175 |                   <option>Steps unclear</option>
176 |                   <option>Did not apply to my device</option>
177 |                   <option>Other</option>
178 |                 </select>
179 |               </div>
180 |               <div>
181 |                 <label className="block text-sm font-medium text-gray-700 mb-1">Description <span className="text-red-500">*</span></label>
182 |                 <textarea
183 |                   className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-indigo-400 focus:border-indigo-400 transition"
184 |                   value={comment}
185 |                   onChange={(e) => setComment(e.target.value)}
186 |                   rows={3}
187 |                   required
188 |                 />
189 |               </div>
190 |               <button
191 |                 disabled={submitting}
192 |                 className="w-full py-2 px-4 rounded-lg bg-indigo-600 hover:bg-indigo-700 text-white font-semibold shadow-md transition disabled:opacity-60"
193 |               >
194 |                 {submitting ? 'Sending…' : 'Send feedback'}
195 |               </button>
196 |             </form>
197 |           </>
198 |         )}
199 |         {error && <div className="mt-6 text-red-600 text-sm text-center">{error}</div>}
200 |       </div>
201 |     </div>
202 |   );
203 | }
```

pages/index.jsx
```
1 | import React, { useEffect, useState } from "react";
2 | import { useAuth } from "../components/AuthContext";
3 | import SupportInboxPlugin from "../components/SupportInboxPlugin";
4 | import LoginPage from "./login";
5 | 
6 | export default function Home() {
7 |   const { isAuthenticated } = useAuth();
8 | 
9 |   return isAuthenticated
10 |     ? <SupportInboxPlugin />
11 |     : <LoginPage />;
12 | }
```

pages/login.jsx
```
1 | import React, { useState } from "react";
2 | import { useAuth } from "../components/AuthContext";
3 | 
4 | export default function LoginPage() {
5 |   const { login } = useAuth();
6 |   const [email, setEmail] = useState("");
7 |   const [password, setPassword] = useState("");
8 |   const [error, setError] = useState("");
9 |   const [loading, setLoading] = useState(false);
10 | 
11 |   const handleSubmit = async (e) => {
12 |     e.preventDefault();
13 |     setError("");
14 |     setLoading(true);
15 |     try {
16 |       await login(email, password);
17 |     } catch (err) {
18 |       setError(err.message || "Network error");
19 |     }
20 |     setLoading(false);
21 |   };
22 | 
23 |   return (
24 |     <div style={{ minHeight: "100vh", display: "flex", alignItems: "center", justifyContent: "center", background: "#f7f8fa" }}>
25 |       <form
26 |         onSubmit={handleSubmit}
27 |         style={{
28 |           width: 340,
29 |           padding: "2rem 2rem 1.5rem 2rem",
30 |           borderRadius: 12,
31 |           boxShadow: "0 2px 16px rgba(0,0,0,0.08)",
32 |           background: "#fff",
33 |           display: "flex",
34 |           flexDirection: "column",
35 |           gap: 12,
36 |         }}
37 |       >
38 |         <h2 style={{ textAlign: "center", marginBottom: 12, fontWeight: 600 }}>Agent Login</h2>
39 |         <input
40 |           type="email"
41 |           placeholder="Email"
42 |           value={email}
43 |           onChange={e => setEmail(e.target.value)}
44 |           required
45 |           style={{
46 |             width: "100%",
47 |             padding: "10px 12px",
48 |             borderRadius: 6,
49 |             border: "1px solid #ddd",
50 |             fontSize: 16,
51 |           }}
52 |         />
53 |         <input
54 |           type="password"
55 |           placeholder="Password"
56 |           value={password}
57 |           onChange={e => setPassword(e.target.value)}
58 |           required
59 |           style={{
60 |             width: "100%",
61 |             padding: "10px 12px",
62 |             borderRadius: 6,
63 |             border: "1px solid #ddd",
64 |             fontSize: 16,
65 |           }}
66 |         />
67 |         <button
68 |           type="submit"
69 |           disabled={loading}
70 |           style={{
71 |             width: "100%",
72 |             padding: "10px 0",
73 |             borderRadius: 6,
74 |             border: "none",
75 |             background: loading ? "#ccc" : "#0070f3",
76 |             color: "#fff",
77 |             fontWeight: 600,
78 |             fontSize: 16,
79 |             cursor: loading ? "not-allowed" : "pointer",
80 |             marginTop: 8,
81 |             boxShadow: loading ? "none" : "0 1px 4px rgba(0,0,0,0.04)",
82 |             transition: "background 0.2s"
83 |           }}
84 |         >
85 |           {loading ? "Logging in..." : "Login"}
86 |         </button>
87 |         {error && <div style={{ color: "#d32f2f", marginTop: 8, textAlign: "center" }}>{error}</div>}
88 |       </form>
89 |     </div>
90 |   );
91 | }
```

pages/_app.jsx
```
1 | import '../styles/globals.css';  
2 | import { AuthProvider } from '../components/AuthContext.jsx';
3 | 
4 | function MyApp({ Component, pageProps }) {
5 |   return (
6 |     <AuthProvider>
7 |       <Component {...pageProps} />
8 |     </AuthProvider>
9 |   );
10 | }
11 | 
12 | export default MyApp;
```

styles/globals.css
```
1 | /* styles/globals.css
2 | @tailwind base;
3 | @tailwind components;
4 | @tailwind utilities;
5 | 
6 | /* Two-line clamp for ticket preview */
7 | @import "tailwindcss";
8 | 
9 | .truncate-2 {
10 |   display: -webkit-box;
11 |   -webkit-box-orient: vertical;
12 |   -webkit-line-clamp: 2;
13 |   overflow: hidden;
14 |   white-space: normal;       /* wrap lines */
15 |   word-break: break-word;    /* break long words */
16 | }
17 | 
18 | /* Sidebar tab styles */
19 | .tabs {
20 |   display: flex;
21 |   gap: 0.5rem;
22 | }
23 | .tabs button {
24 |   flex: 1;
25 |   min-width: 0;
26 |   padding: 1rem 0.5rem;
27 |   white-space: nowrap;
28 |   display: flex;
29 |   align-items: center;
30 |   justify-content: center;
31 | }
32 | .tabs .active {
33 |   font-weight: bold;
34 |   background: #e0e7ff;
35 |   color: #3730a3;
36 |   border-bottom: 3px solid #3730a3;
37 | }
38 | 
39 | /* Utility for 2-line clamp (import in ThreadList.jsx or globals.css) */
40 | .line-clamp-2 {
41 |   display: -webkit-box;
42 |   -webkit-line-clamp: 2;
43 |   line-clamp: 2;
44 |   -webkit-box-orient: vertical;
45 |   overflow: hidden;
46 | }
47 | 
48 | /* Highlight for mentioned message */
49 | .chat-highlight {
50 |   background-color: #FEF3C7 !important; /* yellow-100 */
51 |   border: 2px solid #F59E42 !important; /* yellow-400 */
52 |   transition: background 0.3s, border 0.3s;
53 | }
54 | 
55 | 
56 | 
57 | @custom-variant dark (&:where(.dark, .dark *));
```
