"""Initial migration

Revision ID: dbccc9d42491
Revises: 
Create Date: 2025-09-05 12:26:18.926646

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision = 'dbccc9d42491'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('kb_articles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=1000), nullable=True),
    sa.Column('problem_summary', sa.Text(), nullable=True),
    sa.Column('content_md', sa.Text(), nullable=True),
    sa.Column('environment_json', sa.JSON(), nullable=True),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.Column('origin_ticket_id', sa.String(length=45), nullable=True),
    sa.Column('origin_solution_id', sa.Integer(), nullable=True),
    sa.Column('source', sa.Enum('ai', 'human', 'mixed', name='kbarticlesource'), nullable=True),
    sa.Column('ai_contribution_pct', sa.Float(), nullable=True),
    sa.Column('visibility', sa.Enum('internal', 'external', name='kbarticlevisibility'), nullable=True),
    sa.Column('embedding_model', sa.String(length=100), nullable=True),
    sa.Column('embedding_hash', sa.String(length=64), nullable=True),
    sa.Column('faiss_id', sa.Integer(), nullable=True),
    sa.Column('canonical_fingerprint', sa.String(length=64), nullable=True),
    sa.Column('status', sa.Enum('draft', 'published', 'archived', 'deprecated', name='kbarticlestatus'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('approved_by', sa.String(length=45), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('kb_articles', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_kb_articles_canonical_fingerprint'), ['canonical_fingerprint'], unique=True)

    op.create_table('kb_audit',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('entity_type', sa.String(length=100), nullable=True),
    sa.Column('entity_id', sa.Integer(), nullable=True),
    sa.Column('event', sa.String(length=100), nullable=True),
    sa.Column('actor_id', sa.Integer(), nullable=True),
    sa.Column('meta_json', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('solutions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ticket_id', sa.String(length=64), nullable=True),
    sa.Column('proposed_by', sa.String(length=64), nullable=True),
    sa.Column('generated_by', sa.String(length=5), nullable=True),
    sa.Column('ai_contribution_pct', sa.Float(), nullable=True),
    sa.Column('ai_confidence', sa.Float(), nullable=True),
    sa.Column('text', sa.Text(), nullable=True),
    sa.Column('normalized_text', sa.Text(), nullable=True),
    sa.Column('fingerprint_sha256', sa.String(length=64), nullable=True),
    sa.Column('sent_for_confirmation_at', sa.DateTime(), nullable=True),
    sa.Column('confirmed_by_user', sa.Boolean(), nullable=True),
    sa.Column('confirmed_at', sa.DateTime(), nullable=True),
    sa.Column('confirmed_ip', sa.String(length=64), nullable=True),
    sa.Column('confirmed_via', sa.String(length=5), nullable=True),
    sa.Column('dedup_score', sa.Float(), nullable=True),
    sa.Column('published_article_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=17), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    # Add the mutual foreign keys after both tables are created
    op.create_foreign_key('fk_kb_articles_origin_solution_id', 'kb_articles', 'solutions', ['origin_solution_id'], ['id'])
    op.create_foreign_key('fk_solutions_published_article_id', 'solutions', 'kb_articles', ['published_article_id'], ['id'])
    op.create_table('step_sequences',
    sa.Column('ticket_id', sa.String(length=45), nullable=False),
    sa.Column('steps', sqlite.JSON(), nullable=False),
    sa.Column('current_index', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('ticket_id')
    )
    op.create_table('agents',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('password', sa.String(length=100), nullable=False),
    sa.Column('role', sa.String(length=10), nullable=True),
    sa.Column('department_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('name')
    )
    op.create_table('kb_article_versions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('article_id', sa.Integer(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=True),
    sa.Column('content_md', sa.Text(), nullable=True),
    sa.Column('changelog', sa.Text(), nullable=True),
    sa.Column('editor_agent_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['article_id'], ['kb_articles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('kb_feedback',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('kb_article_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('user_email', sa.String(length=255), nullable=True),
    sa.Column('feedback_type', sa.Enum('helpful', 'not_helpful', 'issue', name='kbfeedbacktype'), nullable=True),
    sa.Column('rating', sa.Integer(), nullable=True),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('context_json', sa.JSON(), nullable=True),
    sa.Column('resolved_by', sa.Integer(), nullable=True),
    sa.Column('resolved_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['kb_article_id'], ['kb_articles.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('kb_article_id', 'user_id', name='ux_kb_feedback_user')
    )
    op.create_table('kb_index',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('article_id', sa.Integer(), nullable=True),
    sa.Column('faiss_id', sa.Integer(), nullable=True),
    sa.Column('embedding_model', sa.String(length=100), nullable=True),
    sa.Column('embedding_hash', sa.String(length=64), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['article_id'], ['kb_articles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('messages',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ticket_id', sa.String(length=45), nullable=False),
    sa.Column('sender', sa.String(length=100), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('type', sa.String(length=100), nullable=True),
    sa.Column('meta', sqlite.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('sender_agent_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['sender_agent_id'], ['agents.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tickets',
    sa.Column('id', sa.String(length=45), nullable=False),
    sa.Column('status', sa.String(length=45), nullable=False),
    sa.Column('owner', sa.String(length=100), nullable=True),
    sa.Column('subject', sa.String(length=100), nullable=False),
    sa.Column('requester_name', sa.String(length=100), nullable=False),
    sa.Column('category', sa.String(length=100), nullable=False),
    sa.Column('department_id', sa.Integer(), nullable=True),
    sa.Column('priority', sa.String(length=100), nullable=False),
    sa.Column('impact_level', sa.String(length=100), nullable=False),
    sa.Column('urgency_level', sa.String(length=100), nullable=False),
    sa.Column('requester_email', sa.String(length=100), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('level', sa.Integer(), nullable=True),
    sa.Column('resolved_by', sa.Integer(), nullable=True),
    sa.Column('assigned_to', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['assigned_to'], ['agents.id'], ),
    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], ),
    sa.ForeignKeyConstraint(['resolved_by'], ['agents.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('email_queue',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ticket_id', sa.String(length=45), nullable=True),
    sa.Column('to_email', sa.String(length=100), nullable=False),
    sa.Column('cc', sa.Text(), nullable=True),
    sa.Column('subject', sa.String(length=100), nullable=False),
    sa.Column('body', sa.Text(), nullable=False),
    sa.Column('status', sa.String(length=100), nullable=True),
    sa.Column('error', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('sent_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['ticket_id'], ['tickets.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('kb_drafts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ticket_id', sa.String(length=45), nullable=False),
    sa.Column('title', sa.String(length=100), nullable=True),
    sa.Column('body', sa.Text(), nullable=True),
    sa.Column('status', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['ticket_id'], ['tickets.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('mentions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('message_id', sa.Integer(), nullable=False),
    sa.Column('mentioned_agent_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['mentioned_agent_id'], ['agents.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['message_id'], ['messages.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('message_id', 'mentioned_agent_id')
    )
    op.create_table('resolution_attempts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ticket_id', sa.String(length=45), nullable=False),
    sa.Column('solution_id', sa.Integer(), nullable=False),
    sa.Column('attempt_no', sa.Integer(), nullable=False),
    sa.Column('sent_at', sa.DateTime(), nullable=False),
    sa.Column('outcome', sa.String(length=16), nullable=True),
    sa.Column('rejected_reason', sa.String(length=64), nullable=True),
    sa.Column('rejected_detail_json', sa.Text(), nullable=True),
    sa.Column('closed_at', sa.DateTime(), nullable=True),
    sa.Column('agent_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ),
    sa.ForeignKeyConstraint(['solution_id'], ['solutions.id'], ),
    sa.ForeignKeyConstraint(['ticket_id'], ['tickets.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('resolution_attempts', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_resolution_attempts_outcome'), ['outcome'], unique=False)
        batch_op.create_index(batch_op.f('ix_resolution_attempts_solution_id'), ['solution_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_resolution_attempts_ticket_id'), ['ticket_id'], unique=False)

    op.create_table('ticket_assignments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ticket_id', sa.String(length=45), nullable=False),
    sa.Column('agent_id', sa.Integer(), nullable=True),
    sa.Column('assigned_at', sa.String(length=100), nullable=True),
    sa.Column('unassigned_at', sa.String(length=100), nullable=True),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['ticket_id'], ['tickets.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ticket_cc',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ticket_id', sa.String(length=45), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.ForeignKeyConstraint(['ticket_id'], ['tickets.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('ticket_id', 'email', name='ux_ticket_cc')
    )
    op.create_table('ticket_events',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ticket_id', sa.String(length=45), nullable=False),
    sa.Column('event_type', sa.String(length=100), nullable=False),
    sa.Column('actor_agent_id', sa.Integer(), nullable=True),
    sa.Column('details', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['actor_agent_id'], ['agents.id'], ),
    sa.ForeignKeyConstraint(['ticket_id'], ['tickets.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('ticket_events', schema=None) as batch_op:
        batch_op.create_index('ix_ticket_events_ticket_created', ['ticket_id', 'created_at'], unique=False)

    op.create_table('ticket_feedback',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ticket_id', sa.String(length=45), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=True),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('submitted_at', sa.String(length=100), nullable=True),
    sa.ForeignKeyConstraint(['ticket_id'], ['tickets.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ticket_watchers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ticket_id', sa.String(length=45), nullable=False),
    sa.Column('agent_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ),
    sa.ForeignKeyConstraint(['ticket_id'], ['tickets.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('ticket_id', 'agent_id', name='ux_ticket_watchers')
    )
    # ### end Alembic commands ###

    # Seed initial departments (skip if already present)
    op.execute("""
        INSERT IGNORE INTO departments (id, name) VALUES
        (1, 'ERP'),
        (2, 'CRM'),
        (3, 'SRM'),
        (4, 'Network'),
        (5, 'Security'),
        (6, 'General Support')
        ON CONFLICT(id) DO NOTHING;
    """)

    # Seed initial agent (skip if already present)
    op.execute("""
        INSERT IGNORE INTO agents (id, name, email, password, role, department_id) VALUES
        (1, 'AgentPriya', 'priya@example.com', '@123', 'L1', 1),
        (2, 'AgentKumar', 'kumar@example.com', '@123', 'L1', 4),
        (3, 'AgentRam', 'ram@example.com', '@123', 'L1', 5),
        (4, 'AgentSonia', 'sonia@example.com', '@123', 'L2', 1),
        (5, 'AgentVikram', 'vikram@example.com', '@123', 'L2', 2),
        (6, 'AgentRavi', 'ravi@example.com', '@123', 'L2', 3),
        (7, 'AgentMeena', 'meena@example.com', '@123', 'L3', 5),
        (8, 'AgentArjun', 'arjun@example.com', '@123', 'L3', 1),
        (9, 'AgentNeha', 'neha@example.com', '@123', 'MANAGER', 1),
        (10, 'AgentDavid', 'david@example.com', '@123', 'MANAGER', 2)
        ON CONFLICT(id) DO NOTHING;
    """)
        # Insert dummy ticket for testing
    import logging
    try:
        op.execute("""
            INSERT IGNORE INTO tickets (
                id, status, owner, subject, requester_name, category, department_id, priority, impact_level, urgency_level, requester_email, created_at, updated_at, level, resolved_by, assigned_to
            ) VALUES (
                'TICKET-TEST-1', 'open', 'Admin', 'Dummy Ticket Subject', 'Test User', 'General', 1, 'High', 'Medium', 'Low', 'testuser@example.com', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 1, NULL, NULL
            );
        """)
    except Exception as e:
        logging.error(f"Dummy ticket insert failed: {e}")


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('ticket_watchers')
    op.drop_table('ticket_feedback')
    with op.batch_alter_table('ticket_events', schema=None) as batch_op:
        batch_op.drop_index('ix_ticket_events_ticket_created')

    op.drop_table('ticket_events')
    op.drop_table('ticket_cc')
    op.drop_table('ticket_assignments')
    with op.batch_alter_table('resolution_attempts', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_resolution_attempts_ticket_id'))
        batch_op.drop_index(batch_op.f('ix_resolution_attempts_solution_id'))
        batch_op.drop_index(batch_op.f('ix_resolution_attempts_outcome'))

    op.drop_table('resolution_attempts')
    op.drop_table('mentions')
    op.drop_table('kb_drafts')
    op.drop_table('email_queue')
    op.drop_table('tickets')
    op.drop_table('messages')
    op.drop_table('kb_index')
    op.drop_table('kb_feedback')
    op.drop_table('kb_article_versions')
    op.drop_table('agents')
    op.drop_table('step_sequences')
    op.drop_table('solutions')
    op.drop_table('kb_audit')
    with op.batch_alter_table('kb_articles', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_kb_articles_canonical_fingerprint'))

    op.drop_table('kb_articles')
    # ### end Alembic commands ###
